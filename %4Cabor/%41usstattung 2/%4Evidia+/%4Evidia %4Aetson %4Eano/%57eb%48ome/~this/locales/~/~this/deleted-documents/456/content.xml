<?xml version='1.1' encoding='UTF-8'?>
<xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  <web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage>de</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.SvenHoyer</creator>
  <creationDate>1562157645000</creationDate>
  <versions>head	40.1;
access;
symbols;
locks; strict;
comment	@# @;


40.1
date	2020.09.07.17.14.05;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	39.1;

39.1
date	2020.09.07.15.37.20;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	38.1;

38.1
date	2020.09.07.15.20.32;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	37.1;

37.1
date	2020.09.07.13.06.49;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	36.1;

36.1
date	2020.09.07.10.38.25;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	35.1;

35.1
date	2020.09.07.10.09.23;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	34.1;

34.1
date	2020.09.07.09.40.19;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	33.1;

33.1
date	2020.08.10.12.08.47;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	32.1;

32.1
date	2020.08.10.12.08.33;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	31.1;

31.1
date	2020.07.20.14.31.59;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	30.7;

30.7
date	2020.03.10.13.43.32;	author XWiki_2ESvenHoyer;	state diff;
branches;
next	30.6;

30.6
date	2020.03.10.13.43.31;	author XWiki_2ESvenHoyer;	state full;
branches;
next	30.5;

30.5
date	2020.03.10.13.43.31;	author XWiki_2ESvenHoyer;	state diff;
branches;
next	30.4;

30.4
date	2020.03.10.13.43.30;	author XWiki_2ESvenHoyer;	state diff;
branches;
next	30.3;

30.3
date	2020.03.10.13.31.37;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	30.2;

30.2
date	2020.03.10.13.31.36;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	30.1;

30.1
date	2019.12.02.09.26.46;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	29.1;

29.1
date	2019.12.02.09.26.31;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	28.1;

28.1
date	2019.09.17.13.46.53;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	27.1;

27.1
date	2019.09.04.12.38.59;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	26.1;

26.1
date	2019.09.04.11.40.44;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	25.1;

25.1
date	2019.09.04.09.28.37;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	24.1;

24.1
date	2019.08.26.12.56.39;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	23.1;

23.1
date	2019.08.26.12.56.16;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	22.1;

22.1
date	2019.08.07.11.22.13;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	21.1;

21.1
date	2019.08.07.11.21.39;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	20.1;

20.1
date	2019.08.07.11.18.15;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	19.1;

19.1
date	2019.08.07.11.17.37;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	18.1;

18.1
date	2019.08.06.11.32.35;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	17.1;

17.1
date	2019.08.05.14.57.15;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	16.1;

16.1
date	2019.08.05.14.53.07;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	15.1;

15.1
date	2019.08.05.14.52.47;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	14.1;

14.1
date	2019.08.05.14.51.55;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	13.3;

13.3
date	2019.08.04.15.17.23;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	13.2;

13.2
date	2019.08.02.15.10.10;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	13.1;

13.1
date	2019.08.02.14.44.17;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	12.1;

12.1
date	2019.08.02.14.43.35;	author XWiki_2Emakau_30_30_35;	state full;
branches;
next	11.1;

11.1
date	2019.08.02.13.18.51;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	10.1;

10.1
date	2019.08.02.09.59.36;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	9.1;

9.1
date	2019.08.02.08.17.24;	author XWiki_2Emakau_30_30_35;	state diff;
branches;
next	8.2;

8.2
date	2019.08.01.12.22.01;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	8.1;

8.1
date	2019.08.01.12.17.11;	author XWiki_2EMatthiasDomnik;	state full;
branches;
next	7.2;

7.2
date	2019.08.01.10.51.06;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	7.1;

7.1
date	2019.07.31.15.27.29;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	6.4;

6.4
date	2019.07.27.16.27.29;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	6.3;

6.3
date	2019.07.22.19.34.31;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	6.2;

6.2
date	2019.07.22.19.34.07;	author XWiki_2EMatthiasDomnik;	state full;
branches;
next	6.1;

6.1
date	2019.07.22.19.28.44;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	5.1;

5.1
date	2019.07.22.19.07.18;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	4.1;

4.1
date	2019.07.22.18.17.52;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	3.1;

3.1
date	2019.07.22.17.22.18;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	2.1;

2.1
date	2019.07.22.16.38.13;	author XWiki_2EMatthiasDomnik;	state full;
branches;
next	1.4;

1.4
date	2019.07.03.12.40.45;	author XWiki_2ESvenHoyer;	state diff;
branches;
next	1.3;

1.3
date	2019.07.03.12.25.16;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	1.2;

1.2
date	2019.07.03.12.23.36;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	1.1;

1.1
date	2019.07.03.12.23.00;	author XWiki_2EMatthiasDomnik;	state diff;
branches;
next	;


desc
@@


40.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1599498845000&lt;/date>
  &lt;contentUpdateDate>1599498845000&lt;/contentUpdateDate>
  &lt;version>40.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:775px" %)
|=(% style="width: 160px;" %)Netzwerkname |=(% style="width: 175px;" %)S/N |=(% style="width: 440px;" %) MAC
|nvidia-nano-1        |1421919067453      |00:04:4B:E5:23:61
|nvidia-nano-2        |1421919067755      |00:04:4B:E5:24:BC
|nvidia-nano-3        |1421919067198      |00:04:4B:E5:22:18
|nvidia-nano-4        |1421919066681      |00:04:4B:E5:21:A8
|nvidia-nano-5        |1421919092401      |00:04:4B:E5:24:BD
|nvidia-nano-6        |1421919067858      |00:04:4B:E5:24:34
|nvidia-nano-7        |1421919092657      |00:04:4B:E5:26:47
|nvidia-nano-8        |1421919067124      |00:04:4B:E5:22:13
|nvidia-nano-9        |1421919067120      |00:04:4B:E5:22:27
|nvidia-nano-10       |1421919067940      |00:04:4B:E5:24:28
|nvidia-nano-11       |1421919067073      |00:04:4B:E5:22:28
|nvidia-nano-12       |1421919067227      |00:04:4B:E5:22:25
|nvidia-nano-13       |1421919092334      |00:04:4B:E5:24:6d
|nvidia-nano-14       |1421919067679      |00:04:4B:E5:24:85
|nvidia-nano-15       |1421919067783      |00:04:4B:E5:24:D4
|nvidia-nano-16       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-17       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-18       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-19       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-20       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


39.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate&gt;1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1599493040000&lt;/date>
  &lt;contentUpdateDate>1599493040000&lt;/contentUpdateDate>
  &lt;version>39.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:775px" %)
|=(% style="width: 160px;" %)Netzwerkname |=(% style="width: 175px;" %)S/N |=(% style="width: 440px;" %) MAC
|nvidia-nano-1        |1421919067453      |00:04:4B:E5:23:61
|nvidia-nano-2        |1421919067755      |00:04:4B:E5:24:BC
|nvidia-nano-3        |1421919067198      |00:04:4B:E5:22:18
|nvidia-nano-4        |1421919066681      |00:04:4B:E5:21:A8
|nvidia-nano-5        |1421919092401      |00:04:4B:E5:24:BD
|nvidia-nano-6        |1421919067858      |00:04:4B:E5:24:34
|nvidia-nano-7        |1421919092657      |00:04:4B:E5:26:47
|nvidia-nano-8        |1421919067124      |00:04:4B:E5:22:13
|nvidia-nano-9        |1421919067120      |00:04:4B:E5:22:27
|nvidia-nano-10       |1421919067940      |00:04:4B:E5:24:28
|nvidia-nano-11       |1421919067073      |00:04:4B:E5:22:28
|nvidia-nano-12       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-13       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-14       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-15       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-16       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-17       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-18       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-19       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-20       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


38.1
log
@@
text
@d13 3
a15 3
  &lt;date>1599492032000&lt;/date>
  &lt;contentUpdateDate>1599492032000&lt;/contentUpdateDate>
  &lt;version>38.1&lt;/version>
d39 2
a40 2
|nvidia-nano-10       |1421919067940     |00:04:4B:E5:24:28
|nvidia-nano-11       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
@


37.1
log
@@
text
@d13 3
a15 3
  &lt;date>1599484009000&lt;/date>
  &lt;contentUpdateDate>1599484009000&lt;/contentUpdateDate>
  &lt;version>37.1&lt;/version>
d37 13
a49 13
|nvidia-nano-8        |1421919067124      |00:04:4B:E5:22:13
|nvidia-nano-9        |1421919067120      |00:04:4B:E5:22:27
|nvidia-nano-10        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-11        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-12        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-13        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-14        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-15        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-16        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-17        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-18        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-19        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-20        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
@


36.1
log
@@
text
@d13 3
a15 3
  &lt;date>1599475105000&lt;/date>
  &lt;contentUpdateDate>1599475105000&lt;/contentUpdateDate>
  &lt;version>36.1&lt;/version>
d37 2
a38 2
|nvidia-nano-8        |1421919067124      |00:04:4B:E5:22:13
|nvidia-nano-9        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
@


35.1
log
@@
text
@d13 3
a15 3
  &lt;date>1599473363000&lt;/date>
  &lt;contentUpdateDate>1599473363000&lt;/contentUpdateDate>
  &lt;version>35.1&lt;/version>
d37 1
a37 1
|nvidia-nano-8        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
@


34.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1599471619000&lt;/date>
  &lt;contentUpdateDate>1599471619000&lt;/contentUpdateDate>
  &lt;version>34.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:775px" %)
|=(% style="width: 160px;" %)Netzwerkname |=(% style="width: 175px;" %)S/N |=(% style="width: 440px;" %) MAC
|nvidia-nano-1        |1421919067453      |00:04:4B:E5:23:61
|nvidia-nano-2        |1421919067755      |00:04:4B:E5:24:BC
|nvidia-nano-3        |1421919067198      |00:04:4B:E5:22:18
|nvidia-nano-4        |1421919066681      |00:04:4B:E5:21:A8
|nvidia-nano-5        |1421919092401      |00:04:4B:E5:24:BD
|nvidia-nano-6        |1421919067858      |00:04:4B:E5:24:34
|nvidia-nano-7        |1421919092657      |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-8        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-9        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-10        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-11        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-12        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-13        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-14        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-15        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-16        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-17        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-18        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-19        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-20        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


33.1
log
@@
text
@d13 3
a15 3
  &lt;date>1597061327000&lt;/date>
  &lt;contentUpdateDate>1597061327000&lt;/contentUpdateDate>
  &lt;version>33.1&lt;/version>
d35 2
a36 2
|nvidia-nano-6        |1421919067858      |00:04:4B:E5:24:34
|nvidia-nano-7        |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
@


32.1
log
@@
text
@d13 3
a15 3
  &lt;date>1597061313000&lt;/date>
  &lt;contentUpdateDate>1597061313000&lt;/contentUpdateDate>
  &lt;version>32.1&lt;/version>
d35 1
a35 1
|nvidia-nano-6        |1421919067858      |00:04:4B:E5:24:34 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
@


31.1
log
@@
text
@d13 3
a15 3
  &lt;date>1595255519000&lt;/date>
  &lt;contentUpdateDate>1595255519000&lt;/contentUpdateDate>
  &lt;version>31.1&lt;/version>
d21 29
a49 31
  &lt;content>{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
&amp;#xd;
= Vorhandene Boards =&amp;#xd;
&amp;#xd;
(% style="width:775px" %)&amp;#xd;
|=(% style="width: 160px;" %)Netzwerkname	|=(% style="width: 175px;" %)S/N	|=(% style="width: 440px;" %) MAC&amp;#xd;
|nvidia-nano-1								|1421919067453						|00:04:4B:E5:23:61&amp;#xd;
|nvidia-nano-2								|1421919067755						|00:04:4B:E5:24:BC&amp;#xd;
|nvidia-nano-3								|1421919067198						|00:04:4B:E5:22:18&amp;#xd;
|nvidia-nano-4								|1421919066681						|00:04:4B:E5:21:A8&amp;#xd;
|nvidia-nano-5								|1421919092401						|00:04:4B:E5:24:BD&amp;#xd;
|nvidia-nano-6								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-7								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-8								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-9								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-10								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-11								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-12								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-13								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-14								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-15								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-16								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-17								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-18								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-19								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-20								|**nicht zugewiesen**				|00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
&amp;#xd;
&lt;/content>
@


30.7
log
@clear view Zugriffsrechte für XWiki.JulianPingel
@
text
@d11 1
a11 1
  &lt;author>XWiki.SvenHoyer&lt;/author>
d13 3
a15 3
  &lt;date>1583847812000&lt;/date>
  &lt;contentUpdateDate>1575278806000&lt;/contentUpdateDate>
  &lt;version>30.7&lt;/version>
d17 2
a18 2
  &lt;comment>clear view Zugriffsrechte für XWiki.JulianPingel&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
d21 31
a51 29
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:701px" %)
|=(% style="width: 146px;" %)Netzwerkname|=(% style="width: 273px;" %)S/N |=(% style="width: 301px;" %) MAC
|(% style="width:146px" %)nvidia-nano-1|(% style="width:273px" %)1421919067453                    |(% style="width:301px" %) 00:04:4B:E5:23:61
|(% style="width:146px" %)nvidia-nano-2       |(% style="width:273px" %)1421919067755                    |(% style="width:301px" %) 00:04:4B:E5:24:BC
|(% style="width:146px" %)nvidia-nano-3|(% style="width:273px" %)1421919067198                    |(% style="width:301px" %) 00:04:4B:E5:22:18
|(% style="width:146px" %)nvidia-nano-4       |(% style="width:273px" %)1421919066681                    |(% style="width:301px" %) 00:04:4B:E5:21:A8
|(% style="width:146px" %)nvidia-nano-5|(% style="width:273px" %)1421919092401                    |(% style="width:301px" %) 00:04:4B:E5:24:BD
|(% style="width:146px" %)nvidia-nano-6        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-7       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-8       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-9       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-10|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-11|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-12        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-13        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-14        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-15        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-16        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-17        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-18        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-19    |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-20|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
@


30.6
log
@clear comment Zugriffsrechte für XWiki.JulianPingel
@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.SvenHoyer&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1583847811000&lt;/date>
  &lt;contentUpdateDate>1575278806000&lt;/contentUpdateDate>
  &lt;version>30.6&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment>clear comment Zugriffsrechte für XWiki.JulianPingel&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:701px" %)
|=(% style="width: 146px;" %)Netzwerkname|=(% style="width: 273px;" %)S/N |=(% style="width: 301px;" %) MAC
|(% style="width:146px" %)nvidia-nano-1|(% style="width:273px" %)1421919067453                    |(% style="width:301px" %) 00:04:4B:E5:23:61
|(% style="width:146px" %)nvidia-nano-2       |(% style="width:273px" %)1421919067755                    |(% style="width:301px" %) 00:04:4B:E5:24:BC
|(% style="width:146px" %)nvidia-nano-3|(% style="width:273px" %)1421919067198                    |(% style="width:301px" %) 00:04:4B:E5:22:18
|(% style="width:146px" %)nvidia-nano-4       |(% style="width:273px" %)1421919066681                    |(% style="width:301px" %) 00:04:4B:E5:21:A8
|(% style="width:146px" %)nvidia-nano-5|(% style="width:273px" %)1421919092401                    |(% style="width:301px" %) 00:04:4B:E5:24:BD
|(% style="width:146px" %)nvidia-nano-6        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-7       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-8       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-9       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-10|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-11|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-12        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-13        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-14        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-15        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-16        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-17        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-18        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-19    |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-20|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>1&lt;/number>
    &lt;className>XWiki.XWikiRights&lt;/className>
    &lt;guid>7d7961b3-e8e1-4089-822c-3a3d8af7dd65&lt;/guid>
    &lt;class>
      &lt;name>XWiki.XWikiRights&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;allow>
        &lt;defaultValue>1&lt;/defaultValue>
        &lt;disabled>0&lt;/disabled>
        &lt;displayFormType>select&lt;/displayFormType>
        &lt;displayType>allow&lt;/displayType>
        &lt;name>allow&lt;/name>
        &lt;number>4&lt;/number>
        &lt;prettyName>Allow/Deny&lt;/prettyName>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.BooleanClass&lt;/classType>
      &lt;/allow>
      &lt;groups>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>groups&lt;/name>
        &lt;number>1&lt;/number>
        &lt;picker>1&lt;/picker>
        &lt;prettyName>Groups&lt;/prettyName>
        &lt;relationalStorage>0&lt;/relationalStorage>
        &lt;separator> &lt;/separator>
        &lt;size>5&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.GroupsClass&lt;/classType>
      &lt;/groups>
      &lt;levels>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>select&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>levels&lt;/name>
        &lt;number>2&lt;/number>
        &lt;prettyName>Levels&lt;/prettyName>
        &lt;relationalStorage>0&lt;/relationalStorage>
        &lt;separator> &lt;/separator>
        &lt;size>3&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.LevelsClass&lt;/classType>
      &lt;/levels>
      &lt;users>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>users&lt;/name>
        &lt;number>3&lt;/number>
        &lt;picker>1&lt;/picker>
        &lt;prettyName>Users&lt;/prettyName>
        &lt;relationalStorage>0&lt;/relationalStorage>
        &lt;separator> &lt;/separator>
        &lt;size>5&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.UsersClass&lt;/classType>
      &lt;/users>
    &lt;/class>
    &lt;property>
      &lt;allow>0&lt;/allow>
    &lt;/property>
    &lt;property>
      &lt;groups>&lt;/groups>
    &lt;/property>
    &lt;property>
      &lt;levels>view&lt;/levels>
    &lt;/property>
    &lt;property>
      &lt;users>XWiki.JulianPingel&lt;/users>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


30.5
log
@deny comment Zugriffsrechte für XWiki.JulianPingel
@
text
@d15 1
a15 1
  &lt;version>30.5&lt;/version>
d17 1
a17 1
  &lt;comment>deny comment Zugriffsrechte für XWiki.JulianPingel&lt;/comment>
d196 1
a196 1
      &lt;levels>view,comment&lt;/levels>
@


30.4
log
@deny view Zugriffsrechte für XWiki.JulianPingel
@
text
@d13 1
a13 1
  &lt;date>1583847810000&lt;/date>
d15 1
a15 1
  &lt;version>30.4&lt;/version>
d17 1
a17 1
  &lt;comment>deny view Zugriffsrechte für XWiki.JulianPingel&lt;/comment>
d121 1
a121 1
    &lt;number>0&lt;/number>
d123 1
a123 1
    &lt;guid>00ee56a9-f2fc-4c82-817e-f7feecf62e22&lt;/guid>
d190 1
a190 1
      &lt;allow>1&lt;/allow>
d196 1
a196 1
      &lt;levels>comment&lt;/levels>
a201 80
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>1&lt;/number>
    &lt;className>XWiki.XWikiRights&lt;/className>
    &lt;guid>7d7961b3-e8e1-4089-822c-3a3d8af7dd65&lt;/guid>
    &lt;class>
      &lt;name>XWiki.XWikiRights&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;allow>
        &lt;defaultValue>1&lt;/defaultValue>
        &lt;disabled>0&lt;/disabled>
        &lt;displayFormType>select&lt;/displayFormType>
        &lt;displayType>allow&lt;/displayType>
        &lt;name>allow&lt;/name>
        &lt;number>4&lt;/number>
        &lt;prettyName>Allow/Deny&lt;/prettyName>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.BooleanClass&lt;/classType>
      &lt;/allow>
      &lt;groups>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>groups&lt;/name>
        &lt;number>1&lt;/number>
        &lt;picker>1&lt;/picker>
        &lt;prettyName>Groups&lt;/prettyName>
        &lt;relationalStorage>0&lt;/relationalStorage>
        &lt;separator> &lt;/separator>
        &lt;size>5&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.GroupsClass&lt;/classType>
      &lt;/groups>
      &lt;levels>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>select&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>levels&lt;/name>
        &lt;number>2&lt;/number>
        &lt;prettyName>Levels&lt;/prettyName>
        &lt;relationalStorage>0&lt;/relationalStorage>
        &lt;separator> &lt;/separator>
        &lt;size>3&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.LevelsClass&lt;/classType>
      &lt;/levels>
      &lt;users>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>users&lt;/name>
        &lt;number>3&lt;/number>
        &lt;picker>1&lt;/picker>
        &lt;prettyName>Users&lt;/prettyName>
        &lt;relationalStorage>0&lt;/relationalStorage>
        &lt;separator> &lt;/separator>
        &lt;size>5&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;classType>com.xpn.xwiki.objects.classes.UsersClass&lt;/classType>
      &lt;/users>
    &lt;/class>
    &lt;property>
      &lt;allow>0&lt;/allow>
    &lt;/property>
    &lt;property>
      &lt;levels>view&lt;/levels>
    &lt;/property>
    &lt;property>
      &lt;users>XWiki.JulianPingel&lt;/users>
    &lt;/property>
  &lt;/object>
@


30.3
log
@allow comment Zugriffsrechte für XWiki.JulianPingel
@
text
@d11 1
a11 1
  &lt;author>XWiki.makau005&lt;/author>
d13 1
a13 1
  &lt;date>1583847097000&lt;/date>
d15 1
a15 1
  &lt;version>30.3&lt;/version>
d17 1
a17 1
  &lt;comment>allow comment Zugriffsrechte für XWiki.JulianPingel&lt;/comment>
d196 1
a196 1
      &lt;levels>view,comment&lt;/levels>
d202 80
@


30.2
log
@allow view Zugriffsrechte für XWiki.JulianPingel
@
text
@d13 1
a13 1
  &lt;date>1583847096000&lt;/date>
d15 1
a15 1
  &lt;version>30.2&lt;/version>
d17 1
a17 1
  &lt;comment>allow view Zugriffsrechte für XWiki.JulianPingel&lt;/comment>
d193 1
a193 1
      &lt;levels>view&lt;/levels>
d196 3
@


30.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1575278806000&lt;/date>
  &lt;contentUpdateDate>1575278806000&lt;/contentUpdateDate>
  &lt;version>30.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:701px" %)
|=(% style="width: 146px;" %)Netzwerkname|=(% style="width: 273px;" %)S/N |=(% style="width: 301px;" %) MAC
|(% style="width:146px" %)nvidia-nano-1|(% style="width:273px" %)1421919067453                    |(% style="width:301px" %) 00:04:4B:E5:23:61
|(% style="width:146px" %)nvidia-nano-2       |(% style="width:273px" %)1421919067755                    |(% style="width:301px" %) 00:04:4B:E5:24:BC
|(% style="width:146px" %)nvidia-nano-3|(% style="width:273px" %)1421919067198                    |(% style="width:301px" %) 00:04:4B:E5:22:18
|(% style="width:146px" %)nvidia-nano-4       |(% style="width:273px" %)1421919066681                    |(% style="width:301px" %) 00:04:4B:E5:21:A8
|(% style="width:146px" %)nvidia-nano-5|(% style="width:273px" %)1421919092401                    |(% style="width:301px" %) 00:04:4B:E5:24:BD
|(% style="width:146px" %)nvidia-nano-6        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-7       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-8       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-9       |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-10|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-11|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-12        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-13        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-14        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-15        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-16        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-17        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-18        |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-19    |(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|(% style="width:146px" %)nvidia-nano-20|(% style="width:273px" %)**nicht zugewiesen**             |(% style="width:301px" %) 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value&gt;Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


29.1
log
@@
text
@d13 3
a15 3
  &lt;date>1575278791000&lt;/date>
  &lt;contentUpdateDate>1575278791000&lt;/contentUpdateDate>
  &lt;version>29.1&lt;/version>
d34 1
a34 1
|(% style="width:146px" %)nvidia-nano-5                            |(% style="width:273px" %)1421919092401                    |(% style="width:301px" %) 00:04:4B:E5:24:BD
@


28.1
log
@@
text
@d13 3
a15 3
  &lt;date>1568728013000&lt;/date>
  &lt;contentUpdateDate>1568728013000&lt;/contentUpdateDate>
  &lt;version>28.1&lt;/version>
d21 29
a49 29
  &lt;content>{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
&amp;#xd;
= Vorhandene Boards =&amp;#xd;
&amp;#xd;
(% style="width:40ex" %)&amp;#xd;
|=(% style="width: 12.5ex;" %)Netzwerkname|=(% style="width: 22.5ex;" %)S/N |=(% style="width: 22.5ex;" %) MAC&amp;#xd;
|nvidia-nano-1                            |1421919067453                    | 00:04:4B:E5:23:61&amp;#xd;
|nvidia-nano-2                            |1421919067755                    | 00:04:4B:E5:24:BC&amp;#xd;
|nvidia-nano-3                            |1421919067198                    | 00:04:4B:E5:22:18&amp;#xd;
|nvidia-nano-4                            |1421919066681                    | 00:04:4B:E5:21:A8&amp;#xd;
|nvidia-nano-5                            |1421919092401                    | 00:04:4B:E5:24:BD&amp;#xd;
|nvidia-nano-6                            |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-7                            |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-8                            |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-9                            |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-10                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-11                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-12                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-13                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-14                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-15                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-16                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-17                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-18                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-19                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&amp;#xd;
|nvidia-nano-20                           |**nicht zugewiesen**             | 00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)&lt;/content>
@


27.1
log
@@
text
@d13 3
a15 3
  &lt;date>1567600739000&lt;/date>
  &lt;contentUpdateDate>1567600739000&lt;/contentUpdateDate>
  &lt;version>27.1&lt;/version>
d21 29
a49 29
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:40ex" %)
|=(% style="width: 12.5ex;" %)Netzwerkname|=(% style="width: 22.5ex;" %)S/N
|nvidia-nano-1  |1421919067453
|nvidia-nano-2  |1421919067755
|nvidia-nano-3  |1421919067198
|nvidia-nano-4  |1421919066681
|nvidia-nano-5  |1421919092401
|nvidia-nano-6  |**nicht zugewiesen**
|nvidia-nano-7  |**nicht zugewiesen**
|nvidia-nano-8  |**nicht zugewiesen**
|nvidia-nano-9  |**nicht zugewiesen**
|nvidia-nano-10 |**nicht zugewiesen**
|nvidia-nano-11 |**nicht zugewiesen**
|nvidia-nano-12 |**nicht zugewiesen**
|nvidia-nano-13 |**nicht zugewiesen**
|nvidia-nano-14 |**nicht zugewiesen**
|nvidia-nano-15 |**nicht zugewiesen**
|nvidia-nano-16 |**nicht zugewiesen**
|nvidia-nano-17 |**nicht zugewiesen**
|nvidia-nano-18 |**nicht zugewiesen**
|nvidia-nano-19 |**nicht zugewiesen**
|nvidia-nano-20 |**nicht zugewiesen**&lt;/content>
@


26.1
log
@@
text
@d13 3
a15 3
  &lt;date>1567597244000&lt;/date>
  &lt;contentUpdateDate>1567597244000&lt;/contentUpdateDate>
  &lt;version>26.1&lt;/version>
d34 1
a34 1
|nvidia-nano-5  |**nicht zugewiesen**
@


25.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1567589317000&lt;/date>
  &lt;contentUpdateDate>1567589317000&lt;/contentUpdateDate>
  &lt;version>25.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:40ex" %)
|=(% style="width: 12.5ex;" %)Netzwerkname|=(% style="width: 22.5ex;" %)S/N
|nvidia-nano-1  |1421919067453
|nvidia-nano-2  |1421919067755
|nvidia-nano-3  |**nicht zugewiesen**
|nvidia-nano-4  |1421919066681
|nvidia-nano-5  |**nicht zugewiesen**
|nvidia-nano-6  |**nicht zugewiesen**
|nvidia-nano-7  |**nicht zugewiesen**
|nvidia-nano-8  |**nicht zugewiesen**
|nvidia-nano-9  |**nicht zugewiesen**
|nvidia-nano-10 |**nicht zugewiesen**
|nvidia-nano-11 |**nicht zugewiesen**
|nvidia-nano-12 |**nicht zugewiesen**
|nvidia-nano-13 |**nicht zugewiesen**
|nvidia-nano-14 |**nicht zugewiesen**
|nvidia-nano-15 |**nicht zugewiesen**
|nvidia-nano-16 |**nicht zugewiesen**
|nvidia-nano-17 |**nicht zugewiesen**
|nvidia-nano-18 |**nicht zugewiesen**
|nvidia-nano-19 |**nicht zugewiesen**
|nvidia-nano-20 |**nicht zugewiesen**&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


24.1
log
@@
text
@d13 3
a15 3
  &lt;date>1566824199000&lt;/date>
  &lt;contentUpdateDate>1566824199000&lt;/contentUpdateDate>
  &lt;version>24.1&lt;/version>
d21 28
a48 28
  &lt;content>{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
&amp;#xd;
= Vorhandene Boards =&amp;#xd;
&amp;#xd;
(% style="width:40ex" %)&amp;#xd;
|=(% style="width: 12.5ex;" %)Netzwerkname|=(% style="width: 22.5ex;" %)S/N&amp;#xd;
|nvidia-nano-1  |1421919067453&amp;#xd;
|nvidia-nano-2  |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-3  |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-4  |1421919066681&amp;#xd;
|nvidia-nano-5  |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-6  |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-7  |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-8  |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-9  |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-10 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-11 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-12 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-13 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-14 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-15 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-16 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-17 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-18 |**nicht zugewiesen**&amp;#xd;
|nvidia-nano-19 |**nicht zugewiesen**&amp;#xd;
@


23.1
log
@@
text
@d13 3
a15 3
  &lt;date>1566824176000&lt;/date>
  &lt;contentUpdateDate>1566824176000&lt;/contentUpdateDate>
  &lt;version>23.1&lt;/version>
d21 29
a49 28
  &lt;content>= Vorhandene Boards =

(% style="width:40ex" %)
|=(% style="width: 12.5ex;" %)Netzwerkname|=(% style="width: 22.5ex;" %)S/N
|nvidia-nano-1  |1421919067453
|nvidia-nano-2  |**nicht zugewiesen**
|nvidia-nano-3  |**nicht zugewiesen**
|nvidia-nano-4  |1421919066681
|nvidia-nano-5  |**nicht zugewiesen**
|nvidia-nano-6  |**nicht zugewiesen**
|nvidia-nano-7  |**nicht zugewiesen**
|nvidia-nano-8  |**nicht zugewiesen**
|nvidia-nano-9  |**nicht zugewiesen**
|nvidia-nano-10 |**nicht zugewiesen**
|nvidia-nano-11 |**nicht zugewiesen**
|nvidia-nano-12 |**nicht zugewiesen**
|nvidia-nano-13 |**nicht zugewiesen**
|nvidia-nano-14 |**nicht zugewiesen**
|nvidia-nano-15 |**nicht zugewiesen**
|nvidia-nano-16 |**nicht zugewiesen**
|nvidia-nano-17 |**nicht zugewiesen**
|nvidia-nano-18 |**nicht zugewiesen**
|nvidia-nano-19 |**nicht zugewiesen**
|nvidia-nano-20 |**nicht zugewiesen**

{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}&lt;/content>
@


22.1
log
@@
text
@d13 3
a15 3
  &lt;date>1565176933000&lt;/date>
  &lt;contentUpdateDate>1565176933000&lt;/contentUpdateDate>
  &lt;version>22.1&lt;/version>
d21 28
a48 5
  &lt;content>{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
&lt;/content>
@


21.1
log
@@
text
@d13 3
a15 3
  &lt;date>1565176899000&lt;/date>
  &lt;contentUpdateDate>1565176899000&lt;/contentUpdateDate>
  &lt;version>21.1&lt;/version>
d25 1
a25 213
= Nvidia Jetson Nano =&amp;#xd;
&amp;#xd;
{{toc/}}&amp;#xd;
&amp;#xd;
== Installation ==&amp;#xd;
&amp;#xd;
Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:&amp;#xd;
&amp;#xd;
1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.&amp;#xd;
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.&amp;#xd;
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, als auch Maus und Tastatur angeschlossen.&amp;#xd;
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Um die Spannungsversorgung  über den Rundstecker nutzen zu können muss der Jumper auf **J48 **gesetzt sein. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.&amp;#xd;
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**&amp;#xd;
1. Der Standardlogin ist: user: **student**, password:** litpassword**&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]&amp;#xd;
&amp;#xd;
In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]]. Es wird selbstverständlich eine aktive Internetverbindung benötigt.{{/footnote}}. Die folgenden Zeilen müssen per Copy-Paste mit einem beliebigen Editor eingefügt und anschließen mit  {{code language="bash"}}chmod +x{{/code}} ausführbar gemacht werden:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
#!/bin/bash&amp;#xd;
&amp;#xd;
set -e&amp;#xd;
&amp;#xd;
if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then&amp;#xd;
  echo "** Add CUDA stuffs into ~/.bashrc"&amp;#xd;
  echo >> ${HOME}/.bashrc&amp;#xd;
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc&amp;#xd;
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc&amp;#xd;
fi&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ sudo fallocate -l 8G /mnt/8GBi.swap&amp;#xd;
$ sudo chmod 0600 /mnt/8GBi.swap &amp;#xd;
$ sudo mkswap /mnt/8GBi.swap&amp;#xd;
$ sudo swapon /mnt/8GBi.swap&amp;#xd;
$ echo "/mnt/8GBi.swap  none  swap  sw 0  0" | sudo tee -a /etc/fstab > /dev/null &amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nach einen Reboot ist der SWAP-Space für das System verfügbar.&amp;#xd;
&amp;#xd;
{{warning}}&amp;#xd;
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.&amp;#xd;
{{/warning}}&amp;#xd;
&amp;#xd;
Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo nvpmodel -m 0&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Welcher Modus gerade aktiv ist kann mit &amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo nvpmodel -q&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo jetson_clocks --show&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== OpenCV 4.1.0 installieren ==&amp;#xd;
&amp;#xd;
{{error}}&amp;#xd;
Aktuell gibt es noch keine einfache Lösung, um **OpenCV 4.0.1 mit ROS** zu verwenden. Eine praktikable Lösung folgt in Kürze. (08/2019)&amp;#xd;
{{/error}}&amp;#xd;
&amp;#xd;
&amp;#xd;
Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. &amp;#xd;
&amp;#xd;
=== Neukompilieren und installieren ===&amp;#xd;
&amp;#xd;
Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich von Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ cd $HOME # Make sure we are in the correct folder&amp;#xd;
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable&amp;#xd;
$ ./install_opencv_4.1.0.sh &amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.&amp;#xd;
&amp;#xd;
=== Installieren ohne neukompilieren (Pre-Build) ===&amp;#xd;
&amp;#xd;
Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz{{footnote}}Datei kann von Labormitarbeiter übergeben werden. Dia Datei liegt auf dem Server // SoftwarePool//.{{/footnote}} //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //[[install_opencv_4.1.0.sh>>attach:install_prebuild_opencv4.1.0.sh]] //folgendermaßen aufzurufen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo chmod +x install_opencv_4.1.0.sh&amp;#xd;
. ./install_opencv_4.1.0.sh&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!&amp;#xd;
&amp;#xd;
Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo gedit /etc/ld.so.conf.d/opencv.conf&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo ldconfig -v&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== Demo-Programm ==&amp;#xd;
&amp;#xd;
=== Demo-Programm kompilieren und ausführen ===&amp;#xd;
&amp;#xd;
Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example&amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.&amp;#xd;
&amp;#xd;
Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:&amp;#xd;
&amp;#xd;
* Welcome to OpenCV 4.1.0&amp;#xd;
* Number of GPUs: 1&amp;#xd;
* GPU Time: xxx&amp;#xd;
* CPU Time: xxx&amp;#xd;
&amp;#xd;
=== Erläuterung des Demo-Programms ===&amp;#xd;
&amp;#xd;
Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.&amp;#xd;
&amp;#xd;
Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
int num_gpu = cv::cuda::getCudaEnabledDeviceCount();&amp;#xd;
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
cv::Mat frame, Gframe, Gbuff_, Cframe;&amp;#xd;
cv::cuda::GpuMat Gsrc, Gdst;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.&amp;#xd;
&amp;#xd;
Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
Gsrc.upload(Gframe_split[2]);&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
Gdst.download(Gbuff_);&amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.&amp;#xd;
&amp;#xd;
== ROS installieren ==&amp;#xd;
&amp;#xd;
Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
$ sudo apt-get install libtinyxml2-dev&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
$ rosinstall_generator ros_comm --rosdistro kinetic --deps --tar > kinetic-ros_comm.rosinstall&amp;#xd;
$ wstool init -j2 src kinetic-ros_comm.rosinstall&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
cd ~/ros_catkin_ws/src&amp;#xd;
rm -r rospack&amp;#xd;
git clone https://github.com/ros/rospack.git&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.&amp;#xd;
&amp;#xd;
Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
= Remote-Verwendung des Nanos =&amp;#xd;
&amp;#xd;
Eine der einfachsten Methoden das Jetson Nano Board von der ferne aus zu bedienen, stellt die sichere SSH-Verbindung dar. Darüberhinaus bietet die SSH-Verbindung das Board im Headless-Modus zu betreiben. Im folgenden wird die Verbindung für verschiedene Betriebssysteme erläutert.&amp;#xd;
&amp;#xd;
== Windows ==&amp;#xd;
&amp;#xd;
Unter Windows bietet sich das Software-Tool PuTTY an. Der leichte Umgang mit PuTTY ermöglicht einen schnellen Einstieg in die Remote-Verbindung zum Nano Board. Nach Installation der Software, muss lediglich die IP-Adresse des Nano Boards eingegeben werden. Da die Nano Boards jeweils einen eigenen Namen haben, kann statt der IP-Adresse der Name des Boards eingetragen werden. Öffnet man nun die Verbindung zum Board, öffnet sich ein CMD-Fenster und fragt nach den Login-Daten. Nach erfolgreicher Eingabe ist man mit dem System des Boards verbunden und kann auf übliche Weise mit dem Terminal arbeiten. &amp;#xd;
&amp;#xd;
{{putFootnotes/}}&lt;/content>
@


20.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1565176695000&lt;/date>
  &lt;contentUpdateDate&gt;1565176695000&lt;/contentUpdateDate>
  &lt;version>20.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>= Nvidia Jetson Nano =&amp;#xd;
&amp;#xd;
{{toc/}}&amp;#xd;
&amp;#xd;
== Installation ==&amp;#xd;
&amp;#xd;
Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:&amp;#xd;
&amp;#xd;
1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.&amp;#xd;
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.&amp;#xd;
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, als auch Maus und Tastatur angeschlossen.&amp;#xd;
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Um die Spannungsversorgung  über den Rundstecker nutzen zu können muss der Jumper auf **J48 **gesetzt sein. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.&amp;#xd;
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**&amp;#xd;
1. Der Standardlogin ist: user: **student**, password:** litpassword**&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]&amp;#xd;
&amp;#xd;
In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]]. Es wird selbstverständlich eine aktive Internetverbindung benötigt.{{/footnote}}. Die folgenden Zeilen müssen per Copy-Paste mit einem beliebigen Editor eingefügt und anschließen mit  {{code language="bash"}}chmod +x{{/code}} ausführbar gemacht werden:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
#!/bin/bash&amp;#xd;
&amp;#xd;
set -e&amp;#xd;
&amp;#xd;
if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then&amp;#xd;
  echo "** Add CUDA stuffs into ~/.bashrc"&amp;#xd;
  echo >> ${HOME}/.bashrc&amp;#xd;
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc&amp;#xd;
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc&amp;#xd;
fi&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ sudo fallocate -l 8G /mnt/8GBi.swap&amp;#xd;
$ sudo chmod 0600 /mnt/8GBi.swap &amp;#xd;
$ sudo mkswap /mnt/8GBi.swap&amp;#xd;
$ sudo swapon /mnt/8GBi.swap&amp;#xd;
$ echo "/mnt/8GBi.swap  none  swap  sw 0  0" | sudo tee -a /etc/fstab > /dev/null &amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nach einen Reboot ist der SWAP-Space für das System verfügbar.&amp;#xd;
&amp;#xd;
{{warning}}&amp;#xd;
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.&amp;#xd;
{{/warning}}&amp;#xd;
&amp;#xd;
Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo nvpmodel -m 0&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Welcher Modus gerade aktiv ist kann mit &amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo nvpmodel -q&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo jetson_clocks --show&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== OpenCV 4.1.0 installieren ==&amp;#xd;
&amp;#xd;
{{error}}&amp;#xd;
Aktuell gibt es noch keine einfache Lösung, um **OpenCV 4.0.1 mit ROS** zu verwenden. Eine praktikable Lösung folgt in Kürze. (08/2019)&amp;#xd;
{{/error}}&amp;#xd;
&amp;#xd;
&amp;#xd;
Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. &amp;#xd;
&amp;#xd;
=== Neukompilieren und installieren ===&amp;#xd;
&amp;#xd;
Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich von Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ cd $HOME # Make sure we are in the correct folder&amp;#xd;
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable&amp;#xd;
$ ./install_opencv_4.1.0.sh &amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.&amp;#xd;
&amp;#xd;
=== Installieren ohne neukompilieren (Pre-Build) ===&amp;#xd;
&amp;#xd;
Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz{{footnote}}Datei kann von Labormitarbeiter übergeben werden. Dia Datei liegt auf dem Server // SoftwarePool//.{{/footnote}} //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //[[install_opencv_4.1.0.sh>>attach:install_prebuild_opencv4.1.0.sh]] //folgendermaßen aufzurufen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo chmod +x install_opencv_4.1.0.sh&amp;#xd;
. ./install_opencv_4.1.0.sh&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!&amp;#xd;
&amp;#xd;
Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo gedit /etc/ld.so.conf.d/opencv.conf&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo ldconfig -v&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== Demo-Programm ==&amp;#xd;
&amp;#xd;
=== Demo-Programm kompilieren und ausführen ===&amp;#xd;
&amp;#xd;
Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example&amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.&amp;#xd;
&amp;#xd;
Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:&amp;#xd;
&amp;#xd;
* Welcome to OpenCV 4.1.0&amp;#xd;
* Number of GPUs: 1&amp;#xd;
* GPU Time: xxx&amp;#xd;
* CPU Time: xxx&amp;#xd;
&amp;#xd;
=== Erläuterung des Demo-Programms ===&amp;#xd;
&amp;#xd;
Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.&amp;#xd;
&amp;#xd;
Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
int num_gpu = cv::cuda::getCudaEnabledDeviceCount();&amp;#xd;
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
cv::Mat frame, Gframe, Gbuff_, Cframe;&amp;#xd;
cv::cuda::GpuMat Gsrc, Gdst;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.&amp;#xd;
&amp;#xd;
Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
Gsrc.upload(Gframe_split[2]);&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
Gdst.download(Gbuff_);&amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.&amp;#xd;
&amp;#xd;
== ROS installieren ==&amp;#xd;
&amp;#xd;
Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
$ sudo apt-get install libtinyxml2-dev&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
$ rosinstall_generator ros_comm --rosdistro kinetic --deps --tar > kinetic-ros_comm.rosinstall&amp;#xd;
$ wstool init -j2 src kinetic-ros_comm.rosinstall&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
cd ~/ros_catkin_ws/src&amp;#xd;
rm -r rospack&amp;#xd;
git clone https://github.com/ros/rospack.git&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.&amp;#xd;
&amp;#xd;
Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
= Remote-Verwendung des Nanos =&amp;#xd;
&amp;#xd;
Eine der einfachsten Methoden das Jetson Nano Board von der ferne aus zu bedienen, stellt die sichere SSH-Verbindung dar. Darüberhinaus bietet die SSH-Verbindung das Board im Headless-Modus zu betreiben. Im folgenden wird die Verbindung für verschiedene Betriebssysteme erläutert.&amp;#xd;
&amp;#xd;
== Windows ==&amp;#xd;
&amp;#xd;
Unter Windows bietet sich das Software-Tool PuTTY an. Der leichte Umgang mit PuTTY ermöglicht einen schnellen Einstieg in die Remote-Verbindung zum Nano Board. Nach Installation der Software, muss lediglich die IP-Adresse des Nano Boards eingegeben werden. Da die Nano Boards jeweils einen eigenen Namen haben, kann statt der IP-Adresse der Name des Boards eingetragen werden. Öffnet man nun die Verbindung zum Board, öffnet sich ein CMD-Fenster und fragt nach den Login-Daten. Nach erfolgreicher Eingabe ist man mit dem System des Boards verbunden und kann auf übliche Weise mit dem Terminal arbeiten. &amp;#xd;
&amp;#xd;
{{putFootnotes/}}&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


19.1
log
@@
text
@d13 3
a15 3
  &lt;date>1565176657000&lt;/date>
  &lt;contentUpdateDate>1565176657000&lt;/contentUpdateDate>
  &lt;version>19.1&lt;/version>
a22 4
{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
@


18.1
log
@@
text
@d13 3
a15 3
  &lt;date>1565091155000&lt;/date>
  &lt;contentUpdateDate>1565091155000&lt;/contentUpdateDate>
  &lt;version>18.1&lt;/version>
d21 25
a45 21
  &lt;content>= Nvidia Jetson Nano =

{{toc/}}

== Installation ==

Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:

1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, als auch Maus und Tastatur angeschlossen.
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Um die Spannungsversorgung  über den Rundstecker nutzen zu können muss der Jumper auf **J48 **gesetzt sein. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**
1. Der Standardlogin ist: user: **student**, password:** litpassword**

(% style="text-align:center" %)
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]

In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]]. Es wird selbstverständlich eine aktive Internetverbindung benötigt.{{/footnote}}. Die folgenden Zeilen müssen per Copy-Paste mit einem beliebigen Editor eingefügt und anschließen mit  {{code language="bash"}}chmod +x{{/code}} ausführbar gemacht werden:

{{code language="bash"}}
d55 6
a60 6
fi
{{/code}}

Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:

{{code}}
d66 41
a106 41

{{/code}}

Nach einen Reboot ist der SWAP-Space für das System verfügbar.

{{warning}}
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.
{{/warning}}

Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:

{{code language="bash"}}
sudo nvpmodel -m 0
{{/code}}

Welcher Modus gerade aktiv ist kann mit 

{{code}}
sudo nvpmodel -q
{{/code}}

überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:

{{code}}
sudo jetson_clocks --show
{{/code}}

== OpenCV 4.1.0 installieren ==

{{error}}
Aktuell gibt es noch keine einfache Lösung, um **OpenCV 4.0.1 mit ROS** zu verwenden. Eine praktikable Lösung folgt in Kürze. (08/2019)
{{/error}}


Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. 

=== Neukompilieren und installieren ===

Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich von Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:

{{code}}
d109 10
a118 10
$ ./install_opencv_4.1.0.sh 
{{/code}}

Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.

=== Installieren ohne neukompilieren (Pre-Build) ===

Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz{{footnote}}Datei kann von Labormitarbeiter übergeben werden. Dia Datei liegt auf dem Server // SoftwarePool//.{{/footnote}} //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //[[install_opencv_4.1.0.sh>>attach:install_prebuild_opencv4.1.0.sh]] //folgendermaßen aufzurufen:

{{code}}
d120 24
a143 24
. ./install_opencv_4.1.0.sh
{{/code}}

Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!

Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:

{{code language="bash"}}
sudo gedit /etc/ld.so.conf.d/opencv.conf
{{/code}}

Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:

{{code language="bash"}}
sudo ldconfig -v
{{/code}}

== Demo-Programm ==

=== Demo-Programm kompilieren und ausführen ===

Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:

{{code language="bash"}}
d145 19
a163 19

{{/code}}

Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.

Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:

* Welcome to OpenCV 4.1.0
* Number of GPUs: 1
* GPU Time: xxx
* CPU Time: xxx

=== Erläuterung des Demo-Programms ===

Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.

Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:

{{code language="C++"}}
d165 6
a170 6
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;
{{/code}}

Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:

{{code language="C++"}}
d172 14
a185 14
cv::cuda::GpuMat Gsrc, Gdst;
{{/code}}

Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.

Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:

{{code language="C++"}}
Gsrc.upload(Gframe_split[2]);
{{/code}}

Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):

{{code language="C++"}}
d187 16
a202 16

{{/code}}

Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.

== ROS installieren ==

Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:

{{code language="bash"}}
$ sudo apt-get install libtinyxml2-dev
{{/code}}

Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:

{{code language="bash"}}
d204 6
a209 6
$ wstool init -j2 src kinetic-ros_comm.rosinstall
{{/code}}

Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:

{{code language="bash"}}
d212 25
a236 25
git clone https://github.com/ros/rospack.git
{{/code}}

Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:

{{code}}
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y
{{/code}}

Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.

Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:

{{code language="bash"}}
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc
{{/code}}

= Remote-Verwendung des Nanos =

Eine der einfachsten Methoden das Jetson Nano Board von der ferne aus zu bedienen, stellt die sichere SSH-Verbindung dar. Darüberhinaus bietet die SSH-Verbindung das Board im Headless-Modus zu betreiben. Im folgenden wird die Verbindung für verschiedene Betriebssysteme erläutert.

== Windows ==

Unter Windows bietet sich das Software-Tool PuTTY an. Der leichte Umgang mit PuTTY ermöglicht einen schnellen Einstieg in die Remote-Verbindung zum Nano Board. Nach Installation der Software, muss lediglich die IP-Adresse des Nano Boards eingegeben werden. Da die Nano Boards jeweils einen eigenen Namen haben, kann statt der IP-Adresse der Name des Boards eingetragen werden. Öffnet man nun die Verbindung zum Board, öffnet sich ein CMD-Fenster und fragt nach den Login-Daten. Nach erfolgreicher Eingabe ist man mit dem System des Boards verbunden und kann auf übliche Weise mit dem Terminal arbeiten. 

@


17.1
log
@@
text
@d13 3
a15 3
  &lt;date>1565017035000&lt;/date>
  &lt;contentUpdateDate>1565017035000&lt;/contentUpdateDate>
  &lt;version>17.1&lt;/version>
d21 21
a41 21
  &lt;content>= Nvidia Jetson Nano =&amp;#xd;
&amp;#xd;
{{toc/}}&amp;#xd;
&amp;#xd;
== Installation ==&amp;#xd;
&amp;#xd;
Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:&amp;#xd;
&amp;#xd;
1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.&amp;#xd;
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.&amp;#xd;
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, als auch Maus und Tastatur angeschlossen.&amp;#xd;
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Um die Spannungsversorgung  über den Rundstecker nutzen zu können muss der Jumper auf **J48 **gesetzt sein. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.&amp;#xd;
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**&amp;#xd;
1. Der Standardlogin ist: user: **student**, password:** litpassword**&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]&amp;#xd;
&amp;#xd;
In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]]. Es wird selbstverständlich eine aktive Internetverbindung benötigt.{{/footnote}}. Die folgenden Zeilen müssen per Copy-Paste mit einem beliebigen Editor eingefügt und anschließen mit  {{code language="bash"}}chmod +x{{/code}} ausführbar gemacht werden:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
d51 6
a56 6
fi&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
d62 41
a102 41
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nach einen Reboot ist der SWAP-Space für das System verfügbar.&amp;#xd;
&amp;#xd;
{{warning}}&amp;#xd;
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.&amp;#xd;
{{/warning}}&amp;#xd;
&amp;#xd;
Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo nvpmodel -m 0&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Welcher Modus gerade aktiv ist kann mit &amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo nvpmodel -q&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo jetson_clocks --show&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== OpenCV 4.1.0 installieren ==&amp;#xd;
&amp;#xd;
{{error}}&amp;#xd;
Aktuell gibt es noch keine einfache Lösung, um **OpenCV 4.0.1 mit ROS** zu verwenden. Eine praktikable Lösung folgt in Kürze. (08/2019)&amp;#xd;
{{/error}}&amp;#xd;
&amp;#xd;
&amp;#xd;
Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. &amp;#xd;
&amp;#xd;
=== Neukompilieren und installieren ===&amp;#xd;
&amp;#xd;
Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich von Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
d105 10
a114 10
$ ./install_opencv_4.1.0.sh &amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.&amp;#xd;
&amp;#xd;
=== Installieren ohne neukompilieren (Pre-Build) ===&amp;#xd;
&amp;#xd;
Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz{{footnote}}Datei kann von Labormitarbeiter übergeben werden. Dia Datei liegt auf dem Server // SoftwarePool//.{{/footnote}} //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //[[install_opencv_4.1.0.sh>>attach:install_prebuild_opencv4.1.0.sh]] //folgendermaßen aufzurufen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
d116 24
a139 24
. ./install_opencv_4.1.0.sh&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!&amp;#xd;
&amp;#xd;
Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo gedit /etc/ld.so.conf.d/opencv.conf&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo ldconfig -v&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== Demo-Programm ==&amp;#xd;
&amp;#xd;
=== Demo-Programm kompilieren und ausführen ===&amp;#xd;
&amp;#xd;
Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
d141 19
a159 19
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.&amp;#xd;
&amp;#xd;
Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:&amp;#xd;
&amp;#xd;
* Welcome to OpenCV 4.1.0&amp;#xd;
* Number of GPUs: 1&amp;#xd;
* GPU Time: xxx&amp;#xd;
* CPU Time: xxx&amp;#xd;
&amp;#xd;
=== Erläuterung des Demo-Programms ===&amp;#xd;
&amp;#xd;
Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.&amp;#xd;
&amp;#xd;
Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
d161 6
a166 6
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
d168 14
a181 14
cv::cuda::GpuMat Gsrc, Gdst;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.&amp;#xd;
&amp;#xd;
Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
Gsrc.upload(Gframe_split[2]);&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
d183 16
a198 16
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.&amp;#xd;
&amp;#xd;
== ROS installieren ==&amp;#xd;
&amp;#xd;
Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
$ sudo apt-get install libtinyxml2-dev&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
d200 6
a205 6
$ wstool init -j2 src kinetic-ros_comm.rosinstall&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
d208 25
a232 19
git clone https://github.com/ros/rospack.git&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.&amp;#xd;
&amp;#xd;
Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
= Remote-Verwendung des Nanos =&amp;#xd;
&amp;#xd;
@


16.1
log
@@
text
@d13 3
a15 3
  &lt;date>1565016787000&lt;/date>
  &lt;contentUpdateDate>1565016787000&lt;/contentUpdateDate>
  &lt;version>16.1&lt;/version>
d74 1
a74 1
sudo nvpmodel -m 1&amp;#xd;
d112 1
a112 1
Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //[[install_opencv_4.1.0.sh>>attach:install_prebuild_opencv4.1.0.sh]] //folgendermaßen aufzurufen:&amp;#xd;
@


15.1
log
@Neuen Anhang install_prebuild_opencv4.1.0.sh hochladen
@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.MatthiasDomnik&lt;/contentAuthor>
  &lt;date>1565016767000&lt;/date>
  &lt;contentUpdateDate>1564931843000&lt;/contentUpdateDate>
  &lt;version>15.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment>Neuen Anhang install_prebuild_opencv4.1.0.sh hochladen&lt;/comment>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>= Nvidia Jetson Nano =

{{toc/}}

== Installation ==

Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:

1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, als auch Maus und Tastatur angeschlossen.
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Um die Spannungsversorgung  über den Rundstecker nutzen zu können muss der Jumper auf **J48 **gesetzt sein. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**
1. Der Standardlogin ist: user: **student**, password:** litpassword**

(% style="text-align:center" %)
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]

In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]]. Es wird selbstverständlich eine aktive Internetverbindung benötigt.{{/footnote}}. Die folgenden Zeilen müssen per Copy-Paste mit einem beliebigen Editor eingefügt und anschließen mit  {{code language="bash"}}chmod +x{{/code}} ausführbar gemacht werden:

{{code language="bash"}}
#!/bin/bash

set -e

if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then
  echo "** Add CUDA stuffs into ~/.bashrc"
  echo >> ${HOME}/.bashrc
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc
fi
{{/code}}

Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:

{{code}}
$ sudo fallocate -l 8G /mnt/8GBi.swap
$ sudo chmod 0600 /mnt/8GBi.swap 
$ sudo mkswap /mnt/8GBi.swap
$ sudo swapon /mnt/8GBi.swap
$ echo "/mnt/8GBi.swap  none  swap  sw 0  0" | sudo tee -a /etc/fstab > /dev/null 

{{/code}}

Nach einen Reboot ist der SWAP-Space für das System verfügbar.

{{warning}}
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.
{{/warning}}

Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:

{{code language="bash"}}
sudo nvpmodel -m 1
{{/code}}

Welcher Modus gerade aktiv ist kann mit 

{{code}}
sudo nvpmodel -q
{{/code}}

überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:

{{code}}
sudo jetson_clocks --show
{{/code}}

== OpenCV 4.1.0 installieren ==

{{error}}
Aktuell gibt es noch keine einfache Lösung, um **OpenCV 4.0.1 mit ROS** zu verwenden. Eine praktikable Lösung folgt in Kürze. (08/2019)
{{/error}}


Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. 

=== Neukompilieren und installieren ===

Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich von Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:

{{code}}
$ cd $HOME # Make sure we are in the correct folder
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable
$ ./install_opencv_4.1.0.sh 
{{/code}}

Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.

=== Installieren ohne neukompilieren (Pre-Build) ===

Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //install_opencv_4.1.0.sh //folgendermaßen aufzurufen:

{{code}}
sudo chmod +x install_opencv_4.1.0.sh
. ./install_opencv_4.1.0.sh
{{/code}}

Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!

Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:

{{code language="bash"}}
sudo gedit /etc/ld.so.conf.d/opencv.conf
{{/code}}

Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:

{{code language="bash"}}
sudo ldconfig -v
{{/code}}

== Demo-Programm ==

=== Demo-Programm kompilieren und ausführen ===

Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:

{{code language="bash"}}
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example

{{/code}}

Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.

Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:

* Welcome to OpenCV 4.1.0
* Number of GPUs: 1
* GPU Time: xxx
* CPU Time: xxx

=== Erläuterung des Demo-Programms ===

Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.

Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:

{{code language="C++"}}
int num_gpu = cv::cuda::getCudaEnabledDeviceCount();
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;
{{/code}}

Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:

{{code language="C++"}}
cv::Mat frame, Gframe, Gbuff_, Cframe;
cv::cuda::GpuMat Gsrc, Gdst;
{{/code}}

Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.

Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:

{{code language="C++"}}
Gsrc.upload(Gframe_split[2]);
{{/code}}

Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):

{{code language="C++"}}
Gdst.download(Gbuff_);

{{/code}}

Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.

== ROS installieren ==

Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:

{{code language="bash"}}
$ sudo apt-get install libtinyxml2-dev
{{/code}}

Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:

{{code language="bash"}}
$ rosinstall_generator ros_comm --rosdistro kinetic --deps --tar > kinetic-ros_comm.rosinstall
$ wstool init -j2 src kinetic-ros_comm.rosinstall
{{/code}}

Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:

{{code language="bash"}}
cd ~/ros_catkin_ws/src
rm -r rospack
git clone https://github.com/ros/rospack.git
{{/code}}

Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:

{{code}}
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y
{{/code}}

Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.

Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:

{{code language="bash"}}
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc
{{/code}}

= Remote-Verwendung des Nanos =

{{putFootnotes/}}&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
    &lt;author>XWiki.makau005&lt;/author>
    &lt;date>1565016767000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1444&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


14.1
log
@Neuen Anhang install_prebuild_opencv4.1.0.sh hochladen
@
text
@d13 1
a13 1
  &lt;date>1565016715000&lt;/date>
d15 1
a15 1
  &lt;version>14.1&lt;/version>
d249 2
a250 2
    &lt;date>1565016715000&lt;/date>
    &lt;version>1.1&lt;/version>
@


13.3
log
@Disclaimer OpenCV 4 mit ROS
@
text
@d11 1
a11 1
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
d13 1
a13 1
  &lt;date>1564931843000&lt;/date>
d15 1
a15 1
  &lt;version>13.3&lt;/version>
d17 2
a18 2
  &lt;comment>Disclaimer OpenCV 4 mit ROS&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
d246 8
@


13.2
log
@Verschiedene Ergänzungen
@
text
@d13 3
a15 3
  &lt;date>1564758610000&lt;/date>
  &lt;contentUpdateDate>1564758610000&lt;/contentUpdateDate>
  &lt;version>13.2&lt;/version>
d17 1
a17 1
  &lt;comment>Verschiedene Ergänzungen&lt;/comment>
d91 5
@


13.1
log
@@
text
@d11 5
a15 5
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1564757057000&lt;/date>
  &lt;contentUpdateDate>1564757057000&lt;/contentUpdateDate>
  &lt;version>13.1&lt;/version>
d17 2
a18 2
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
d39 1
a39 1
In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]].{{/footnote}}:
@


12.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1564757015000&lt;/date>
  &lt;contentUpdateDate>1564757015000&lt;/contentUpdateDate>
  &lt;version>12.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>= Nvidia Jetson Nano =

{{toc/}}

== Installation ==

Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:

1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, als auch Maus und Tastatur angeschlossen.
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Um die Spannungsversorgung  über den Rundstecker nutzen zu können muss der Jumper auf **J48 **gesetzt sein. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**
1. Der Standardlogin ist: user: **student**, password:** litpassword**

(% style="text-align:center" %)
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]

In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]].{{/footnote}}:

{{code language="bash"}}
#!/bin/bash

set -e

if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then
  echo "** Add CUDA stuffs into ~/.bashrc"
  echo >> ${HOME}/.bashrc
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc
fi
{{/code}}

Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:

{{code}}
$ sudo fallocate -l 8G /mnt/8GBi.swap
$ sudo chmod 0600 /var/cache/swap/swap0 
$ sudo mkswap /mnt/8GBi.swap
$ sudo swapon /mnt/8GBi.swap
$ echo "/mnt/8GBi.swap  none  swap  sw 0  0" | sudo tee -a /etc/fstab > /dev/null 

{{/code}}

Nach einen Reboot ist der SWAP-Space für das System verfügbar.

{{warning}}
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.
{{/warning}}

Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:

{{code language="bash"}}
sudo nvpmodel -m 1
{{/code}}

Welcher Modus gerade aktiv ist kann mit 

{{code}}
sudo nvpmodel -q
{{/code}}

überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:

{{code}}
sudo jetson_clocks --show
{{/code}}

== OpenCV 4.1.0 installieren ==

Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. 

=== Neukompilieren und installieren ===

Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich von Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:

{{code}}
$ cd $HOME # Make sure we are in the correct folder
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable
$ ./install_opencv_4.1.0.sh 
{{/code}}

Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.

=== Installieren ohne neukompilieren (Pre-Build) ===

Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //install_opencv_4.1.0.sh //folgendermaßen aufzurufen:

{{code}}
sudo chmod +x install_opencv_4.1.0.sh
. ./install_opencv_4.1.0.sh
{{/code}}

Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!

Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:

{{code language="bash"}}
sudo gedit /etc/ld.so.conf.d/opencv.conf
{{/code}}

Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:

{{code language="bash"}}
sudo ldconfig -v
{{/code}}

== Demo-Programm ==

=== Demo-Programm kompilieren und ausführen ===

Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:

{{code language="bash"}}
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example

{{/code}}

Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.

Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:

* Welcome to OpenCV 4.1.0
* Number of GPUs: 1
* GPU Time: xxx
* CPU Time: xxx

=== Erläuterung des Demo-Programms ===

Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.

Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:

{{code language="C++"}}
int num_gpu = cv::cuda::getCudaEnabledDeviceCount();
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;
{{/code}}

Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:

{{code language="C++"}}
cv::Mat frame, Gframe, Gbuff_, Cframe;
cv::cuda::GpuMat Gsrc, Gdst;
{{/code}}

Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.

Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:

{{code language="C++"}}
Gsrc.upload(Gframe_split[2]);
{{/code}}

Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):

{{code language="C++"}}
Gdst.download(Gbuff_);

{{/code}}

Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.

== ROS installieren ==

Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:

{{code language="bash"}}
$ sudo apt-get install libtinyxml2-dev
{{/code}}

Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:

{{code language="bash"}}
$ rosinstall_generator ros_comm --rosdistro kinetic --deps --tar > kinetic-ros_comm.rosinstall
$ wstool init -j2 src kinetic-ros_comm.rosinstall
{{/code}}

Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:

{{code language="bash"}}
cd ~/ros_catkin_ws/src
rm -r rospack
git clone https://github.com/ros/rospack.git
{{/code}}

Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:

{{code}}
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y
{{/code}}

Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.

Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:

{{code language="bash"}}
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc
{{/code}}

= Remote-Verwendung des Nanos =

{{putFootnotes/}}&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


11.1
log
@@
text
@d11 5
a15 5
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
  &lt;contentAuthor>XWiki.MatthiasDomnik&lt;/contentAuthor>
  &lt;date>1564751931000&lt;/date>
  &lt;contentUpdateDate>1564751931000&lt;/contentUpdateDate>
  &lt;version>11.1&lt;/version>
d58 1
@


10.1
log
@@
text
@d11 5
a15 5
  &lt;author>XWiki.makau005&lt;/author>
  &lt;contentAuthor>XWiki.makau005&lt;/contentAuthor>
  &lt;date>1564739976000&lt;/date>
  &lt;contentUpdateDate>1564739976000&lt;/contentUpdateDate>
  &lt;version>10.1&lt;/version>
d21 200
a220 200
  &lt;content>= Nvidia Jetson Nano =&amp;#xd;
&amp;#xd;
{{toc/}}&amp;#xd;
&amp;#xd;
== Installation ==&amp;#xd;
&amp;#xd;
Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:&amp;#xd;
&amp;#xd;
1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.&amp;#xd;
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.&amp;#xd;
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, als auch Maus und Tastatur angeschlossen.&amp;#xd;
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.&amp;#xd;
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**&amp;#xd;
1. Der Standardlogin ist: user: **student**, password:** litpassword**&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]&amp;#xd;
&amp;#xd;
In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]].{{/footnote}}:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
#!/bin/bash&amp;#xd;
&amp;#xd;
set -e&amp;#xd;
&amp;#xd;
if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then&amp;#xd;
  echo "** Add CUDA stuffs into ~/.bashrc"&amp;#xd;
  echo >> ${HOME}/.bashrc&amp;#xd;
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc&amp;#xd;
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc&amp;#xd;
fi&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ sudo fallocate -l 8G /mnt/8GBi.swap&amp;#xd;
$ sudo mkswap /mnt/8GBi.swap&amp;#xd;
$ sudo swapon /mnt/8GBi.swap&amp;#xd;
$ echo "/mnt/8GBi.swap  none  swap  sw 0  0" | sudo tee -a /etc/fstab > /dev/null &amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nach einen Reboot ist der SWAP-Space für das System verfügbar.&amp;#xd;
&amp;#xd;
{{warning}}&amp;#xd;
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.&amp;#xd;
{{/warning}}&amp;#xd;
&amp;#xd;
Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo nvpmodel -m 1&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Welcher Modus gerade aktiv ist kann mit &amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo nvpmodel -q&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo jetson_clocks --show&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== OpenCV 4.1.0 installieren ==&amp;#xd;
&amp;#xd;
Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. &amp;#xd;
&amp;#xd;
=== Neukompilieren und installieren ===&amp;#xd;
&amp;#xd;
Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich von Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ cd $HOME # Make sure we are in the correct folder&amp;#xd;
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable&amp;#xd;
$ ./install_opencv_4.1.0.sh &amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.&amp;#xd;
&amp;#xd;
=== Installieren ohne neukompilieren (Pre-Build) ===&amp;#xd;
&amp;#xd;
Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //install_opencv_4.1.0.sh //folgendermaßen aufzurufen:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
sudo chmod +x install_opencv_4.1.0.sh&amp;#xd;
. ./install_opencv_4.1.0.sh&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!&amp;#xd;
&amp;#xd;
Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo gedit /etc/ld.so.conf.d/opencv.conf&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
sudo ldconfig -v&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
== Demo-Programm ==&amp;#xd;
&amp;#xd;
=== Demo-Programm kompilieren und ausführen ===&amp;#xd;
&amp;#xd;
Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example&amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.&amp;#xd;
&amp;#xd;
Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:&amp;#xd;
&amp;#xd;
* Welcome to OpenCV 4.1.0&amp;#xd;
* Number of GPUs: 1&amp;#xd;
* GPU Time: xxx&amp;#xd;
* CPU Time: xxx&amp;#xd;
&amp;#xd;
=== Erläuterung des Demo-Programms ===&amp;#xd;
&amp;#xd;
Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.&amp;#xd;
&amp;#xd;
Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
int num_gpu = cv::cuda::getCudaEnabledDeviceCount();&amp;#xd;
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
cv::Mat frame, Gframe, Gbuff_, Cframe;&amp;#xd;
cv::cuda::GpuMat Gsrc, Gdst;&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.&amp;#xd;
&amp;#xd;
Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
Gsrc.upload(Gframe_split[2]);&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):&amp;#xd;
&amp;#xd;
{{code language="C++"}}&amp;#xd;
Gdst.download(Gbuff_);&amp;#xd;
&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.&amp;#xd;
&amp;#xd;
== ROS installieren ==&amp;#xd;
&amp;#xd;
Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
$ sudo apt-get install libtinyxml2-dev&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
$ rosinstall_generator ros_comm --rosdistro kinetic --deps --tar > kinetic-ros_comm.rosinstall&amp;#xd;
$ wstool init -j2 src kinetic-ros_comm.rosinstall&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
cd ~/ros_catkin_ws/src&amp;#xd;
rm -r rospack&amp;#xd;
git clone https://github.com/ros/rospack.git&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:&amp;#xd;
&amp;#xd;
{{code}}&amp;#xd;
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.&amp;#xd;
&amp;#xd;
Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:&amp;#xd;
&amp;#xd;
{{code language="bash"}}&amp;#xd;
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc&amp;#xd;
{{/code}}&amp;#xd;
&amp;#xd;
= Remote-Verwendung des Nanos =&amp;#xd;
&amp;#xd;
@


9.1
log
@@
text
@d13 3
a15 3
  &lt;date>1564733844000&lt;/date>
  &lt;contentUpdateDate>1564733844000&lt;/contentUpdateDate>
  &lt;version>9.1&lt;/version>
d21 200
a220 202
  &lt;content>= Nvidia Jetson Nano =

{{toc/}}

== Installation ==

Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:

1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, also auch Maus und Tastatur angeschlossen.
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Für das entsprechende 5V-Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**
1. Der Standardlogin ist: user: **student**, password:** litpassword**

(% style="text-align:center" %)
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]

In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]].{{/footnote}}:

{{code language="bash"}}
#!/bin/bash

set -e

if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then
  echo "** Add CUDA stuffs into ~/.bashrc"
  echo >> ${HOME}/.bashrc
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc
fi
{{/code}}

Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:

{{code}}
$ sudo fallocate -l 8G /mnt/8GBi.swap
$ sudo mkswap /mnt/8GBi.swap
$ sudo swapon /mnt/8GBi.swap
$ echo "/mnt/8GBi.swap  none  swap  sw 0  0" | sudo tee -a /etc/fstab > /dev/null 

{{/code}}

Nach einen Reboot ist der SWAP-Space für das System verfügbar.

{{warning}}
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.
{{/warning}}

Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:

{{code language="bash"}}
sudo nvpmodel -m 1
{{/code}}

Welcher Modus gerade aktiv ist kann mit 

{{code}}
sudo nvpmodel -q
{{/code}}

überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:

{{code}}
sudo jetson_clocks --show
{{/code}}

{{putFootnotes/}}

== OpenCV 4.1.0 installieren ==

Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. 

=== Neukompilieren und installieren ===

Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich bin Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:

{{code}}
$ cd $HOME # Make sure we are in the correct folder
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable
$ ./install_opencv_4.1.0.sh 
{{/code}}

Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.

=== Installieren ohne neukompilieren (Pre-Build) ===

Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //install_opencv_4.1.0.sh //folgendermaßen aufzurufen:

{{code}}
sudo chmod +x install_opencv_4.1.0.sh
. ./install_opencv_4.1.0.sh
{{/code}}

Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!

Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:

{{code language="bash"}}
sudo gedit /etc/ld.so.conf.d/opencv.conf
{{/code}}

Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:

{{code language="bash"}}
sudo ldconfig -v
{{/code}}

== Demo-Programm ==

=== Demo-Programm kompilieren und ausführen ===

Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:

{{code language="bash"}}
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example

{{/code}}

Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.

Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:

* Welcome to OpenCV 4.1.0
* Number of GPUs: 1
* GPU Time: xxx
* CPU Time: xxx

=== Erläuterung des Demo-Programms ===

Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.

Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:

{{code language="C++"}}
int num_gpu = cv::cuda::getCudaEnabledDeviceCount();
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;
{{/code}}

Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:

{{code language="C++"}}
cv::Mat frame, Gframe, Gbuff_, Cframe;
cv::cuda::GpuMat Gsrc, Gdst;
{{/code}}

Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.

Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:

{{code language="C++"}}
Gsrc.upload(Gframe_split[2]);
{{/code}}

Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):

{{code language="C++"}}
Gdst.download(Gbuff_);

{{/code}}

Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.

== ROS installieren ==

Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss. Zunächst ist ein Paket mit Hilfe der Ubuntu-Paketverwaltung nachzuinstallieren:

{{code language="bash"}}
$ sudo apt-get install libtinyxml2-dev
{{/code}}

Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:

{{code language="bash"}}
$ rosinstall_generator ros_comm --rosdistro kinetic --deps --tar > kinetic-ros_comm.rosinstall
$ wstool init -j2 src kinetic-ros_comm.rosinstall
{{/code}}

Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:

{{code language="bash"}}
cd ~/ros_catkin_ws/src
rm -r rospack
git clone https://github.com/ros/rospack.git
{{/code}}

Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:

{{code}}
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y
{{/code}}

Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.

Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:

{{code language="bash"}}
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc
{{/code}}

= Remote-Verwendung des Nanos =

@


8.2
log
@ROS Installation korigiert
@
text
@d11 5
a15 5
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
  &lt;contentAuthor>XWiki.MatthiasDomnik&lt;/contentAuthor>
  &lt;date>1564662121000&lt;/date>
  &lt;contentUpdateDate>1564662121000&lt;/contentUpdateDate>
  &lt;version>8.2&lt;/version>
d17 2
a18 2
  &lt;comment>ROS Installation korigiert&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
d32 1
a32 1
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Für das entsprechende Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.
d88 1
@


8.1
log
@ROS Installation
@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
  &lt;contentAuthor>XWiki.MatthiasDomnik&lt;/contentAuthor>
  &lt;date>1564661831000&lt;/date>
  &lt;contentUpdateDate>1564661831000&lt;/contentUpdateDate>
  &lt;version>8.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment>ROS Installation&lt;/comment>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>= Nvidia Jetson Nano =

{{toc/}}

== Installation ==

Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:

1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, also auch Maus und Tastatur angeschlossen.
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Für das entsprechende Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**
1. Der Standardlogin ist: user: **student**, password:** litpassword**

(% style="text-align:center" %)
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]

In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]].{{/footnote}}:

{{code language="bash"}}
#!/bin/bash

set -e

if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then
  echo "** Add CUDA stuffs into ~/.bashrc"
  echo >> ${HOME}/.bashrc
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc
fi
{{/code}}

Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:

{{code}}
$ sudo fallocate -l 8G /mnt/8GBi.swap
$ sudo mkswap /mnt/8GBi.swap
$ sudo swapon /mnt/8GBi.swap
$ echo "/mnt/8GBi.swap  none  swap  sw 0  0" | sudo tee -a /etc/fstab > /dev/null 

{{/code}}

Nach einen Reboot ist der SWAP-Space für das System verfügbar.

{{warning}}
Ohne die Erweiterung des SWAP-Spaces ist das Scheitern speicherintensiver Prozesse, wie bspw. das Bauen von OpenCV, wahrscheinlich.
{{/warning}}

Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:

{{code language="bash"}}
sudo nvpmodel -m 1
{{/code}}

Welcher Modus gerade aktiv ist kann mit 

{{code}}
sudo nvpmodel -q
{{/code}}

überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:

{{code}}
sudo jetson_clocks --show
{{/code}}


== OpenCV 4.1.0 installieren ==

Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. Allerdings benötigt das Kompilieren der OpenCV-Bibliothek ca. 1-2 Stunden. Sofern keine Bauoptionen verändert werden müssen, ist die Installation einer bereits kompilierten Bibliothek vorzuziehen. 

=== Neukompilieren und installieren ===

Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich bin Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, dass das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:

{{code}}
$ cd $HOME # Make sure we are in the correct folder
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable
$ ./install_opencv_4.1.0.sh 
{{/code}}

Die Bauoptionen können im Bash-Skript mittels eines beliebigen Editors angepasst werden.

=== Installieren ohne neukompilieren (Pre-Build) ===

Eine bereits fertig kompilierte OpenCV Version 4.1.0 ist im Labor verfügbar. Die verwendeten Bauoptionen entsprechenden denen im [[obigen Bash-Skript>>attach:install_opencv_4.1.0.sh]]. Zur Installation ist das Archiv //opencv-4.1.0.tar.gz //in den Ordner ///home/student// zu kopieren und dort das Bash-Skript //install_opencv_4.1.0.sh //folgendermaßen aufzurufen:

{{code}}
sudo chmod +x install_opencv_4.1.0.sh
. ./install_opencv_4.1.0.sh
{{/code}}

Der vorangestellte Punkt in Zeile zwei ist unbedingt zu beachten!

Nach der erfolgreichen Installation ist der Pfad zu den OpenCV-libs noch im System bekannt zu mache. Dazu wird folgende Konfigurationsdatei erzeugt:

{{code language="bash"}}
sudo gedit /etc/ld.so.conf.d/opencv.conf
{{/code}}

Anschließend wird der Pfad zu den OpenCV-libs eingefügt (///usr/local/lib//) und die Konfigurationsdatei geladen:

{{code language="bash"}}
sudo ldconfig -v
{{/code}}

== Demo-Programm ==

=== Demo-Programm kompilieren und ausführen ===

Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:

{{code language="bash"}}
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example

{{/code}}

Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.

Wird das Programm erfolgreich ausgeführt, so sollten folgende Konsolenausgaben zu sehen sein:

* Welcome to OpenCV 4.1.0
* Number of GPUs: 1
* GPU Time: xxx
* CPU Time: xxx

=== Erläuterung des Demo-Programms ===

Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Für weitere Erläuterungen sei auf die Kommentierung im Quelltext verwiesen.

Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:

{{code language="C++"}}
int num_gpu = cv::cuda::getCudaEnabledDeviceCount();
std::cout &amp;lt;&amp;lt; "Number of GPUs: " &amp;lt;&amp;lt; num_gpu &amp;lt;&amp;lt; std::endl;
{{/code}}

Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet:

{{code language="C++"}}
cv::Mat frame, Gframe, Gbuff_, Cframe;
cv::cuda::GpuMat Gsrc, Gdst;
{{/code}}

Die obere Zeile zeigt die Deklaration der OpenCV-Matrizen für die Verwendung auf CPU-Kernen und darunter wird der Datentyp für Matrizen zur Verwendung auf GPU-Kernen dargestellt.

Um Funktionen auf der GPU ausführen zu können ist neben dem oben beschriebenen Datentyp ein //Upload //notwendig. Dadurch werden die Daten in den Speicherbereich der GPU kopiert:

{{code language="C++"}}
Gsrc.upload(Gframe_split[2]);
{{/code}}

Nachdem alle Operationen auf der GPU ausgeführt wurden müssen die Daten wieder aus dem Speicherbereich der GPU kopiert werden (//Download//):

{{code language="C++"}}
Gdst.download(Gbuff_);

{{/code}}

Bei der Ausführung des Demo-Programms ist möglichweise bereits aufgefallen, dass die Laufzeit des GPU-Prozesses nur geringfügig schneller oder mitunter auch langsamer ist als auf der CPU. Als Ursache dafür sind der Overhead bei Operationen auf der GPU und der geringere Vorteil der massiven Parallelisierung bei kleineren Datensätzen zu nennen.

== ROS installieren ==

Das Robot-Operating-System bietet für eine Vielzahl von Plattformen Pre-Builds an. Alleridings ist für Ubuntu 18.04 LTS nur ROS-Distribution //Melodic Morenia// als LTS-Version verfügbar. Da auf dem MoRoP derzeit (Stand 07/2019) //Kinetic Kame// installiert ist, wird dies auch auf den Nanos installiert. Für eine Vielzahl der notwenigen Schritte gibt es [[hier>>http://wiki.ros.org/Installation/Source]] eine detaillierte Anleitung. Im folgenden werden ausschließlich jene Schritte erläutert, in denen die Distribution angepasst werden muss.

Es ist zu empfehlen die Installation auf die ROS-comm Version zu beschränken, da zum einen GUI-Tools auf dem Nano, wie auf allen eingebetteten System, nicht benötit werden und zum anderen der benötigte Speicherbedarf dadurch geringer ausfällt. In der verlinkten Anleitung wird die Installation für //Melodic Morenia// beschrieben, sodass Änderungen notwendig sind:

{{code language="bash"}}
$ rosinstall_generator ros_comm --rosdistro kinetic --deps --tar > kinetic-ros_comm.rosinstall
$ wstool init -j2 src kinetic-ros_comm.rosinstall
{{/code}}

Bevor mit dem eigentlich Bauvorgang begonnen werden kann, ist das Package //ROS-Pack// in dem ROS-Workspace (//~~/ros_catkin_ws//) auszutauschen, da es sonst aller Wahrscheinlichkeit nach zu einem Fehler kommen wird. Durch folgende Befehle erfolgt der Austausch:

{{code language="bash"}}
cd ~/ros_catkin_ws/src
rm -r rospack
git clone https://github.com/ros/rospack.git
{{/code}}

Anschließend werden alle notwendigen Abhängigkeiten aufgelöst, wobei hier auch wieder die Änderung der Distribution zu beachten ist:

{{code}}
$ rosdep install --from-paths src --ignore-src --rosdistro kinetic -y
{{/code}}

Die folgenden Schritte sind für alle Distributionen identisch, sodass diese nach der obigen Anleitung erfolgen können.

Als abschließenden Schritt (nachdem der Bauprozess vollständig abgeschlossen wurde) wird der Source-Eintrag in der .bashrc persistent gemacht:

{{code language="bash"}}
echo "source ~/ros_catkin_ws/install_isolated/setup.bash" >> ~/.bashrc
{{/code}}

{{putFootnotes/}}&lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
        &lt;value>Vision&lt;/value>
        &lt;value>KI&lt;/value>
        &lt;value>Ai&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


7.2
log
@Erläuterungen Demo-Programm
@
text
@d13 3
a15 3
  &lt;date>1564656666000&lt;/date>
  &lt;contentUpdateDate>1564656666000&lt;/contentUpdateDate>
  &lt;version>7.2&lt;/version>
d17 2
a18 2
  &lt;comment>Erläuterungen Demo-Programm&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
d185 1
d187 29
@


7.1
log
@Installation und Beispielprogramm erweitert
@
text
@d13 3
a15 3
  &lt;date>1564586849000&lt;/date>
  &lt;contentUpdateDate>1564586849000&lt;/contentUpdateDate>
  &lt;version>7.1&lt;/version>
d17 2
a18 2
  &lt;comment>Installation und Beispielprogramm erweitert&lt;/comment>
  &lt;minorEdit>false&lt;/minorEdit>
d60 1
a60 1
$ sudo echo "/mnt/8GBi.swap  none  swap  sw 0  0" >> | sudo tee -a /etc/fstab > /dev/null 
d66 4
d95 1
a95 1
Wenn bestimmte Optionen für den Bauprozess neu gesetzt oder verändert werden müssen ist ein Neukompilieren unumgänglich. Ein entsprechendes Bash-Skript, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich bin Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}, kann [[hier>>attach:install_opencv_4.1.0.sh]] heruntergeladen werden. Unter der Annahme, das heruntergeladene Skript sich im Homefolder befindet, sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:
d105 1
a105 1
=== Installieren ohne neukompilieren ===
d128 1
a128 1
=== Demo-Programm ausführen ===
d130 2
d148 1
a148 1
Im folgenden werden einige Stellen des Quellcodes etwas näher beleuchtet. Die Funktion {{code language="c++"}}cv::cuda::getCudaEnabledDeviceCount(){{/code}} gibt die Anzahl der vorhanden bzw. erkannten GPUs zurück, was als Sanity-Check verwendet werden kann:
d150 4
d159 1
a159 1
Die Verarbeitung der Bilder auf der GPU erfordert einen anderen Datentyp als jenen der standardmäßig in OpenCV verwendet wird. Für Berechnungen auf der CPU wird für Bilder in der Regel der Datentyp {{code language="C++"}}cv::Mat{{/code}} verwendet.
d161 4
d166 1
a166 1
{{putFootnotes/}}
d168 15
d186 1
a186 3
{{putFootnotes/}}

 &lt;/content>
@


6.4
log
@Installation OpenCV: Neukompilieren und installieren getrennt
@
text
@d13 3
a15 3
  &lt;date>1564244849000&lt;/date>
  &lt;contentUpdateDate>1564244849000&lt;/contentUpdateDate>
  &lt;version>6.4&lt;/version>
d17 2
a18 2
  &lt;comment>Installation OpenCV: Neukompilieren und installieren getrennt&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
d112 12
d135 19
@


6.3
log
@Tag [Vision, KI, Ai] hinzugefügt
@
text
@d13 3
a15 3
  &lt;date>1563824071000&lt;/date>
  &lt;contentUpdateDate>1563823724000&lt;/contentUpdateDate>
  &lt;version>6.3&lt;/version>
d17 1
a17 1
  &lt;comment>Tag [Vision, KI, Ai] hinzugefügt&lt;/comment>
d85 1
a85 1
== OpenCV 4.x.x installieren ==
d87 1
a87 1
Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. [[Hier>>attach:install_opencv_4.1.0.sh]] kann ein Bash-Skript heruntergeladen werden, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich bin Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}. Unter der Annahme, das heruntergeladene Skript befindet sich im Homefolder sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:
d89 4
d99 13
@


6.2
log
@Tag [Nvidia, embedded, GPU, OpenCV] hinzugefügt
@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
  &lt;contentAuthor>XWiki.MatthiasDomnik&lt;/contentAuthor>
  &lt;date>1563824047000&lt;/date>
  &lt;contentUpdateDate>1563823724000&lt;/contentUpdateDate>
  &lt;version>6.2&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment>Tag [Nvidia, embedded, GPU, OpenCV] hinzugefügt&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>= Nvidia Jetson Nano =

{{toc/}}

== Installation ==

Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:

1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, also auch Maus und Tastatur angeschlossen.
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Für das entsprechende Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer nur auf den Nano ohne weitere Peripherie!{{/footnote}}.
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**
1. Der Standardlogin ist: user: **student**, password:** litpassword**

(% style="text-align:center" %)
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]

In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]].{{/footnote}}:

{{code language="bash"}}
#!/bin/bash

set -e

if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then
  echo "** Add CUDA stuffs into ~/.bashrc"
  echo >> ${HOME}/.bashrc
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc
fi
{{/code}}

Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:

{{code}}
$ sudo fallocate -l 8G /mnt/8GBi.swap
$ sudo mkswap /mnt/8GBi.swap
$ sudo swapon /mnt/8GBi.swap
$ sudo echo "/mnt/8GBi.swap  none  swap  sw 0  0" >> | sudo tee -a /etc/fstab > /dev/null 

{{/code}}

Nach einen Reboot ist der SWAP-Space für das System verfügbar.

Zum Abschluss der Installation noch ein paar Worte zu den //Jetson Clocks//, welche in verschiedenen Beschreibungen immer wieder erwähnt werden. Dabei handelt es sich lediglich um eine Bezeichnung für die vier ARM-Kerne und die GPU auf dem Nano. Es stehen zwei verschiedene Modi zur Verfügung, der 5 W- und der 10 W-Modus. Wird eine entsprechend leistungsfähiges Netzteil (siehe oben) verwendet kann der Nano für die maximale Leistung (=10 W) konfiguriert werden. Dazu ist folgender Befehl auszuführen:

{{code language="bash"}}
sudo nvpmodel -m 1
{{/code}}

Welcher Modus gerade aktiv ist kann mit 

{{code}}
sudo nvpmodel -q
{{/code}}

überprüft werden. Eine etwas detaillierte Ausgabe, mit beispielsweise der Auflistung der aktiven CPU-Kerne und den max. Frequenzen, wird durch folgenden Befehl erreicht:

{{code}}
sudo jetson_clocks --show
{{/code}}


== OpenCV 4.x.x installieren ==

Das aktuelle Image (Stand 07/19) wird mit OpenCV 3.3.1 (Release 10/2017) ausgeliefert. Um alle aktuellen Funktionen, Bug Fixes und Optimierungen verwenden zu können wird diese Version entfernt und OpenCV 4.1.0 (Release 04/2019) installiert. [[Hier>>attach:install_opencv_4.1.0.sh]] kann ein Bash-Skript heruntergeladen werden, welches alle notwendigen Konfigurationen übernimmt {{footnote}}Dieses Skript stammt ursprünglich bin Nvidia, wurde allerdings auf die aktuelle Release-Version von OpenCV angepasst.{{/footnote}}. Unter der Annahme, das heruntergeladene Skript befindet sich im Homefolder sind folgende Befehle im Terminal auszuführen{{footnote}}Hier kommt es gerne mal zu Fehlern. Mitunter hat sich ein CR aus Windows eingeschlichen. Diese müssen entfernt werden!{{/footnote}}:

{{code}}
$ cd $HOME # Make sure we are in the correct folder
$ sudo chmod +x install_opencv_4.1.0.sh # Set the rights that the script is executable
$ ./install_opencv_4.1.0.sh 
{{/code}}

=== Demo-Programm ausführen ===

Mit dem folgenden [[Demo-Programm>>attach:example.cpp]] lässt sich die Installation der Bibliothek überprüfen und gleichzeigt einen ersten Eindruck von der Verwendung von CUDA in OpenCV gewinnen (Erläuterungen folgen weiter unten). Nach dem Herunterladen des Programms kann das Bauen erfolgen:

{{code language="bash"}}
g++ example.cpp -L/usr/locale/lib  -I/usr/local/include/opencv4 -lopencv_core -lopencv_highgui -lopencv_videoio -lopencv_cudaimgproc -lopencv_imgproc -o example

{{/code}}

Standardmäßig ist die Anzeige der Bilder auskommentiert, da der Nano häufig //headless// ohne graphische Oberfläche betrieben wird.

== ROS installieren ==


{{putFootnotes/}}

 &lt;/content>
  &lt;attachment>
    &lt;filename>example.cpp&lt;/filename>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563822438000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>2271&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
    &lt;mimetype>application/x-sh&lt;/mimetype>
    &lt;charset>UTF-8&lt;/charset>
    &lt;author>XWiki.MatthiasDomnik&lt;/author>
    &lt;date>1563819472000&lt;/date>
    &lt;version>1.2&lt;/version>
    &lt;comment/>
    &lt;filesize>1965&lt;/filesize>
  &lt;/attachment>
  &lt;object>
    &lt;name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome&lt;/name>
    &lt;number>0&lt;/number>
    &lt;className>XWiki.TagClass&lt;/className>
    &lt;guid>928804d3-e540-4ac0-b369-048ace2c9da6&lt;/guid>
    &lt;class>
      &lt;name>XWiki.TagClass&lt;/name>
      &lt;customClass/>
      &lt;customMapping/>
      &lt;defaultViewSheet/>
      &lt;defaultEditSheet/>
      &lt;defaultWeb/>
      &lt;nameField/>
      &lt;validationScript/>
      &lt;tags>
        &lt;cache>0&lt;/cache>
        &lt;disabled>0&lt;/disabled>
        &lt;displayType>input&lt;/displayType>
        &lt;multiSelect>1&lt;/multiSelect>
        &lt;name>tags&lt;/name>
        &lt;number>1&lt;/number>
        &lt;prettyName>Tags&lt;/prettyName>
        &lt;relationalStorage>1&lt;/relationalStorage>
        &lt;separator>|&lt;/separator>
        &lt;separators>|,&lt;/separators>
        &lt;size>30&lt;/size>
        &lt;unmodifiable>0&lt;/unmodifiable>
        &lt;values/>
        &lt;classType>com.xpn.xwiki.objects.classes.StaticListClass&lt;/classType>
      &lt;/tags>
    &lt;/class>
    &lt;property>
      &lt;tags>
        &lt;value>Nvidia&lt;/value>
        &lt;value>embedded&lt;/value>
        &lt;value>GPU&lt;/value>
        &lt;value>OpenCV&lt;/value>
      &lt;/tags>
    &lt;/property>
  &lt;/object>
&lt;/xwikidoc>@


6.1
log
@Installation OpenCV
@
text
@d13 1
a13 1
  &lt;date>1563823724000&lt;/date>
d15 1
a15 1
  &lt;version>6.1&lt;/version>
d17 2
a18 2
  &lt;comment>Installation OpenCV&lt;/comment>
  &lt;minorEdit>false&lt;/minorEdit>
d130 40
@


5.1
log
@Neuen Anhang example.cpp hochladen
@
text
@d13 3
a15 3
  &lt;date>1563822438000&lt;/date>
  &lt;contentUpdateDate>1563813493000&lt;/contentUpdateDate>
  &lt;version>5.1&lt;/version>
d17 1
a17 1
  &lt;comment>Neuen Anhang example.cpp hochladen&lt;/comment>
d23 2
d32 1
a32 1
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Für das entsprechende Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer noch auf den Nano ohne weitere Peripherie!{{/footnote}}.
d66 46
a111 1
{{putFootnotes/}}&lt;/content>
@


4.1
log
@Neuen Anhang install_opencv_4.1.0.sh hochladen
@
text
@d13 1
a13 1
  &lt;date>1563819472000&lt;/date>
d15 1
a15 1
  &lt;version>4.1&lt;/version>
d17 1
a17 1
  &lt;comment>Neuen Anhang install_opencv_4.1.0.sh hochladen&lt;/comment>
d66 8
@


3.1
log
@Neuen Anhang install_opencv_4.1.0.sh hochladen
@
text
@d13 1
a13 1
  &lt;date>1563816138000&lt;/date>
d15 1
a15 1
  &lt;version>3.1&lt;/version>
d67 2
d70 2
a71 2
    &lt;date>1563816138000&lt;/date>
    &lt;version>1.1&lt;/version>
d73 1
a73 1
    &lt;filesize>2014&lt;/filesize>
@


2.1
log
@Kurz-Anleitung Installation &amp; grundlegende Änderungen
@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.SvenHoyer&lt;/creator>
  &lt;creationDate>1562157645000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung 2.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
  &lt;contentAuthor>XWiki.MatthiasDomnik&lt;/contentAuthor>
  &lt;date>1563813493000&lt;/date>
  &lt;contentUpdateDate>1563813493000&lt;/contentUpdateDate>
  &lt;version>2.1&lt;/version>
  &lt;title>Nvidia Nano&lt;/title>
  &lt;comment>Kurz-Anleitung Installation &amp;amp; grundlegende Änderungen&lt;/comment>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>= Nvidia Jetson Nano =

== Installation ==

Eine ausführliche Schritt-für-Schritt-Anleitung zur Inbetriebnahme ist unter [[https:~~/~~/developer.nvidia.com>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit]]  zu finden. Im Folgenden werden die wichtigsten Schritte in Kürze zusammen gefasst:

1. Herunterladen des Images ([[https:~~/~~/developer.nvidia.com/jetson-nano-sd-card-image-r322>>https://developer.nvidia.com/jetson-nano-sd-card-image-r322]]). Dabei handelt es sich um ein Ubuntu 18.04 LTS mit verschiedenen zusätzlichen Komponenten für die Hardwareunterstützung (Stand 07/2019). Das Image ist komprimiert etwa 5 GB groß und entpackt ca. 12 GB.
1. Zum Flashen auf eine µSD-Karte wird eine SD-Karte mit mind. 16 GB (besser 32 GB oder 64 GB) benötigt. Als Tool empfiehlt sich [[Etcher>>https://www.balena.io/etcher/]] unter Windows und [[dd>>https://wiki.ubuntuusers.de/dd/]] unter Linux.
1. Anschließend wird die µSD-Karte eingelegt (siehe Bild unten, Nr. 1) und für die erste Einrichtung sowohl ein Monitor über Hdmi oder DisplayPort, also auch Maus und Tastatur angeschlossen.
1. Die Spannungsversorgung sollte idealerweise über den Rundstecker (siehe Abb. unten, Nr. 8) erfolgen. Für das entsprechende Netzteil bitte das Laborpersonal ansprechen {{footnote}}Theoretisch kann das Board auch über den Micro-USB-Anschluss betrieben werden. Allerding ist dieser nur für 5V/2A (=10W) ausgelegt, sodass bei voller Auslastung des Nanos keine weitere Peripherie (z.B. Webcam) betrieben werden kann. Die von Nvidia spezifizierten 10W beziehen sich immer noch auf den Nano ohne weitere Peripherie!{{/footnote}}.
1. Netzteil an das Hausnetz anschließen und Bootvorgang abwarten. Anschließend müssen verschiedene Vereinbarungen akzeptiert werden und Benutzername, Passwort und Computername festgelegt werden. **Sollten diese Schritte noch nicht erfolgt sein, bitte das Laborpersonal ansprechen!**
1. Der Standardlogin ist: user: **student**, password:** litpassword**

(% style="text-align:center" %)
[[image:https://developer.nvidia.com/sites/default/files/akamai/embedded/images/jetsonNano/gettingStarted/jetson-nano-dev-kit-top-r6-HR.png||height="400" width="459"]]

In diesem Image sind bereits alle zu Beginn wichtigen CUDA-Treiber durch Nvidia vorinstalliert, sodass an dieser Stelle nicht viel zu tun bleibt. Die Pfade zu den entsprechenden Binaries und Libs müssen allerdings noch in die //.bashrc// nachgepflegt werden{{footnote}}Das Bash-Skript stammt aus dem Git-Repo von [[jkjung-avt>>https://github.com/jkjung-avt/jetson_nano/blob/master/install_basics.sh]].{{/footnote}}:

{{code language="bash"}}
#!/bin/bash

set -e

if ! grep 'cuda/bin' ${HOME}/.bashrc > /dev/null ; then
  echo "** Add CUDA stuffs into ~/.bashrc"
  echo >&gt; ${HOME}/.bashrc
  echo "export PATH=/usr/local/cuda/bin:\${PATH}" >> ${HOME}/.bashrc
  echo "export LD_LIBRARY_PATH=/usr/local/cuda/lib64:\${LD_LIBRARY_PATH}" >> ${HOME}/.bashrc
fi
{{/code}}

Des Weiteren ist bei 4 GB RAM ein ausreichend großer SWAP-Space (8 GBi sollten zunächst ausreichen) in Erwägung zu ziehen:

{{code}}
$ sudo fallocate -l 8G /mnt/8GBi.swap
$ sudo mkswap /mnt/8GBi.swap
$ sudo swapon /mnt/8GBi.swap
$ sudo echo "/mnt/8GBi.swap  none  swap  sw 0  0" >> | sudo tee -a /etc/fstab > /dev/null 

{{/code}}

Nach einen Reboot ist der SWAP-Space für das System verfügbar.

{{putFootnotes/}}&lt;/content>
&lt;/xwikidoc>@


1.4
log
@Update document after refactoring.
@
text
@d11 1
a11 1
  &lt;author>XWiki.SvenHoyer&lt;/author>
d13 3
a15 3
  &lt;date>1562157645000&lt;/date>
  &lt;contentUpdateDate>1562157645000&lt;/contentUpdateDate>
  &lt;version>1.4&lt;/version>
d17 2
a18 2
  &lt;comment>Update document after refactoring.&lt;/comment>
  &lt;minorEdit>true&lt;/minorEdit>
d23 1
a23 1
== Einstieg ==
d25 1
a25 1
How-to für Installation: [[https:~~/~~/developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#intro>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#intro]]
d27 6
a32 1
Basic Setup: [[https:~~/~~/jkjung-avt.github.io/setting-up-nano/>>https://jkjung-avt.github.io/setting-up-nano/]]
d34 31
a64 1
OpenCv 3.4.6 installieren: [[https:~~/~~/jkjung-avt.github.io/opencv-on-nano/>>https://jkjung-avt.github.io/opencv-on-nano/]]&lt;/content>
@


1.3
log
@Update document after refactoring.
@
text
@d2 2
a3 2
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung.Nvidia .Nvidia Jetson Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung.Nvidia .Nvidia Jetson Nano&lt;/web>
d8 4
a11 4
  &lt;creator>XWiki.MatthiasDomnik&lt;/creator>
  &lt;creationDate>1562156716000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung.Nvidia .WebHome&lt;/parent>
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
d13 3
a15 3
  &lt;date>1562156716000&lt;/date>
  &lt;contentUpdateDate>1562156716000&lt;/contentUpdateDate>
  &lt;version>1.3&lt;/version>
@


1.2
log
@@
text
@d2 2
a3 2
&lt;xwikidoc version="1.3" reference="Labor.Ausstattung .Nvidia/Nvidia Nano.WebHome" locale="">
  &lt;web>Labor.Ausstattung .Nvidia/Nvidia Nano&lt;/web>
d9 2
a10 2
  &lt;creationDate>1562156580000&lt;/creationDate>
  &lt;parent>Labor.Ausstattung .WebHome&lt;/parent>
d13 3
a15 3
  &lt;date>1562156616000&lt;/date>
  &lt;contentUpdateDate>1562156616000&lt;/contentUpdateDate>
  &lt;version>1.2&lt;/version>
d17 1
a17 1
  &lt;comment/>
@


1.1
log
@@
text
@d13 4
a16 4
  &lt;date>1562156580000&lt;/date>
  &lt;contentUpdateDate>1562156580000&lt;/contentUpdateDate>
  &lt;version>1.1&lt;/version&gt;
  &lt;title>Nvidia/Nvidia Nano&lt;/title>
d18 1
a18 1
  &lt;minorEdit>false&lt;/minorEdit>
d21 8
a28 8
  &lt;content>= Nvidia Jetson Nano =&amp;#xd;
&amp;#xd;
== Einstieg ==&amp;#xd;
&amp;#xd;
How-to für Installation: [[https:~~/~~/developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#intro>>https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#intro]]&amp;#xd;
&amp;#xd;
Basic Setup: [[https:~~/~~/jkjung-avt.github.io/setting-up-nano/>>https://jkjung-avt.github.io/setting-up-nano/]]&amp;#xd;
&amp;#xd;
@
</versions>
  <parent>Labor.Ausstattung 2.Nvidia .WebHome</parent>
  <author>XWiki.makau005</author>
  <contentAuthor>XWiki.makau005</contentAuthor>
  <date>1599498845000</date>
  <contentUpdateDate>1599498845000</contentUpdateDate>
  <version>40.1</version>
  <title>Nvidia Nano</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false" showTranslations="false"/}}
{{/velocity}}


= Vorhandene Boards =

(% style="width:775px" %)
|=(% style="width: 160px;" %)Netzwerkname |=(% style="width: 175px;" %)S/N |=(% style="width: 440px;" %) MAC
|nvidia-nano-1        |1421919067453      |00:04:4B:E5:23:61
|nvidia-nano-2        |1421919067755      |00:04:4B:E5:24:BC
|nvidia-nano-3        |1421919067198      |00:04:4B:E5:22:18
|nvidia-nano-4        |1421919066681      |00:04:4B:E5:21:A8
|nvidia-nano-5        |1421919092401      |00:04:4B:E5:24:BD
|nvidia-nano-6        |1421919067858      |00:04:4B:E5:24:34
|nvidia-nano-7        |1421919092657      |00:04:4B:E5:26:47
|nvidia-nano-8        |1421919067124      |00:04:4B:E5:22:13
|nvidia-nano-9        |1421919067120      |00:04:4B:E5:22:27
|nvidia-nano-10       |1421919067940      |00:04:4B:E5:24:28
|nvidia-nano-11       |1421919067073      |00:04:4B:E5:22:28
|nvidia-nano-12       |1421919067227      |00:04:4B:E5:22:25
|nvidia-nano-13       |1421919092334      |00:04:4B:E5:24:6d
|nvidia-nano-14       |1421919067679      |00:04:4B:E5:24:85
|nvidia-nano-15       |1421919067783      |00:04:4B:E5:24:D4
|nvidia-nano-16       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-17       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-18       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-19       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)
|nvidia-nano-20       |**nicht zugewiesen**    |00:E0:4C:68:00:01 (MUSS ÜBERPRÜFT/GEÄNDERTWERDEN)</content>
  <attachment>
    <filename>example.cpp</filename>
    <versions>head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2020.12.08.12.33.07;	author root;	state Exp;
branches;
next	;


desc
@@


1.1
log
@example.cpp
@
text
@&lt;attachment>
  &lt;filename>example.cpp&lt;/filename>
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
  &lt;date>1563822438000&lt;/date>
  &lt;version>1.1&lt;/version>
  &lt;comment/>
  &lt;content>LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KIC0gRmlsZSBOYW1lICAgICA6ICBleGFtcGxlLmNwcA0KDQogLSBDcmVhdGVkIGJ5ICAgOiAgTWF0dGhpYXMgRG9tbmlrDQoNCiAtIERlc2NyaXB0aW9uICA6ICBEZW1vIHByb2dyYW0gdG8gZGV0ZXJtaW5lIGlmIHRoZSBpbnN0YWxsYXRpb24gb2YgT3BlbkNWIHdlbnQNCmZpbmUuDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KI2luY2x1ZGUgPG9wZW5jdjIvY29yZS9jdWRhLmhwcD4NCiNpbmNsdWRlIDxvcGVuY3YyL2N1ZGFhcml0aG0uaHBwPg0KI2luY2x1ZGUgPG9wZW5jdjIvY3VkYWZpbHRlcnMuaHBwPg0KI2luY2x1ZGUgPG9wZW5jdjIvY3VkYWltZ3Byb2MuaHBwPg0KI2luY2x1ZGUgPG9wZW5jdjIvaGlnaGd1aS9oaWdoZ3VpLmhwcD4NCiNpbmNsdWRlIDxvcGVuY3YyL2ltZ3Byb2MvaW1ncHJvYy5ocHA+DQoNCiNpbmNsdWRlIDxpb3N0cmVhbT4NCiNpbmNsdWRlIDxzdGRpby5oPg0KDQp1c2luZyBuYW1lc3BhY2Ugc3RkOw0KdXNpbmcgbmFtZXNwYWNlIGN2Ow0KdXNpbmcgbmFtZXNwYWNlIGN2OjpjdWRhOw0KDQppbnQgbWFpbihpbnQgYXJnYywgY29uc3QgY2hhciAqYXJndltdKSB7DQoNCiAgc3RkOjpjb3V0IDw8ICJXZWxjb21lIHRvIE9wZW5DViAiIDw8IENWX1ZFUlNJT04gPDwgc3RkOjplbmRsOw0KDQogIGludCBudW1fZ3B1ID0gY3VkYTo6Z2V0Q3VkYUVuYWJsZWREZXZpY2VDb3VudCgpOw0KICBzdGQ6OmNvdXQgPDwgIk51bWJlciBvZiBHUFVzOiAiIDw8IG51bV9ncHUgPDwgc3RkOjplbmRsOw0KDQogIFZpZGVvQ2FwdHVyZSBjYXAoMCk7DQogIGlmICghY2FwLmlzT3BlbmVkKCkpDQogICAgcmV0dXJuIC0xOw0KDQogIE1hdCBmcmFtZSwgR2ZyYW1lLCBHYnVmZl8sIENmcmFtZTsNCiAgY3VkYTo6R3B1TWF0IEdzcmMsIEdkc3Q7DQogIHZlY3Rvcjxjdjo6TWF0PiBmcmFtZV9zcGxpdCgzKSwgR2ZyYW1lX3NwbGl0KDMpLCBDZnJhbWVfc3BsaXQoMyk7DQoNCiAgUHRyPGN1ZGE6OkNMQUhFPiBjbGFoZSA9IGN1ZGE6OmNyZWF0ZUNMQUhFKCk7DQogIGNsYWhlLT5zZXRDbGlwTGltaXQoNC4pOw0KICBjbGFoZS0+c2V0VGlsZXNHcmlkU2l6ZShTaXplKDE2LCAxNikpOw0KDQogIFB0cjxjdjo6Q0xBSEU+IGNsYWhlX2NwdSA9IGN2OjpjcmVhdGVDTEFIRSgpOw0KICBjbGFoZV9jcHUtPnNldENsaXBMaW1pdCg0KTsNCg0KICBpbnQ2NF90IHN0YXJ0ID0gMDsNCiAgZG91YmxlIHRpbWVTZWMgPSAwOw0KDQogIGZvciAoc2l6ZV90IGkgPSAwOyBpIDwgMjA7IGkrKykgew0KICAgIGNhcCA+PiBmcmFtZTsNCg0KICAgIGN2OjpzcGxpdChmcmFtZSwgR2ZyYW1lX3NwbGl0KTsNCiAgICBjdjo6c3BsaXQoZnJhbWUsIENmcmFtZV9zcGxpdCk7DQoNCiAgICBHc3JjLnVwbG9hZChHZnJhbWVfc3BsaXRbMl0pOw0KICAgIHN0YXJ0ID0gZ2V0VGlja0NvdW50KCk7DQogICAgY2xhaGUtPmFwcGx5KEdzcmMsIEdkc3QpOw0KICAgIHRpbWVTZWMgPSAoZ2V0VGlja0NvdW50KCkgLSBzdGFydCkgLyBnZXRUaWNrRnJlcXVlbmN5KCk7DQogICAgY291dCA8PCAiR1BVIFRpbWUgOiAiIDw8IHRpbWVTZWMgKiAxMDAwIDw8ICIgbXMiIDw8IGVuZGw7DQogICAgR2RzdC5kb3dubG9hZChHYnVmZl8pOw0KDQogICAgR2ZyYW1lX3NwbGl0WzJdID0gR2J1ZmZfOw0KICAgIGN2OjptZXJnZShHZnJhbWVfc3BsaXQsIEdmcmFtZSk7DQoNCiAgICBzdGFydCA9IGdldFRpY2tDb3VudCgpOw0KICAgIGNsYWhlX2NwdS0+YXBwbHkoQ2ZyYW1lX3NwbGl0WzJdLCBDZnJhbWVfc3BsaXRbMl0pOw0KICAgIHRpbWVTZWMgPSAoZ2V0VGlja0NvdW50KCkgLSBzdGFydCkgLyBnZXRUaWNrRnJlcXVlbmN5KCk7DQogICAgY291dCA8PCAiQ1BVIFRpbWUgOiAiIDw8IHRpbWVTZWMgKiAxMDAwIDw8ICIgbXMiIDw8IGVuZGw7DQoNCiAgICBjdjo6bWVyZ2UoQ2ZyYW1lX3NwbGl0LCBDZnJhbWUpOw0KDQogICAgLy8gaW1zaG93KCJHUFUgcmVzdWx0IiwgR2ZyYW1lKTsNCiAgICAvLyBpZiAod2FpdEtleSgzMCkgPj0gMCkNCiAgICAvLyAgIGJyZWFrOw0KICAgIC8vDQogICAgLy8gaW1zaG93KCJDUFUgcmVzdWx0IiwgQ2ZyYW1lKTsNCiAgICAvLyBpZiAod2FpdEtleSgzMCkgPj0gMCkNCiAgICAvLyAgIGJyZWFrOw0KICB9DQogIHJldHVybiAwOw0KfQ0K&lt;/content>
  &lt;filesize>2271&lt;/filesize>
&lt;/attachment>@
</versions>
    <author>XWiki.MatthiasDomnik</author>
    <date>1563822438000</date>
    <version>1.1</version>
    <comment/>
    <content>LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KIC0gRmlsZSBOYW1lICAgICA6ICBleGFtcGxlLmNwcA0KDQogLSBDcmVhdGVkIGJ5ICAgOiAgTWF0dGhpYXMgRG9tbmlrDQoNCiAtIERlc2NyaXB0aW9uICA6ICBEZW1vIHByb2dyYW0gdG8gZGV0ZXJtaW5lIGlmIHRoZSBpbnN0YWxsYXRpb24gb2YgT3BlbkNWIHdlbnQNCmZpbmUuDQoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCg0KI2luY2x1ZGUgPG9wZW5jdjIvY29yZS9jdWRhLmhwcD4NCiNpbmNsdWRlIDxvcGVuY3YyL2N1ZGFhcml0aG0uaHBwPg0KI2luY2x1ZGUgPG9wZW5jdjIvY3VkYWZpbHRlcnMuaHBwPg0KI2luY2x1ZGUgPG9wZW5jdjIvY3VkYWltZ3Byb2MuaHBwPg0KI2luY2x1ZGUgPG9wZW5jdjIvaGlnaGd1aS9oaWdoZ3VpLmhwcD4NCiNpbmNsdWRlIDxvcGVuY3YyL2ltZ3Byb2MvaW1ncHJvYy5ocHA+DQoNCiNpbmNsdWRlIDxpb3N0cmVhbT4NCiNpbmNsdWRlIDxzdGRpby5oPg0KDQp1c2luZyBuYW1lc3BhY2Ugc3RkOw0KdXNpbmcgbmFtZXNwYWNlIGN2Ow0KdXNpbmcgbmFtZXNwYWNlIGN2OjpjdWRhOw0KDQppbnQgbWFpbihpbnQgYXJnYywgY29uc3QgY2hhciAqYXJndltdKSB7DQoNCiAgc3RkOjpjb3V0IDw8ICJXZWxjb21lIHRvIE9wZW5DViAiIDw8IENWX1ZFUlNJT04gPDwgc3RkOjplbmRsOw0KDQogIGludCBudW1fZ3B1ID0gY3VkYTo6Z2V0Q3VkYUVuYWJsZWREZXZpY2VDb3VudCgpOw0KICBzdGQ6OmNvdXQgPDwgIk51bWJlciBvZiBHUFVzOiAiIDw8IG51bV9ncHUgPDwgc3RkOjplbmRsOw0KDQogIFZpZGVvQ2FwdHVyZSBjYXAoMCk7DQogIGlmICghY2FwLmlzT3BlbmVkKCkpDQogICAgcmV0dXJuIC0xOw0KDQogIE1hdCBmcmFtZSwgR2ZyYW1lLCBHYnVmZl8sIENmcmFtZTsNCiAgY3VkYTo6R3B1TWF0IEdzcmMsIEdkc3Q7DQogIHZlY3Rvcjxjdjo6TWF0PiBmcmFtZV9zcGxpdCgzKSwgR2ZyYW1lX3NwbGl0KDMpLCBDZnJhbWVfc3BsaXQoMyk7DQoNCiAgUHRyPGN1ZGE6OkNMQUhFPiBjbGFoZSA9IGN1ZGE6OmNyZWF0ZUNMQUhFKCk7DQogIGNsYWhlLT5zZXRDbGlwTGltaXQoNC4pOw0KICBjbGFoZS0+c2V0VGlsZXNHcmlkU2l6ZShTaXplKDE2LCAxNikpOw0KDQogIFB0cjxjdjo6Q0xBSEU+IGNsYWhlX2NwdSA9IGN2OjpjcmVhdGVDTEFIRSgpOw0KICBjbGFoZV9jcHUtPnNldENsaXBMaW1pdCg0KTsNCg0KICBpbnQ2NF90IHN0YXJ0ID0gMDsNCiAgZG91YmxlIHRpbWVTZWMgPSAwOw0KDQogIGZvciAoc2l6ZV90IGkgPSAwOyBpIDwgMjA7IGkrKykgew0KICAgIGNhcCA+PiBmcmFtZTsNCg0KICAgIGN2OjpzcGxpdChmcmFtZSwgR2ZyYW1lX3NwbGl0KTsNCiAgICBjdjo6c3BsaXQoZnJhbWUsIENmcmFtZV9zcGxpdCk7DQoNCiAgICBHc3JjLnVwbG9hZChHZnJhbWVfc3BsaXRbMl0pOw0KICAgIHN0YXJ0ID0gZ2V0VGlja0NvdW50KCk7DQogICAgY2xhaGUtPmFwcGx5KEdzcmMsIEdkc3QpOw0KICAgIHRpbWVTZWMgPSAoZ2V0VGlja0NvdW50KCkgLSBzdGFydCkgLyBnZXRUaWNrRnJlcXVlbmN5KCk7DQogICAgY291dCA8PCAiR1BVIFRpbWUgOiAiIDw8IHRpbWVTZWMgKiAxMDAwIDw8ICIgbXMiIDw8IGVuZGw7DQogICAgR2RzdC5kb3dubG9hZChHYnVmZl8pOw0KDQogICAgR2ZyYW1lX3NwbGl0WzJdID0gR2J1ZmZfOw0KICAgIGN2OjptZXJnZShHZnJhbWVfc3BsaXQsIEdmcmFtZSk7DQoNCiAgICBzdGFydCA9IGdldFRpY2tDb3VudCgpOw0KICAgIGNsYWhlX2NwdS0+YXBwbHkoQ2ZyYW1lX3NwbGl0WzJdLCBDZnJhbWVfc3BsaXRbMl0pOw0KICAgIHRpbWVTZWMgPSAoZ2V0VGlja0NvdW50KCkgLSBzdGFydCkgLyBnZXRUaWNrRnJlcXVlbmN5KCk7DQogICAgY291dCA8PCAiQ1BVIFRpbWUgOiAiIDw8IHRpbWVTZWMgKiAxMDAwIDw8ICIgbXMiIDw8IGVuZGw7DQoNCiAgICBjdjo6bWVyZ2UoQ2ZyYW1lX3NwbGl0LCBDZnJhbWUpOw0KDQogICAgLy8gaW1zaG93KCJHUFUgcmVzdWx0IiwgR2ZyYW1lKTsNCiAgICAvLyBpZiAod2FpdEtleSgzMCkgPj0gMCkNCiAgICAvLyAgIGJyZWFrOw0KICAgIC8vDQogICAgLy8gaW1zaG93KCJDUFUgcmVzdWx0IiwgQ2ZyYW1lKTsNCiAgICAvLyBpZiAod2FpdEtleSgzMCkgPj0gMCkNCiAgICAvLyAgIGJyZWFrOw0KICB9DQogIHJldHVybiAwOw0KfQ0K</content>
    <filesize>2271</filesize>
  </attachment>
  <attachment>
    <filename>install_opencv_4.1.0.sh</filename>
    <versions>head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2020.12.08.12.33.07;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2020.12.08.12.33.07;	author root;	state Exp;
branches;
next	;


desc
@@


1.2
log
@@
text
@&lt;attachment>
  &lt;filename>install_opencv_4.1.0.sh&lt;/filename>
  &lt;author>XWiki.MatthiasDomnik&lt;/author>
  &lt;date>1563819472000&lt;/date>
  &lt;version>1.2&lt;/version>
  &lt;comment/>
  &lt;content>IyEvYmluL2Jhc2gKIwojIENvcHlyaWdodCAoYykgMjAxOCwgTlZJRElBIENPUlBPUkFUSU9OLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIE5WSURJQSBDb3Jwb3JhdGlvbiBhbmQgaXRzIGxpY2Vuc29ycyByZXRhaW4gYWxsIGludGVsbGVjdHVhbCBwcm9wZXJ0eQojIGFuZCBwcm9wcmlldGFyeSByaWdodHMgaW4gYW5kIHRvIHRoaXMgc29mdHdhcmUsIHJlbGF0ZWQgZG9jdW1lbnRhdGlvbgojIGFuZCBhbnkgbW9kaWZpY2F0aW9ucyB0aGVyZXRvLiAgQW55IHVzZSwgcmVwcm9kdWN0aW9uLCBkaXNjbG9zdXJlIG9yCiMgZGlzdHJpYnV0aW9uIG9mIHRoaXMgc29mdHdhcmUgYW5kIHJlbGF0ZWQgZG9jdW1lbnRhdGlvbiB3aXRob3V0IGFuIGV4cHJlc3MKIyBsaWNlbnNlIGFncmVlbWVudCBmcm9tIE5WSURJQSBDb3Jwb3JhdGlvbiBpcyBzdHJpY3RseSBwcm9oaWJpdGVkLgojCgppZiBbICIkIyIgLW5lIDEgXTsgdGhlbgogICAgZWNobyAiVXNhZ2U6ICQwIDxJbnN0YWxsIEZvbGRlcj4iCiAgICBleGl0CmZpCmZvbGRlcj0iJDEiCnVzZXI9Im52aWRpYSIKcGFzc3dkPSJudmlkaWEiCgplY2hvICIqKiBSZW1vdmUgT3BlbkNWMy4zIGZpcnN0IgpzdWRvIHN1ZG8gYXB0LWdldCBwdXJnZSAqbGlib3BlbmN2KgoKZWNobyAiKiogSW5zdGFsbCByZXF1aXJlbWVudCIKc3VkbyBhcHQtZ2V0IHVwZGF0ZQpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBidWlsZC1lc3NlbnRpYWwgY21ha2UgZ2l0IGxpYmd0azIuMC1kZXYgcGtnLWNvbmZpZyBsaWJhdmNvZGVjLWRldiBsaWJhdmZvcm1hdC1kZXYgbGlic3dzY2FsZS1kZXYKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgbGliZ3N0cmVhbWVyMS4wLWRldiBsaWJnc3RyZWFtZXItcGx1Z2lucy1iYXNlMS4wLWRldgpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBweXRob24yLjctZGV2IHB5dGhvbjMuNi1kZXYgcHl0aG9uLWRldiBweXRob24tbnVtcHkgcHl0aG9uMy1udW1weQpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBsaWJ0YmIyIGxpYnRiYi1kZXYgbGlianBlZy1kZXYgbGlicG5nLWRldiBsaWJ0aWZmLWRldiBsaWJqYXNwZXItZGV2IGxpYmRjMTM5NC0yMi1kZXYKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgbGlidjRsLWRldiB2NGwtdXRpbHMgcXY0bDIgdjRsMnVjcApzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBjdXJsCnN1ZG8gYXB0LWdldCB1cGRhdGUKCmVjaG8gIioqIERvd25sb2FkIG9wZW5jdi00LjEuMCIKY2QgJGZvbGRlcgpjdXJsIC1MIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuY3Yvb3BlbmN2L2FyY2hpdmUvNC4xLjAuemlwIC1vIG9wZW5jdi00LjEuMC56aXAKY3VybCAtTCBodHRwczovL2dpdGh1Yi5jb20vb3BlbmN2L29wZW5jdl9jb250cmliL2FyY2hpdmUvNC4xLjAuemlwIC1vIG9wZW5jdl9jb250cmliLTQuMS4wLnppcAp1bnppcCBvcGVuY3YtNC4xLjAuemlwCnVuemlwIG9wZW5jdl9jb250cmliLTQuMS4wLnppcApjZCBvcGVuY3YtNC4xLjAvCgplY2hvICIqKiBCdWlsZGluZy4uLiIKbWtkaXIgcmVsZWFzZQpjZCByZWxlYXNlLwpjbWFrZSAtRCBXSVRIX0NVREE9T04gLUQgQ1VEQV9BUkNIX0JJTj0iNS4zIiAtRCBDVURBX0FSQ0hfUFRYPSIiIC1EIE9QRU5DVl9FWFRSQV9NT0RVTEVTX1BBVEg9Li4vLi4vb3BlbmN2X2NvbnRyaWItNC4xLjAvbW9kdWxlcyAtRCBXSVRIX0dTVFJFQU1FUj1PTiAtRCBXSVRIX0xJQlY0TD1PTiAtRCBCVUlMRF9vcGVuY3ZfcHl0aG9uMj1PTiAtRCBCVUlMRF9vcGVuY3ZfcHl0aG9uMz1PTiAtRCBCVUlMRF9URVNUUz1PRkYgLUQgQlVJTERfUEVSRl9URVNUUz1PRkYgLUQgQlVJTERfRVhBTVBMRVM9T0ZGIC1EIENNQUtFX0JVSUxEX1RZUEU9UkVMRUFTRSAtRCBDTUFLRV9JTlNUQUxMX1BSRUZJWD0vdXNyL2xvY2FsIC4uCm1ha2UgLWozCnN1ZG8gbWFrZSBpbnN0YWxsCgplY2hvICIqKiBJbnN0YWxsIG9wZW5jdi00LjAuMCBzdWNjZXNzZnVsbHkiCmVjaG8gIioqIEJ5ZSA6KSIK&lt;/content>
  &lt;filesize>1965&lt;/filesize>
&lt;/attachment>@


1.1
log
@install_opencv_4.1.0.sh
@
text
@d4 2
a5 2
  &lt;date>1563816138000&lt;/date>
  &lt;version>1.1&lt;/version>
d7 2
a8 2
  &lt;content>IyEvYmluL2Jhc2gNCiMNCiMgQ29weXJpZ2h0IChjKSAyMDE4LCBOVklESUEgQ09SUE9SQVRJT04uICBBbGwgcmlnaHRzIHJlc2VydmVkLg0KIw0KIyBOVklESUEgQ29ycG9yYXRpb24gYW5kIGl0cyBsaWNlbnNvcnMgcmV0YWluIGFsbCBpbnRlbGxlY3R1YWwgcHJvcGVydHkNCiMgYW5kIHByb3ByaWV0YXJ5IHJpZ2h0cyBpbiBhbmQgdG8gdGhpcyBzb2Z0d2FyZSwgcmVsYXRlZCBkb2N1bWVudGF0aW9uDQojIGFuZCBhbnkgbW9kaWZpY2F0aW9ucyB0aGVyZXRvLiAgQW55IHVzZSwgcmVwcm9kdWN0aW9uLCBkaXNjbG9zdXJlIG9yDQojIGRpc3RyaWJ1dGlvbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCByZWxhdGVkIGRvY3VtZW50YXRpb24gd2l0aG91dCBhbiBleHByZXNzDQojIGxpY2Vuc2UgYWdyZWVtZW50IGZyb20gTlZJRElBIENvcnBvcmF0aW9uIGlzIHN0cmljdGx5IHByb2hpYml0ZWQuDQojDQoNCmlmIFsgIiQjIiAtbmUgMSBdOyB0aGVuDQogICAgZWNobyAiVXNhZ2U6ICQwIDxJbnN0YWxsIEZvbGRlcj4iDQogICAgZXhpdA0KZmkNCmZvbGRlcj0iJDEiDQp1c2VyPSJudmlkaWEiDQpwYXNzd2Q9Im52aWRpYSINCg0KZWNobyAiKiogUmVtb3ZlIE9wZW5DVjMuMyBmaXJzdCINCnN1ZG8gc3VkbyBhcHQtZ2V0IHB1cmdlICpsaWJvcGVuY3YqDQoNCmVjaG8gIioqIEluc3RhbGwgcmVxdWlyZW1lbnQiDQpzdWRvIGFwdC1nZXQgdXBkYXRlDQpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBidWlsZC1lc3NlbnRpYWwgY21ha2UgZ2l0IGxpYmd0azIuMC1kZXYgcGtnLWNvbmZpZyBsaWJhdmNvZGVjLWRldiBsaWJhdmZvcm1hdC1kZXYgbGlic3dzY2FsZS1kZXYNCnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGxpYmdzdHJlYW1lcjEuMC1kZXYgbGliZ3N0cmVhbWVyLXBsdWdpbnMtYmFzZTEuMC1kZXYNCnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IHB5dGhvbjIuNy1kZXYgcHl0aG9uMy42LWRldiBweXRob24tZGV2IHB5dGhvbi1udW1weSBweXRob24zLW51bXB5DQpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBsaWJ0YmIyIGxpYnRiYi1kZXYgbGlianBlZy1kZXYgbGlicG5nLWRldiBsaWJ0aWZmLWRldiBsaWJqYXNwZXItZGV2IGxpYmRjMTM5NC0yMi1kZXYNCnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGxpYnY0bC1kZXYgdjRsLXV0aWxzIHF2NGwyIHY0bDJ1Y3ANCnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGN1cmwNCnN1ZG8gYXB0LWdldCB1cGRhdGUNCg0KZWNobyAiKiogRG93bmxvYWQgb3BlbmN2LTQuMS4wIg0KY2QgJGZvbGRlcg0KY3VybCAtTCBodHRwczovL2dpdGh1Yi5jb20vb3BlbmN2L29wZW5jdi9hcmNoaXZlLzQuMS4wLnppcCAtbyBvcGVuY3YtNC4xLjAuemlwDQpjdXJsIC1MIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuY3Yvb3BlbmN2X2NvbnRyaWIvYXJjaGl2ZS80LjEuMC56aXAgLW8gb3BlbmN2X2NvbnRyaWItNC4xLjAuemlwDQp1bnppcCBvcGVuY3YtNC4xLjAuemlwDQp1bnppcCBvcGVuY3ZfY29udHJpYi00LjEuMC56aXANCmNkIG9wZW5jdi00LjEuMC8NCg0KZWNobyAiKiogQnVpbGRpbmcuLi4iDQpta2RpciByZWxlYXNlDQpjZCByZWxlYXNlLw0KY21ha2UgLUQgV0lUSF9DVURBPU9OIC1EIENVREFfQVJDSF9CSU49IjUuMyIgLUQgQ1VEQV9BUkNIX1BUWD0iIiAtRCBPUEVOQ1ZfRVhUUkFfTU9EVUxFU19QQVRIPS4uLy4uL29wZW5jdl9jb250cmliLTQuMS4wL21vZHVsZXMgLUQgV0lUSF9HU1RSRUFNRVI9T04gLUQgV0lUSF9MSUJWNEw9T04gLUQgQlVJTERfb3BlbmN2X3B5dGhvbjI9T04gLUQgQlVJTERfb3BlbmN2X3B5dGhvbjM9T04gLUQgQlVJTERfVEVTVFM9T0ZGIC1EIEJVSUxEX1BFUkZfVEVTVFM9T0ZGIC1EIEJVSUxEX0VYQU1QTEVTPU9GRiAtRCBDTUFLRV9CVUlMRF9UWVBFPVJFTEVBU0UgLUQgQ01BS0VfSU5TVEFMTF9QUkVGSVg9L3Vzci9sb2NhbCAuLg0KbWFrZSAtajMNCnN1ZG8gbWFrZSBpbnN0YWxsDQoNCmVjaG8gIioqIEluc3RhbGwgb3BlbmN2LTQuMC4wIHN1Y2Nlc3NmdWxseSINCmVjaG8gIioqIEJ5ZSA6KSINCg==&lt;/content>
  &lt;filesize>2014&lt;/filesize>
@
</versions>
    <mimetype>application/x-sh</mimetype>
    <charset>UTF-8</charset>
    <author>XWiki.MatthiasDomnik</author>
    <date>1563819472000</date>
    <version>1.2</version>
    <comment/>
    <content>IyEvYmluL2Jhc2gKIwojIENvcHlyaWdodCAoYykgMjAxOCwgTlZJRElBIENPUlBPUkFUSU9OLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojIE5WSURJQSBDb3Jwb3JhdGlvbiBhbmQgaXRzIGxpY2Vuc29ycyByZXRhaW4gYWxsIGludGVsbGVjdHVhbCBwcm9wZXJ0eQojIGFuZCBwcm9wcmlldGFyeSByaWdodHMgaW4gYW5kIHRvIHRoaXMgc29mdHdhcmUsIHJlbGF0ZWQgZG9jdW1lbnRhdGlvbgojIGFuZCBhbnkgbW9kaWZpY2F0aW9ucyB0aGVyZXRvLiAgQW55IHVzZSwgcmVwcm9kdWN0aW9uLCBkaXNjbG9zdXJlIG9yCiMgZGlzdHJpYnV0aW9uIG9mIHRoaXMgc29mdHdhcmUgYW5kIHJlbGF0ZWQgZG9jdW1lbnRhdGlvbiB3aXRob3V0IGFuIGV4cHJlc3MKIyBsaWNlbnNlIGFncmVlbWVudCBmcm9tIE5WSURJQSBDb3Jwb3JhdGlvbiBpcyBzdHJpY3RseSBwcm9oaWJpdGVkLgojCgppZiBbICIkIyIgLW5lIDEgXTsgdGhlbgogICAgZWNobyAiVXNhZ2U6ICQwIDxJbnN0YWxsIEZvbGRlcj4iCiAgICBleGl0CmZpCmZvbGRlcj0iJDEiCnVzZXI9Im52aWRpYSIKcGFzc3dkPSJudmlkaWEiCgplY2hvICIqKiBSZW1vdmUgT3BlbkNWMy4zIGZpcnN0IgpzdWRvIHN1ZG8gYXB0LWdldCBwdXJnZSAqbGlib3BlbmN2KgoKZWNobyAiKiogSW5zdGFsbCByZXF1aXJlbWVudCIKc3VkbyBhcHQtZ2V0IHVwZGF0ZQpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBidWlsZC1lc3NlbnRpYWwgY21ha2UgZ2l0IGxpYmd0azIuMC1kZXYgcGtnLWNvbmZpZyBsaWJhdmNvZGVjLWRldiBsaWJhdmZvcm1hdC1kZXYgbGlic3dzY2FsZS1kZXYKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgbGliZ3N0cmVhbWVyMS4wLWRldiBsaWJnc3RyZWFtZXItcGx1Z2lucy1iYXNlMS4wLWRldgpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBweXRob24yLjctZGV2IHB5dGhvbjMuNi1kZXYgcHl0aG9uLWRldiBweXRob24tbnVtcHkgcHl0aG9uMy1udW1weQpzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBsaWJ0YmIyIGxpYnRiYi1kZXYgbGlianBlZy1kZXYgbGlicG5nLWRldiBsaWJ0aWZmLWRldiBsaWJqYXNwZXItZGV2IGxpYmRjMTM5NC0yMi1kZXYKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgbGlidjRsLWRldiB2NGwtdXRpbHMgcXY0bDIgdjRsMnVjcApzdWRvIGFwdC1nZXQgaW5zdGFsbCAteSBjdXJsCnN1ZG8gYXB0LWdldCB1cGRhdGUKCmVjaG8gIioqIERvd25sb2FkIG9wZW5jdi00LjEuMCIKY2QgJGZvbGRlcgpjdXJsIC1MIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuY3Yvb3BlbmN2L2FyY2hpdmUvNC4xLjAuemlwIC1vIG9wZW5jdi00LjEuMC56aXAKY3VybCAtTCBodHRwczovL2dpdGh1Yi5jb20vb3BlbmN2L29wZW5jdl9jb250cmliL2FyY2hpdmUvNC4xLjAuemlwIC1vIG9wZW5jdl9jb250cmliLTQuMS4wLnppcAp1bnppcCBvcGVuY3YtNC4xLjAuemlwCnVuemlwIG9wZW5jdl9jb250cmliLTQuMS4wLnppcApjZCBvcGVuY3YtNC4xLjAvCgplY2hvICIqKiBCdWlsZGluZy4uLiIKbWtkaXIgcmVsZWFzZQpjZCByZWxlYXNlLwpjbWFrZSAtRCBXSVRIX0NVREE9T04gLUQgQ1VEQV9BUkNIX0JJTj0iNS4zIiAtRCBDVURBX0FSQ0hfUFRYPSIiIC1EIE9QRU5DVl9FWFRSQV9NT0RVTEVTX1BBVEg9Li4vLi4vb3BlbmN2X2NvbnRyaWItNC4xLjAvbW9kdWxlcyAtRCBXSVRIX0dTVFJFQU1FUj1PTiAtRCBXSVRIX0xJQlY0TD1PTiAtRCBCVUlMRF9vcGVuY3ZfcHl0aG9uMj1PTiAtRCBCVUlMRF9vcGVuY3ZfcHl0aG9uMz1PTiAtRCBCVUlMRF9URVNUUz1PRkYgLUQgQlVJTERfUEVSRl9URVNUUz1PRkYgLUQgQlVJTERfRVhBTVBMRVM9T0ZGIC1EIENNQUtFX0JVSUxEX1RZUEU9UkVMRUFTRSAtRCBDTUFLRV9JTlNUQUxMX1BSRUZJWD0vdXNyL2xvY2FsIC4uCm1ha2UgLWozCnN1ZG8gbWFrZSBpbnN0YWxsCgplY2hvICIqKiBJbnN0YWxsIG9wZW5jdi00LjAuMCBzdWNjZXNzZnVsbHkiCmVjaG8gIioqIEJ5ZSA6KSIK</content>
    <filesize>1965</filesize>
  </attachment>
  <attachment>
    <filename>install_prebuild_opencv4.1.0.sh</filename>
    <versions>head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	2020.12.08.12.33.07;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2020.12.08.12.33.07;	author root;	state Exp;
branches;
next	;


desc
@@


1.2
log
@@
text
@&lt;attachment>
  &lt;filename>install_prebuild_opencv4.1.0.sh&lt;/filename>
  &lt;author>XWiki.makau005&lt;/author>
  &lt;date>1565016767000&lt;/date>
  &lt;version>1.2&lt;/version>
  &lt;comment/>
  &lt;content>IyEvYmluL2Jhc2gKCmVjaG8gIkluc3RhbGxpbmcgT3BlbkNWIDQuMS4wIHRvIC91c3IvbG9jYWwgLi4uIgoKaWYgWyAkUFdEICE9ICcvaG9tZS9zdHVkZW50JyBdCnRoZW4gZWNobyAtZSAiXGVbMzFtWW91IGFyZSBpbiB0aGUgd3JvbmcgcGF0aC4gTW92ZSB0byAnL2hvbWUvc3R1ZGVudCcuXGVbMzltIgogICAgIHJldHVybiAtMTsKZmkKCmVjaG8gIioqIFJlbW92ZSBPcGVuQ1YzLjMgZmlyc3QiCnN1ZG8gYXB0LWdldCBwdXJnZSAqbGlib3BlbmN2KgoKZWNobyAiKiogSW5zdGFsbCByZXF1aXJlbWVudHMiCnN1ZG8gYXB0LWdldCB1cGRhdGUKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgYnVpbGQtZXNzZW50aWFsIGNtYWtlIGdpdCBsaWJndGsyLjAtZGV2IHBrZy1jb25maWcgbGliYXZjb2RlYy1kZXYgbGliYXZmb3JtYXQtZGV2IGxpYnN3c2NhbGUtZGV2CnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGxpYmdzdHJlYW1lcjEuMC1kZXYgbGliZ3N0cmVhbWVyLXBsdWdpbnMtYmFzZTEuMC1kZXYKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgcHl0aG9uMi43LWRldiBweXRob24zLjYtZGV2IHB5dGhvbi1kZXYgcHl0aG9uLW51bXB5IHB5dGhvbjMtbnVtcHkKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgbGlidGJiMiBsaWJ0YmItZGV2IGxpYmpwZWctZGV2IGxpYnBuZy1kZXYgbGlidGlmZi1kZXYgbGliamFzcGVyLWRldiBsaWJkYzEzOTQtMjItZGV2CnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGxpYnY0bC1kZXYgdjRsLXV0aWxzIHF2NGwyIHY0bDJ1Y3AKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgY3VybApzdWRvIGFwdC1nZXQgdXBkYXRlCgppZiBbIC1mICIuL29wZW5jdi00LjEuMC50YXIuZ3oiIF07CnRoZW4gZWNobyAtZSAiXGVbOTJtQXJjaGl2ZSAnb3BlbmN2LTQuMS4wLnRhci5neicgZm91bmQgXGVbMzltIiwKICAgICB0YXIgLXh6dmYgb3BlbmN2LTQuMS4wLnRhci5neiAtQyAvaG9tZS9zdHVkZW50LwogICAgIGNkICRIT01FL29wZW5jdi8KICAgICBjdXJsIC1MIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuY3Yvb3BlbmN2X2NvbnRyaWIvYXJjaGl2ZS80LjEuMC56aXAgLW8gb3BlbmN2X2NvbnRyaWItNC4xLjAuemlwCiAgICAgdW56aXAgb3BlbmN2X2NvbnRyaWItNC4xLjAuemlwICYmCiAgICAgZWNobyAiVW5wYWNraW5nIGRvbmUuLi4iCiAgICAgY2QgL2hvbWUvc3R1ZGVudC9vcGVuY3Yvb3BlbmN2LTQuMS4wL3JlbGVhc2UvICYmCiAgICAgc3VkbyBtYWtlIGluc3RhbGwKICAgICBlY2hvIC1lICJcZVs5M21SZW1vdmluZyB6aXAtRm9sZGVyLi4uIgogICAgIGNkIC9ob21lL3N0dWRlbnQvb3BlbmN2LwogICAgIHJtIG9wZW5jdl9jb250cmliLTQuMS4wLnppcAogICAgIGVjaG8gLWUgIlxlWzkzbVdlJ3JlIGRvbmUuLi4iCmVsc2UgZWNobyAtZSAiXGVbMzFtQXJjaGl2ZSAnb3BlbmN2LTQuMS4wLnRhci5neicgbm90IGZvdW5kISI7CmZpCg==&lt;/content>
  &lt;filesize>1444&lt;/filesize>
&lt;/attachment>@


1.1
log
@install_prebuild_opencv4.1.0.sh
@
text
@d4 2
a5 2
  &lt;date>1565016715000&lt;/date>
  &lt;version>1.1&lt;/version>
@
</versions>
    <author>XWiki.makau005</author>
    <date>1565016767000</date>
    <version>1.2</version>
    <comment/>
    <content>IyEvYmluL2Jhc2gKCmVjaG8gIkluc3RhbGxpbmcgT3BlbkNWIDQuMS4wIHRvIC91c3IvbG9jYWwgLi4uIgoKaWYgWyAkUFdEICE9ICcvaG9tZS9zdHVkZW50JyBdCnRoZW4gZWNobyAtZSAiXGVbMzFtWW91IGFyZSBpbiB0aGUgd3JvbmcgcGF0aC4gTW92ZSB0byAnL2hvbWUvc3R1ZGVudCcuXGVbMzltIgogICAgIHJldHVybiAtMTsKZmkKCmVjaG8gIioqIFJlbW92ZSBPcGVuQ1YzLjMgZmlyc3QiCnN1ZG8gYXB0LWdldCBwdXJnZSAqbGlib3BlbmN2KgoKZWNobyAiKiogSW5zdGFsbCByZXF1aXJlbWVudHMiCnN1ZG8gYXB0LWdldCB1cGRhdGUKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgYnVpbGQtZXNzZW50aWFsIGNtYWtlIGdpdCBsaWJndGsyLjAtZGV2IHBrZy1jb25maWcgbGliYXZjb2RlYy1kZXYgbGliYXZmb3JtYXQtZGV2IGxpYnN3c2NhbGUtZGV2CnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGxpYmdzdHJlYW1lcjEuMC1kZXYgbGliZ3N0cmVhbWVyLXBsdWdpbnMtYmFzZTEuMC1kZXYKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgcHl0aG9uMi43LWRldiBweXRob24zLjYtZGV2IHB5dGhvbi1kZXYgcHl0aG9uLW51bXB5IHB5dGhvbjMtbnVtcHkKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgbGlidGJiMiBsaWJ0YmItZGV2IGxpYmpwZWctZGV2IGxpYnBuZy1kZXYgbGlidGlmZi1kZXYgbGliamFzcGVyLWRldiBsaWJkYzEzOTQtMjItZGV2CnN1ZG8gYXB0LWdldCBpbnN0YWxsIC15IGxpYnY0bC1kZXYgdjRsLXV0aWxzIHF2NGwyIHY0bDJ1Y3AKc3VkbyBhcHQtZ2V0IGluc3RhbGwgLXkgY3VybApzdWRvIGFwdC1nZXQgdXBkYXRlCgppZiBbIC1mICIuL29wZW5jdi00LjEuMC50YXIuZ3oiIF07CnRoZW4gZWNobyAtZSAiXGVbOTJtQXJjaGl2ZSAnb3BlbmN2LTQuMS4wLnRhci5neicgZm91bmQgXGVbMzltIiwKICAgICB0YXIgLXh6dmYgb3BlbmN2LTQuMS4wLnRhci5neiAtQyAvaG9tZS9zdHVkZW50LwogICAgIGNkICRIT01FL29wZW5jdi8KICAgICBjdXJsIC1MIGh0dHBzOi8vZ2l0aHViLmNvbS9vcGVuY3Yvb3BlbmN2X2NvbnRyaWIvYXJjaGl2ZS80LjEuMC56aXAgLW8gb3BlbmN2X2NvbnRyaWItNC4xLjAuemlwCiAgICAgdW56aXAgb3BlbmN2X2NvbnRyaWItNC4xLjAuemlwICYmCiAgICAgZWNobyAiVW5wYWNraW5nIGRvbmUuLi4iCiAgICAgY2QgL2hvbWUvc3R1ZGVudC9vcGVuY3Yvb3BlbmN2LTQuMS4wL3JlbGVhc2UvICYmCiAgICAgc3VkbyBtYWtlIGluc3RhbGwKICAgICBlY2hvIC1lICJcZVs5M21SZW1vdmluZyB6aXAtRm9sZGVyLi4uIgogICAgIGNkIC9ob21lL3N0dWRlbnQvb3BlbmN2LwogICAgIHJtIG9wZW5jdl9jb250cmliLTQuMS4wLnppcAogICAgIGVjaG8gLWUgIlxlWzkzbVdlJ3JlIGRvbmUuLi4iCmVsc2UgZWNobyAtZSAiXGVbMzFtQXJjaGl2ZSAnb3BlbmN2LTQuMS4wLnRhci5neicgbm90IGZvdW5kISI7CmZpCg==</content>
    <filesize>1444</filesize>
  </attachment>
  <object>
    <name>Labor.Ausstattung 2.Nvidia .Nvidia Jetson Nano.WebHome</name>
    <number>0</number>
    <className>XWiki.TagClass</className>
    <guid>928804d3-e540-4ac0-b369-048ace2c9da6</guid>
    <class>
      <name>XWiki.TagClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <tags>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>input</displayType>
        <multiSelect>1</multiSelect>
        <name>tags</name>
        <number>1</number>
        <prettyName>Tags</prettyName>
        <relationalStorage>1</relationalStorage>
        <separator>|</separator>
        <separators>|,</separators>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <values/>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </tags>
    </class>
    <property>
      <tags>
        <value>Nvidia</value>
        <value>embedded</value>
        <value>GPU</value>
        <value>OpenCV</value>
        <value>Vision</value>
        <value>KI</value>
        <value>Ai</value>
      </tags>
    </property>
  </object>
</xwikidoc>