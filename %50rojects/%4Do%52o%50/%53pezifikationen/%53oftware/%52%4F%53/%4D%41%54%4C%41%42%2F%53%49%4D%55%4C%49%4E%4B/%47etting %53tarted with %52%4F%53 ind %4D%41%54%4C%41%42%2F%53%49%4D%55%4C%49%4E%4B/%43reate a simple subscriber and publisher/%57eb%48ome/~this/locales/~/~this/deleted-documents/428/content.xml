<?xml version='1.1' encoding='UTF-8'?>
<xwikidoc version="1.3" reference="Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher.WebHome" locale="">
  <web>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.FredericKovacs</creator>
  <creationDate>1537258246000</creationDate>
  <versions>head	17.1;
access;
symbols;
locks; strict;
comment	@# @;


17.1
date	2018.11.06.12.12.04;	author XWiki_2EFredericKovacs;	state full;
branches;
next	16.1;

16.1
date	2018.11.06.12.11.44;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	15.3;

15.3
date	2018.11.06.12.11.43;	author XWiki_2EFredericKovacs;	state full;
branches;
next	15.2;

15.2
date	2018.10.31.08.45.35;	author XWiki_2ESvenHoyer;	state diff;
branches;
next	15.1;

15.1
date	2018.10.30.13.52.40;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	14.1;

14.1
date	2018.10.30.13.52.08;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	13.3;

13.3
date	2018.10.30.13.52.05;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	13.2;

13.2
date	2018.10.30.13.32.31;	author XWiki_2EFredericKovacs;	state full;
branches;
next	13.1;

13.1
date	2018.10.30.13.26.33;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	12.1;

12.1
date	2018.09.20.08.31.16;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	11.1;

11.1
date	2018.09.20.08.30.32;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	10.1;

10.1
date	2018.09.18.10.49.20;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	9.1;

9.1
date	2018.09.18.10.38.28;	author XWiki_2EFredericKovacs;	state full;
branches;
next	8.1;

8.1
date	2018.09.18.10.31.41;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	7.1;

7.1
date	2018.09.18.10.31.12;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	6.2;

6.2
date	2018.09.18.10.31.09;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	6.1;

6.1
date	2018.09.18.09.38.57;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	5.1;

5.1
date	2018.09.18.08.54.30;	author XWiki_2EFredericKovacs;	state full;
branches;
next	4.1;

4.1
date	2018.09.18.08.53.20;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	3.1;

3.1
date	2018.09.18.08.45.31;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	2.1;

2.1
date	2018.09.18.08.13.34;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	1.1;

1.1
date	2018.09.18.08.10.46;	author XWiki_2EFredericKovacs;	state diff;
branches;
next	;


desc
@@


17.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher.WebHome" locale="">
  &lt;web>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>en&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.FredericKovacs&lt;/creator>
  &lt;creationDate>1537258246000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.WebHome&lt;/parent>
  &lt;author>XWiki.FredericKovacs&lt;/author>
  &lt;contentAuthor>XWiki.FredericKovacs&lt;/contentAuthor>
  &lt;date>1541506324000&lt;/date>
  &lt;contentUpdateDate>1541506324000&lt;/contentUpdateDate>
  &lt;version>16.1&lt;/version>
  &lt;title>Step 2: Create a simple subscriber and publisher&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&amp;#xd;
&amp;#xd;
//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&amp;#xd;
[[https:~~/~~/de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html>>https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//]]//&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== MATLAB ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.&amp;#xd;
&amp;#xd;
**Subscriber:**&amp;#xd;
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Subscribe with the following command:&amp;#xd;
&amp;#xd;
In general:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
For this example:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">sub_counter = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.&amp;#xd;
&amp;#xd;
Open another Terminal in your VM and execute the command:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see the nodes who publish and subscribe to this topic.&amp;#xd;
There should be /counter as Publisher and your "matlab_global_node" as subscriber.&amp;#xd;
&amp;#xd;
An other way to view the content of a Topic in MATLAB is to execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
When you want to end the Subscription execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">clear countersub {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**A better way to use subscribe and publish in MATLAB**&amp;#xd;
&amp;#xd;
It's better to create a specific node with which you subscribe or publish to a specific topic, otherwise MATLAB uses the "matlab_global_node" as subscriber or publisher which isn't as clearly arranged as it should be in a development environment.&amp;#xd;
&amp;#xd;
To create the node execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">sub_counter_node = robotics.ros.Node('/sub_counter');&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
The command to subscribe to a specific Topics with a Specific node is:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">Subscribe_Name = robotics.ros.Subscriber(Node_Name,'{Topic_Name}','{Message_Type}',{Callback_Function};&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">Subscriber_Counter = robotics.ros.Subscriber(sub_counter_node,'/counter','std_msgs/Int64',@@exampleHelperROSChatterCallback);&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
When you aren't shure about the messagetype of the Topic use:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see your "/sub_counter"-node as subscriber if you execute this command after subscribing.&amp;#xd;
&amp;#xd;
The callback-function will display the latest message. You can also view the latest message if you double-click your "Subscriber_Counter" in the workspace of MATLAB and proceed to the "LatestMessage"-Tab. But you'll have to refresh manually.&amp;#xd;
&amp;#xd;
Use the "clear"-command to shut down your subscribers and nodes.&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**Publisher**&amp;#xd;
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter_sub counter_sub&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Now we need to create a publisher node which is publishing to the Topic the "sub_counter"-Node has subscribed to.&amp;#xd;
&amp;#xd;
You can use this to create a Publisher:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counterpub = rospublisher('/counter');&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
But as said before it's better create a specific node which will Publish to the "/counter"-Topic:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counter_node = robotics.ros.Node('/counter');&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counterpub = robotics.ros.Publisher(counter_node,'/counter','std_msgs/Int64');;&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
//Note: "/counter" describes the name of the node in the first command and the name of the Topic in the Publisher-Command.//&amp;#xd;
&amp;#xd;
Because we want a countinous stream of messages the callback function of the subscriber can react to we write a Script this time.&amp;#xd;
The Script looks like this:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage(counterpub);&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">while(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">send(counterpub,msg)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = msg.Data+1;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">pause(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">end&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
The publishing command is very similar to the subscription command.&amp;#xd;
But additionally we need to create a message for the Publisher to publish.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage({publisher});&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
And the content of the message.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Finally we need to execute the send command to publish a cretain message via a certain publisher.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">send({publisher},{message})&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.&amp;#xd;
&amp;#xd;
If you start the Script you should see your counter_sub node react in the VM.&amp;#xd;
&amp;#xd;
When you execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You should be able to see that the "/counter"-node is the publisher now.&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/rosmessage.html&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/robotics.subscriber.html&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/robotics.publisher.html&lt;/content>
&lt;/xwikidoc>@


16.1
log
@@
text
@d13 2
a14 2
  &lt;date>1541506304000&lt;/date>
  &lt;contentUpdateDate>1541506304000&lt;/contentUpdateDate>
d21 138
a158 138
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false"/}}
{{/velocity}}

----

//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//

//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:
[[https:~~/~~/de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html>>https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//]]//

----

=== MATLAB ===

----

Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.

**Subscriber:**
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.

>{{html}}&amp;lt;font size="2">rosrun counter counter&amp;lt;/font>{{/html}}

Subscribe with the following command:

In general:

>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}

For this example:

>{{html}}&amp;lt;font size="2">sub_counter = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}

MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.

Open another Terminal in your VM and execute the command:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You'll see the nodes who publish and subscribe to this topic.
There should be /counter as Publisher and your "matlab_global_node" as subscriber.

An other way to view the content of a Topic in MATLAB is to execute:

>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}

When you want to end the Subscription execute:

>{{html}}&amp;lt;font size="2">clear countersub {Topic}&amp;lt;/font>{{/html}}

----

**A better way to use subscribe and publish in MATLAB**

It's better to create a specific node with which you subscribe or publish to a specific topic, otherwise MATLAB uses the "matlab_global_node" as subscriber or publisher which isn't as clearly arranged as it should be in a development environment.

To create the node execute:

>{{html}}&amp;lt;font size="2">sub_counter_node = robotics.ros.Node('/sub_counter');&amp;lt;/font>{{/html}}

The command to subscribe to a specific Topics with a Specific node is:

>{{html}}&amp;lt;font size="2">Subscribe_Name = robotics.ros.Subscriber(Node_Name,'{Topic_Name}','{Message_Type}',{Callback_Function};&amp;lt;/font>{{/html}}

>{{html}}&amp;lt;font size="2">Subscriber_Counter = robotics.ros.Subscriber(sub_counter_node,'/counter','std_msgs/Int64',@@exampleHelperROSChatterCallback);&amp;lt;/font>{{/html}}

When you aren't shure about the messagetype of the Topic use:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You'll see your "/sub_counter"-node as subscriber if you execute this command after subscribing.

The callback-function will display the latest message. You can also view the latest message if you double-click your "Subscriber_Counter" in the workspace of MATLAB and proceed to the "LatestMessage"-Tab. But you'll have to refresh manually.

Use the "clear"-command to shut down your subscribers and nodes.

----

**Publisher**
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".

>{{html}}&amp;lt;font size="2">rosrun counter_sub counter_sub&amp;lt;/font>{{/html}}

Now we need to create a publisher node which is publishing to the Topic the "sub_counter"-Node has subscribed to.

You can use this to create a Publisher:

>{{html}}&amp;lt;font size="2">counterpub = rospublisher('/counter');&amp;lt;/font>{{/html}}

But as said before it's better create a specific node which will Publish to the "/counter"-Topic:

>{{html}}&amp;lt;font size="2">counter_node = robotics.ros.Node('/counter');&amp;lt;/font>{{/html}}

>{{html}}&amp;lt;font size="2">counterpub = robotics.ros.Publisher(counter_node,'/counter','std_msgs/Int64');;&amp;lt;/font>{{/html}}

//Note: "/counter" describes the name of the node in the first command and the name of the Topic in the Publisher-Command.//

Because we want a countinous stream of messages the callback function of the subscriber can react to we write a Script this time.
The Script looks like this:

>{{html}}&amp;lt;font size="2">msg = rosmessage(counterpub);&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font&gt;{{/html}}
>{{html}}&amp;lt;font size="2">while(1)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">send(counterpub,msg)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">msg.Data = msg.Data+1;&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">pause(1)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">end&amp;lt;/font>{{/html}}

The publishing command is very similar to the subscription command.
But additionally we need to create a message for the Publisher to publish.

>{{html}}&amp;lt;font size="2">msg = rosmessage({publisher});&amp;lt;/font>{{/html}}

And the content of the message.

>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}

Finally we need to execute the send command to publish a cretain message via a certain publisher.

>{{html}}&amp;lt;font size="2">send({publisher},{message})&amp;lt;/font>{{/html}}

In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.

If you start the Script you should see your counter_sub node react in the VM.

When you execute:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You should be able to see that the "/counter"-node is the publisher now.

----

https://de.mathworks.com/help/robotics/ref/rosmessage.html

https://de.mathworks.com/help/robotics/ref/robotics.subscriber.html

@


15.3
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher.WebHome" locale="">
  &lt;web>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>en&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.FredericKovacs&lt;/creator>
  &lt;creationDate>1537258246000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.WebHome&lt;/parent>
  &lt;author>XWiki.FredericKovacs&lt;/author>
  &lt;contentAuthor>XWiki.FredericKovacs&lt;/contentAuthor>
  &lt;date>1541506303000&lt;/date>
  &lt;contentUpdateDate>1541506303000&lt;/contentUpdateDate>
  &lt;version>15.3&lt;/version>
  &lt;title>Step 2: Create a simple subscriber and publisher&lt;/title>
  &lt;comment/>
  &lt;minorEdit>true&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}
{{documentTree root="document:$doc.documentReference" showAttachments="false"/}}
{{/velocity}}

----

//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//

//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:
[[https:~~/~~/de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html>>https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//]]//

----

=== MATLAB ===

----

Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.

**Subscriber:**
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.

>{{html}}&amp;lt;font size="2">rosrun counter counter&amp;lt;/font>{{/html}}

Subscribe with the following command:

In general:

>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font&gt;{{/html}}

For this example:

>{{html}}&amp;lt;font size="2">sub_counter = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}

MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.

Open another Terminal in your VM and execute the command:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You'll see the nodes who publish and subscribe to this topic.
There should be /counter as Publisher and your "matlab_global_node" as subscriber.

An other way to view the content of a Topic in MATLAB is to execute:

>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}

When you want to end the Subscription execute:

>{{html}}&amp;lt;font size="2">clear countersub {Topic}&amp;lt;/font>{{/html}}

----

**A better way to use subscribe and publish in MATLAB**

It's better to create a specific node with which you subscribe or publish to a specific topic, otherwise MATLAB uses the "matlab_global_node" as subscriber or publisher which isn't as clearly arranged as it should be in a development environment.

To create the node execute:

>{{html}}&amp;lt;font size="2">sub_counter_node = robotics.ros.Node('/sub_counter');&amp;lt;/font>{{/html}}

The command to subscribe to a specific Topics with a Specific node is:

>{{html}}&amp;lt;font size="2">Subscribe_Name = robotics.ros.Subscriber(Node_Name,'{Topic_Name}','{Message_Type}',{Callback_Function};&amp;lt;/font>{{/html}}

>{{html}}&amp;lt;font size="2">Subscriber_Counter = robotics.ros.Subscriber(sub_counter_node,'/counter','std_msgs/Int64',@@exampleHelperROSChatterCallback);&amp;lt;/font>{{/html}}

When you aren't shure about the messagetype of the Topic use:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You'll see your "/sub_counter"-node as subscriber if you execute this command after subscribing.

The callback-function will display the latest message. You can also view the latest message if you double-click your "Subscriber_Counter" in the workspace of MATLAB and proceed to the "LatestMessage"-Tab. But you'll have to refresh manually.

Use the "clear"-command to shut down your subscribers and nodes.

----

**Publisher**
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".

>{{html}}&amp;lt;font size="2">rosrun counter_sub counter_sub&amp;lt;/font>{{/html}}

Now we need to create a publisher node which is publishing to the Topic the "sub_counter"-Node has subscribed to.

You can use this to create a Publisher:

>{{html}}&amp;lt;font size="2">counterpub = rospublisher('/counter');&amp;lt;/font>{{/html}}

But as said before it's better create a specific node which will Publish to the "/counter"-Topic:

>{{html}}&amp;lt;font size="2">counter_node = robotics.ros.Node('/counter');&amp;lt;/font>{{/html}}

>{{html}}&amp;lt;font size="2">counterpub = robotics.ros.Publisher(counter_node,'/counter','std_msgs/Int64');;&amp;lt;/font>{{/html}}

//Note: "/counter" describes the name of the node in the first command and the name of the Topic in the Publisher-Command.//

Because we want a countinous stream of messages the callback function of the subscriber can react to we write a Script this time.
The Script looks like this:

>{{html}}&amp;lt;font size="2">msg = rosmessage(counterpub);&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">while(1)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">send(counterpub,msg)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">msg.Data = msg.Data+1;&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">pause(1)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">end&amp;lt;/font>{{/html}}

The publishing command is very similar to the subscription command.
But additionally we need to create a message for the Publisher to publish.

>{{html}}&amp;lt;font size="2">msg = rosmessage({publisher});&amp;lt;/font>{{/html}}

And the content of the message.

>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}

Finally we need to execute the send command to publish a cretain message via a certain publisher.

>{{html}}&amp;lt;font size="2">send({publisher},{message})&amp;lt;/font>{{/html}}

In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.

If you start the Script you should see your counter_sub node react in the VM.

When you execute:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You should be able to see that the "/counter"-node is the publisher now.

----

https://de.mathworks.com/help/robotics/ref/rosmessage.html

https://de.mathworks.com/help/robotics/ref/robotics.subscriber.html

https://de.mathworks.com/help/robotics/ref/robotics.publisher.html&lt;/content>
&lt;/xwikidoc>@


15.2
log
@@
text
@d11 5
a15 5
  &lt;author>XWiki.SvenHoyer&lt;/author>
  &lt;contentAuthor&gt;XWiki.SvenHoyer&lt;/contentAuthor>
  &lt;date>1540975535000&lt;/date>
  &lt;contentUpdateDate>1540975535000&lt;/contentUpdateDate>
  &lt;version>15.2&lt;/version>
d151 1
a151 1
You should be able to see that the "matlab_global_node" is the publisher now.
@


15.1
log
@@
text
@d6 1
a6 1
  &lt;defaultLanguage>de&lt;/defaultLanguage>
d11 5
a15 5
  &lt;author>XWiki.FredericKovacs&lt;/author>
  &lt;contentAuthor>XWiki.FredericKovacs&lt;/contentAuthor>
  &lt;date>1540907560000&lt;/date>
  &lt;contentUpdateDate>1540907560000&lt;/contentUpdateDate>
  &lt;version>15.1&lt;/version>
d18 1
a18 1
  &lt;minorEdit>false&lt;/minorEdit>
d21 138
a158 138
  &lt;content>{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&amp;#xd;
&amp;#xd;
//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&amp;#xd;
[[https:~~/~~/de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html>>https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//]]//&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== MATLAB ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.&amp;#xd;
&amp;#xd;
**Subscriber:**&amp;#xd;
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Subscribe with the following command:&amp;#xd;
&amp;#xd;
In general:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
For this example:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">sub_counter = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.&amp;#xd;
&amp;#xd;
Open another Terminal in your VM and execute the command:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see the nodes who publish and subscribe to this topic.&amp;#xd;
There should be /counter as Publisher and your "matlab_global_node" as subscriber.&amp;#xd;
&amp;#xd;
An other way to view the content of a Topic in MATLAB is to execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
When you want to end the Subscription execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">clear countersub {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**A better way to use subscribe and publish in MATLAB**&amp;#xd;
&amp;#xd;
It's better to create a specific node with which you subscribe or publish to a specific topic, otherwise MATLAB uses the "matlab_global_node" as subscriber or publisher which isn't as clearly arranged as it should be in a development environment.&amp;#xd;
&amp;#xd;
To create the node execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">sub_counter_node = robotics.ros.Node('/sub_counter');&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
The command to subscribe to a specific Topics with a Specific node is:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">Subscribe_Name = robotics.ros.Subscriber(Node_Name,'{Topic_Name}','{Message_Type}',{Callback_Function};&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">Subscriber_Counter = robotics.ros.Subscriber(sub_counter_node,'/counter','std_msgs/Int64',@@exampleHelperROSChatterCallback);&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
When you aren't shure about the messagetype of the Topic use:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see your "/sub_counter"-node as subscriber if you execute this command after subscribing.&amp;#xd;
&amp;#xd;
The callback-function will display the latest message. You can also view the latest message if you double-click your "Subscriber_Counter" in the workspace of MATLAB and proceed to the "LatestMessage"-Tab. But you'll have to refresh manually.&amp;#xd;
&amp;#xd;
Use the "clear"-command to shut down your subscribers and nodes.&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**Publisher**&amp;#xd;
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter_sub counter_sub&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Now we need to create a publisher node which is publishing to the Topic the "sub_counter"-Node has subscribed to.&amp;#xd;
&amp;#xd;
You can use this to create a Publisher:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counterpub = rospublisher('/counter');&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
But as said before it's better create a specific node which will Publish to the "/counter"-Topic:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counter_node = robotics.ros.Node('/counter');&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counterpub = robotics.ros.Publisher(counter_node,'/counter','std_msgs/Int64');;&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
//Note: "/counter" describes the name of the node in the first command and the name of the Topic in the Publisher-Command.//&amp;#xd;
&amp;#xd;
Because we want a countinous stream of messages the callback function of the subscriber can react to we write a Script this time.&amp;#xd;
The Script looks like this:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage(counterpub);&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">while(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">send(counterpub,msg)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = msg.Data+1;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">pause(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">end&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
The publishing command is very similar to the subscription command.&amp;#xd;
But additionally we need to create a message for the Publisher to publish.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage({publisher});&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
And the content of the message.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Finally we need to execute the send command to publish a cretain message via a certain publisher.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">send({publisher},{message})&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.&amp;#xd;
&amp;#xd;
If you start the Script you should see your counter_sub node react in the VM.&amp;#xd;
&amp;#xd;
When you execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You should be able to see that the "matlab_global_node" is the publisher now.&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/rosmessage.html&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/robotics.subscriber.html&amp;#xd;
&amp;#xd;
@


14.1
log
@@
text
@d13 3
a15 3
  &lt;date>1540907528000&lt;/date>
  &lt;contentUpdateDate>1540907525000&lt;/contentUpdateDate>
  &lt;version>14.1&lt;/version>
a72 1
*A better way to use subscribe and publish in MATLAB*&amp;#xd;
d74 2
d108 1
d117 1
a117 1
//Note: "/counter" describes the name of the node in the first command and the name of the Topic in the Publisher-Command.&amp;#xd;
@


13.3
log
@@
text
@d13 1
a13 1
  &lt;date>1540907525000&lt;/date>
d15 1
a15 1
  &lt;version>13.3&lt;/version>
d18 1
a18 1
  &lt;minorEdit>true&lt;/minorEdit>
@


13.2
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher.WebHome" locale="">
  &lt;web>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.FredericKovacs&lt;/creator>
  &lt;creationDate>1537258246000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.WebHome&lt;/parent>
  &lt;author>XWiki.FredericKovacs&lt;/author>
  &lt;contentAuthor>XWiki.FredericKovacs&lt;/contentAuthor>
  &lt;date>1540906351000&lt;/date>
  &lt;contentUpdateDate>1540906351000&lt;/contentUpdateDate>
  &lt;version>13.2&lt;/version>
  &lt;title>Step 2: Create a simple subscriber and publisher&lt;/title>
  &lt;comment/>
  &lt;minorEdit>true&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>{{velocity}}&amp;#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false"/}}&amp;#xd;
{{/velocity}}&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&amp;#xd;
&amp;#xd;
//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&amp;#xd;
[[https:~~/~~/de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html>>https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//]]//&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== MATLAB ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.&amp;#xd;
&amp;#xd;
**Subscriber:**&amp;#xd;
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Subscribe with the following command:&amp;#xd;
&amp;#xd;
In general:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
For this example:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">sub_counter = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.&amp;#xd;
&amp;#xd;
Open another Terminal in your VM and execute the command:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see the nodes who publish and subscribe to this topic.&amp;#xd;
There should be /counter as Publisher and your "matlab_global_node" as subscriber.&amp;#xd;
&amp;#xd;
An other way to view the content of a Topic in MATLAB is to execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
When you want to end the Subscription execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">clear countersub {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
----&amp;#xd;
*A better way to use subscribe and publish in MATLAB*&amp;#xd;
&amp;#xd;
It's better to create a specific node with which you subscribe or publish to a specific topic, otherwise MATLAB uses the "matlab_global_node" as subscriber or publisher which isn't as clearly arranged as it should be in a development environment.&amp;#xd;
&amp;#xd;
To create the node execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">sub_counter_node = robotics.ros.Node('/sub_counter');&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
The command to subscribe to a specific Topics with a Specific node is:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">Subscribe_Name = robotics.ros.Subscriber(Node_Name,'{Topic_Name}','{Message_Type}',{Callback_Function};&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">Subscriber_Counter = robotics.ros.Subscriber(sub_counter_node,'/counter','std_msgs/Int64',@@exampleHelperROSChatterCallback);&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
When you aren't shure about the messagetype of the Topic use:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see your "/sub_counter"-node as subscriber if you execute this command after subscribing.&amp;#xd;
&amp;#xd;
The callback-function will display the latest message. You can also view the latest message if you double-click your "Subscriber_Counter" in the workspace of MATLAB and proceed to the "LatestMessage"-Tab. But you'll have to refresh manually.&amp;#xd;
&amp;#xd;
Use the "clear"-command to shut down your subscribers and nodes.&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**Publisher**&amp;#xd;
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter_sub counter_sub&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Now we need to create a publisher node which is publishing to the Topic the "counter_sub"-Node has subscribed to.&amp;#xd;
Because we want a countinous stream of messages the callback function can react to we write it in a Script this time.&amp;#xd;
&amp;#xd;
The Script looks like this:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counterpub = rospublisher('/counter');&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage(counterpub);&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">while(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">send(counterpub,msg)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = msg.Data+1;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">pause(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">end&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
The publishing command is very similar to the subscription command.&amp;#xd;
But additionally we need to create a message for the Publisher to publish.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage({publisher});&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
And the content of the message.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Finally we need to execute the send command to publish a cretain message via a certain publisher.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">send({publisher},{message})&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.&amp;#xd;
&amp;#xd;
If you start the Script you should see your counter_sub node react in the VM.&amp;#xd;
&amp;#xd;
When you execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You should be able to see that the "matlab_global_node" is the publisher now.&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/rosmessage.html&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/robotics.subscriber.html&amp;#xd;
&amp;#xd;
https://de.mathworks.com/help/robotics/ref/robotics.publisher.html&lt;/content>
&lt;/xwikidoc>@


13.1
log
@@
text
@d13 3
a15 3
  &lt;date>1540905993000&lt;/date>
  &lt;contentUpdateDate>1540905993000&lt;/contentUpdateDate>
  &lt;version>13.1&lt;/version>
d18 1
a18 1
  &lt;minorEdit>false&lt;/minorEdit>
d71 1
d73 2
d78 1
d93 1
a93 1
The callbackfunction will display the latest message. You can also see the latestmessage if you double-click your "Subscriber_Counter" in the workspace of MATLAB and proceed to LatestMessage. But you'll have to refresh manually.&amp;#xd;
d98 1
@


12.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537432276000&lt;/date>
  &lt;contentUpdateDate>1537432276000&lt;/contentUpdateDate>
  &lt;version>12.1&lt;/version>
d21 1
a21 2
  &lt;content>&amp;#xd;
{{velocity}}&amp;#xd;
d53 1
a53 1
>{{html}}&amp;lt;font size="2">countersub = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
d70 3
a72 1
>{{html}}&amp;lt;font size="2">clear countersub{Topic}&amp;lt;/font>{{/html}}&amp;#xd;
d74 2
d77 17
@


11.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537432232000&lt;/date>
  &lt;contentUpdateDate>1537432232000&lt;/contentUpdateDate>
  &lt;version>11.1&lt;/version>
d21 2
a22 1
  &lt;content> {{velocity}}&amp;#xd;
d25 1
d27 1
@


10.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537267760000&lt;/date>
  &lt;contentUpdateDate>1537267760000&lt;/contentUpdateDate>
  &lt;version>10.1&lt;/version>
d21 5
a25 1
  &lt;content>//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&amp;#xd;
d114 1
@


9.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher.WebHome" locale="">
  &lt;web>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.FredericKovacs&lt;/creator>
  &lt;creationDate>1537258246000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.WebHome&lt;/parent>
  &lt;author>XWiki.FredericKovacs&lt;/author>
  &lt;contentAuthor>XWiki.FredericKovacs&lt;/contentAuthor>
  &lt;date>1537267108000&lt;/date>
  &lt;contentUpdateDate>1537267108000&lt;/contentUpdateDate>
  &lt;version>9.1&lt;/version>
  &lt;title>Step 2: Create a simple subscriber and publisher&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//

//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:
[[https:~~/~~/de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html>>https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//]]//

----

=== MATLAB ===

----

Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.

**Subscriber:**
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.

>{{html}}&amp;lt;font size="2">rosrun counter counter&amp;lt;/font>{{/html}}

Subscribe with the following command:

In general:

>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}

For this example:

>{{html}}&amp;lt;font size="2">countersub = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}

MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.

Open another Terminal in your VM and execute the command:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You'll see the nodes who publish and subscribe to this topic.
There should be /counter as Publisher and your "matlab_global_node" as subscriber.

An other way to view the content of a Topic in MATLAB is to execute:

>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}

When you want to end the Subscription execute:

>{{html}}&amp;lt;font size="2">clear countersub{Topic}&amp;lt;/font>{{/html}}


**Publisher**
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".

>{{html}}&amp;lt;font size="2">rosrun counter_sub counter_sub&amp;lt;/font>{{/html}}

Now we need to create a publisher node which is publishing to the Topic the "counter_sub"-Node has subscribed to.
Because we want a countinous stream of messages the callback function can react to we write it in a Script this time.

The Script looks like this:

>{{html}}&amp;lt;font size="2">counterpub = rospublisher('/counter');&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">msg = rosmessage(counterpub);&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">while(1)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">send(counterpub,msg)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">msg.Data = msg.Data+1;&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">pause(1)&amp;lt;/font>{{/html}}
>{{html}}&amp;lt;font size="2">end&amp;lt;/font>{{/html}}

The publishing command is very similar to the subscription command.
But additionally we need to create a message for the Publisher to publish.

>{{html}}&amp;lt;font size="2">msg = rosmessage({publisher});&amp;lt;/font>{{/html}}

And the content of the message.

>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}

Finally we need to execute the send command to publish a cretain message via a certain publisher.

>{{html}}&amp;lt;font size="2">send({publisher},{message})&amp;lt;/font>{{/html}}

In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.

If you start the Script you should see your counter_sub node react in the VM.

When you execute:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You should be able to see that the "matlab_global_node" is the publisher now.

----

=== Simulink ===

----

**Subscriber**

**Publisher**&lt;/content>
&lt;/xwikidoc>@


8.1
log
@@
text
@d13 4
a16 4
  &lt;date>1537266701000&lt;/date>
  &lt;contentUpdateDate>1537266701000&lt;/contentUpdateDate>
  &lt;version>8.1&lt;/version>
  &lt;title>Create a simple subscriber and publisher&lt;/title>
@


7.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537266672000&lt;/date>
  &lt;contentUpdateDate>1537266669000&lt;/contentUpdateDate>
  &lt;version>7.1&lt;/version>
d21 96
a116 96
  &lt;content>//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&amp;#xd;
&amp;#xd;
//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&amp;#xd;
https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== MATLAB ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.&amp;#xd;
&amp;#xd;
**Subscriber:**&amp;#xd;
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Subscribe with the following command:&amp;#xd;
&amp;#xd;
In general:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
For this example:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">countersub = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.&amp;#xd;
&amp;#xd;
Open another Terminal in your VM and execute the command:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see the nodes who publish and subscribe to this topic.&amp;#xd;
There should be /counter as Publisher and your "matlab_global_node" as subscriber.&amp;#xd;
&amp;#xd;
An other way to view the content of a Topic in MATLAB is to execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
When you want to end the Subscription execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2"&gt;clear countersub{Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
&amp;#xd;
**Publisher**&amp;#xd;
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rosrun counter_sub counter_sub&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Now we need to create a publisher node which is publishing to the Topic the "counter_sub"-Node has subscribed to.&amp;#xd;
Because we want a countinous stream of messages the callback function can react to we write it in a Script this time.&amp;#xd;
&amp;#xd;
The Script looks like this:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">counterpub = rospublisher('/counter');&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage(counterpub);&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">while(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">send(counterpub,msg)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = msg.Data+1;&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">pause(1)&amp;lt;/font>{{/html}}&amp;#xd;
>{{html}}&amp;lt;font size="2">end&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
The publishing command is very similar to the subscription command.&amp;#xd;
But additionally we need to create a message for the Publisher to publish.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg = rosmessage({publisher});&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
And the content of the message.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">msg.Data = 0;&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
Finally we need to execute the send command to publish a cretain message via a certain publisher.&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">send({publisher},{message})&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.&amp;#xd;
&amp;#xd;
If you start the Script you should see your counter_sub node react in the VM.&amp;#xd;
&amp;#xd;
When you execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You should be able to see that the "matlab_global_node" is the publisher now.&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== Simulink ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**Subscriber**&amp;#xd;
&amp;#xd;
@


6.2
log
@@
text
@d13 1
a13 1
  &lt;date>1537266669000&lt;/date>
d15 1
a15 1
  &lt;version>6.2&lt;/version>
d18 1
a18 1
  &lt;minorEdit>true&lt;/minorEdit>
@


6.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537263537000&lt;/date>
  &lt;contentUpdateDate>1537263537000&lt;/contentUpdateDate>
  &lt;version>6.1&lt;/version>
d18 1
a18 1
  &lt;minorEdit>false&lt;/minorEdit>
d24 1
a24 1
https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//////////////////&amp;#xd;
d104 1
@


5.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher.WebHome" locale="">
  &lt;web>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.Create a simple subscriber and publisher&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>de&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.FredericKovacs&lt;/creator>
  &lt;creationDate>1537258246000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.WebHome&lt;/parent>
  &lt;author>XWiki.FredericKovacs&lt;/author&gt;
  &lt;contentAuthor>XWiki.FredericKovacs&lt;/contentAuthor>
  &lt;date>1537260870000&lt;/date>
  &lt;contentUpdateDate>1537260870000&lt;/contentUpdateDate>
  &lt;version>5.1&lt;/version>
  &lt;title>Create a simple subscriber and publisher&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&amp;#xd;
&amp;#xd;
//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&amp;#xd;
https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//////////&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== MATLAB ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.&amp;#xd;
&amp;#xd;
**Subscriber:**&amp;#xd;
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.&amp;#xd;
&amp;#xd;
Subscribe with the following command:&amp;#xd;
&amp;#xd;
In general:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
For this example:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">countersub = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.&amp;#xd;
&amp;#xd;
Open another Terminal in your VM and execute the command:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
You'll see the nodes who publish and subscribe to this topic.&amp;#xd;
There should be /counter as Publisher and your "matlab_global_node" as subscriber.&amp;#xd;
&amp;#xd;
An other way to view the content of a Topic in MATLAB is to execute:&amp;#xd;
&amp;#xd;
>{{html}}&amp;lt;font size="2">rostopic echo {Topic}&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
**Publisher**&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== Simulink ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**Subscriber**&amp;#xd;
&amp;#xd;
**Publisher**&lt;/content>
&lt;/xwikidoc>@


4.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537260800000&lt;/date>
  &lt;contentUpdateDate>1537260800000&lt;/contentUpdateDate>
  &lt;version>4.1&lt;/version>
d21 49
a69 49
  &lt;content>//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//

//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:
https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html////////

----

=== MATLAB ===

----

Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.

**Subscriber:**
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.

Subscribe with the following command:

In general:

>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}

For this example:

>{{html}}&amp;lt;font size="2">countersub = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}

MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.

Open another Terminal in your VM and execute the command:

>{{html}}&amp;lt;font size="2">rostopic info counter&amp;lt;/font>{{/html}}

You'll see the nodes who publish and subscribe to this topic.
There should be /counter as Publisher and your "matlab_global_node" as subscriber.

An other way to view the content of a Topic in MATLAB is to execute:

~>~{~{html}}&amp;lt;font size="2">rostopic echo counter&amp;lt;/font>~{~{/html}}

**Publisher**

----

=== Simulink ===

----

**Subscriber**

@


3.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537260331000&lt;/date>
  &lt;contentUpdateDate>1537260331000&lt;/contentUpdateDate>
  &lt;version>3.1&lt;/version>
d21 49
a69 34
  &lt;content>//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&amp;#xd;
&amp;#xd;
//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&amp;#xd;
https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html////&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== MATLAB ===&amp;#xd;
----&amp;#xd;
Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.&amp;#xd;
&amp;#xd;
**Subscriber:**&amp;#xd;
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.&amp;#xd;
&amp;#xd;
Subscribe with the following command:&amp;#xd;
&amp;#xd;
In general:&amp;#xd;
>{{html}}&amp;lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
For this example:&amp;#xd;
>{{html}}&amp;lt;font size="2">countersub = rossubscriber('/counter', @@exampleHelperROSChatterCallback)&amp;lt;/font>{{/html}}&amp;#xd;
&amp;#xd;
MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.&amp;#xd;
&amp;#xd;
**Publisher**&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
=== Simulink ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
**Subscriber**&amp;#xd;
&amp;#xd;
@


2.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537258414000&lt;/date>
  &lt;contentUpdateDate>1537258414000&lt;/contentUpdateDate>
  &lt;version>2.1&lt;/version>
d21 1
a21 2
  &lt;content>&amp;#xd;
//Note: You need to complete the ROS-GettingStarted first to start this tutorial![link will come soon]//&amp;#xd;
d23 2
a24 2
//To get further information to the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&amp;#xd;
https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//&amp;#xd;
d27 2
a28 1
===MATLAB===&amp;#xd;
d30 1
d32 2
a33 1
**Subscriber**&amp;#xd;
d35 10
d48 3
a50 1
===Simulink===&amp;#xd;
@


1.1
log
@@
text
@d13 3
a15 3
  &lt;date>1537258246000&lt;/date>
  &lt;contentUpdateDate>1537258246000&lt;/contentUpdateDate>
  &lt;version>1.1&lt;/version>
a21 1
&amp;#xd;
d26 1
d31 1
a31 1
====Subscriber====&amp;#xd;
d33 1
a33 1
====Publisher====&amp;#xd;
d37 5
a41 1
----&lt;/content>
@
</versions>
  <parent>Projects.MoRoP.Spezifikationen.Software.ROS.MATLAB/SIMULINK.Getting Started with ROS ind MATLAB/SIMULINK.WebHome</parent>
  <author>XWiki.FredericKovacs</author>
  <contentAuthor>XWiki.FredericKovacs</contentAuthor>
  <date>1541506324000</date>
  <contentUpdateDate>1541506324000</contentUpdateDate>
  <version>17.1</version>
  <title>Step 2: Create a simple subscriber and publisher</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}&#xd;
{{documentTree root="document:$doc.documentReference" showAttachments="false"/}}&#xd;
{{/velocity}}&#xd;
&#xd;
----&#xd;
&#xd;
//Note: You need to complete the superior "ROS GettingStarted" first to start this tutorial![link will come soon], because you will need the nodes you created yourself in the examples.//&#xd;
&#xd;
//To get further information about the MATLAB/SIMULINK handling of ROS-Publisher and Subscribers go to:&#xd;
[[https:~~/~~/de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html>>https://de.mathworks.com/help/robotics/examples/exchange-data-with-ros-publishers.html//]]//&#xd;
&#xd;
----&#xd;
&#xd;
=== MATLAB ===&#xd;
&#xd;
----&#xd;
&#xd;
Intialize the ROS-Core in your VM and the "matlab_global_node" on your Host-System.&#xd;
&#xd;
**Subscriber:**&#xd;
Now initialze the counter node you've created in the superior "ROS GettingStarted" I've linked above in your VM.&#xd;
&#xd;
>{{html}}&lt;font size="2">rosrun counter counter&lt;/font>{{/html}}&#xd;
&#xd;
Subscribe with the following command:&#xd;
&#xd;
In general:&#xd;
&#xd;
>{{html}}&lt;font size="2">{Var_Name} = rossubscriber('{Topic}', @exampleHelperROSChatterCallback)&lt;/font>{{/html}}&#xd;
&#xd;
For this example:&#xd;
&#xd;
>{{html}}&lt;font size="2">sub_counter = rossubscriber('/counter', @exampleHelperROSChatterCallback)&lt;/font>{{/html}}&#xd;
&#xd;
MATLAB will save the message content to the variable counter_sub each time when there is a new one published to the Topic "counter" and execute the Callback Function "exampleHelperROSChatterCallback" wich is basically just displaying the content of the message.&#xd;
&#xd;
Open another Terminal in your VM and execute the command:&#xd;
&#xd;
>{{html}}&lt;font size="2">rostopic info counter&lt;/font>{{/html}}&#xd;
&#xd;
You'll see the nodes who publish and subscribe to this topic.&#xd;
There should be /counter as Publisher and your "matlab_global_node" as subscriber.&#xd;
&#xd;
An other way to view the content of a Topic in MATLAB is to execute:&#xd;
&#xd;
>{{html}}&lt;font size="2">rostopic echo {Topic}&lt;/font>{{/html}}&#xd;
&#xd;
When you want to end the Subscription execute:&#xd;
&#xd;
>{{html}}&lt;font size="2">clear countersub {Topic}&lt;/font>{{/html}}&#xd;
&#xd;
----&#xd;
&#xd;
**A better way to use subscribe and publish in MATLAB**&#xd;
&#xd;
It's better to create a specific node with which you subscribe or publish to a specific topic, otherwise MATLAB uses the "matlab_global_node" as subscriber or publisher which isn't as clearly arranged as it should be in a development environment.&#xd;
&#xd;
To create the node execute:&#xd;
&#xd;
>{{html}}&lt;font size="2">sub_counter_node = robotics.ros.Node('/sub_counter');&lt;/font>{{/html}}&#xd;
&#xd;
The command to subscribe to a specific Topics with a Specific node is:&#xd;
&#xd;
>{{html}}&lt;font size="2">Subscribe_Name = robotics.ros.Subscriber(Node_Name,'{Topic_Name}','{Message_Type}',{Callback_Function};&lt;/font>{{/html}}&#xd;
&#xd;
>{{html}}&lt;font size="2">Subscriber_Counter = robotics.ros.Subscriber(sub_counter_node,'/counter','std_msgs/Int64',@exampleHelperROSChatterCallback);&lt;/font>{{/html}}&#xd;
&#xd;
When you aren't shure about the messagetype of the Topic use:&#xd;
&#xd;
>{{html}}&lt;font size="2">rostopic info counter&lt;/font>{{/html}}&#xd;
&#xd;
You'll see your "/sub_counter"-node as subscriber if you execute this command after subscribing.&#xd;
&#xd;
The callback-function will display the latest message. You can also view the latest message if you double-click your "Subscriber_Counter" in the workspace of MATLAB and proceed to the "LatestMessage"-Tab. But you'll have to refresh manually.&#xd;
&#xd;
Use the "clear"-command to shut down your subscribers and nodes.&#xd;
&#xd;
----&#xd;
&#xd;
**Publisher**&#xd;
Before we create a Publisher in MATLAB close the "/counter"-Publisher in your VM and start the subscription node you've created in the superior "ROS GettingStarted".&#xd;
&#xd;
>{{html}}&lt;font size="2">rosrun counter_sub counter_sub&lt;/font>{{/html}}&#xd;
&#xd;
Now we need to create a publisher node which is publishing to the Topic the "sub_counter"-Node has subscribed to.&#xd;
&#xd;
You can use this to create a Publisher:&#xd;
&#xd;
>{{html}}&lt;font size="2">counterpub = rospublisher('/counter');&lt;/font>{{/html}}&#xd;
&#xd;
But as said before it's better create a specific node which will Publish to the "/counter"-Topic:&#xd;
&#xd;
>{{html}}&lt;font size="2">counter_node = robotics.ros.Node('/counter');&lt;/font>{{/html}}&#xd;
&#xd;
>{{html}}&lt;font size="2">counterpub = robotics.ros.Publisher(counter_node,'/counter','std_msgs/Int64');;&lt;/font>{{/html}}&#xd;
&#xd;
//Note: "/counter" describes the name of the node in the first command and the name of the Topic in the Publisher-Command.//&#xd;
&#xd;
Because we want a countinous stream of messages the callback function of the subscriber can react to we write a Script this time.&#xd;
The Script looks like this:&#xd;
&#xd;
>{{html}}&lt;font size="2">msg = rosmessage(counterpub);&lt;/font>{{/html}}&#xd;
>{{html}}&lt;font size="2">msg.Data = 0;&lt;/font>{{/html}}&#xd;
>{{html}}&lt;font size="2">while(1)&lt;/font>{{/html}}&#xd;
>{{html}}&lt;font size="2">send(counterpub,msg)&lt;/font>{{/html}}&#xd;
>{{html}}&lt;font size="2">msg.Data = msg.Data+1;&lt;/font>{{/html}}&#xd;
>{{html}}&lt;font size="2">pause(1)&lt;/font>{{/html}}&#xd;
>{{html}}&lt;font size="2">end&lt;/font>{{/html}}&#xd;
&#xd;
The publishing command is very similar to the subscription command.&#xd;
But additionally we need to create a message for the Publisher to publish.&#xd;
&#xd;
>{{html}}&lt;font size="2">msg = rosmessage({publisher});&lt;/font>{{/html}}&#xd;
&#xd;
And the content of the message.&#xd;
&#xd;
>{{html}}&lt;font size="2">msg.Data = 0;&lt;/font>{{/html}}&#xd;
&#xd;
Finally we need to execute the send command to publish a cretain message via a certain publisher.&#xd;
&#xd;
>{{html}}&lt;font size="2">send({publisher},{message})&lt;/font>{{/html}}&#xd;
&#xd;
In this example we add a loop that increments the value of the message content with every loop and a 1 second delay in between ever incrementation to have a continious stream of messages published to the topic.&#xd;
&#xd;
If you start the Script you should see your counter_sub node react in the VM.&#xd;
&#xd;
When you execute:&#xd;
&#xd;
>{{html}}&lt;font size="2">rostopic info counter&lt;/font>{{/html}}&#xd;
&#xd;
You should be able to see that the "/counter"-node is the publisher now.&#xd;
&#xd;
----&#xd;
&#xd;
https://de.mathworks.com/help/robotics/ref/rosmessage.html&#xd;
&#xd;
https://de.mathworks.com/help/robotics/ref/robotics.subscriber.html&#xd;
&#xd;
https://de.mathworks.com/help/robotics/ref/robotics.publisher.html</content>
</xwikidoc>