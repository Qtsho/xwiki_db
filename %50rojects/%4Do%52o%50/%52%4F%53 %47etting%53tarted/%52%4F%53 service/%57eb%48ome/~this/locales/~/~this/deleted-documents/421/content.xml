<?xml version='1.1' encoding='UTF-8'?>
<xwikidoc version="1.3" reference="Projects.MoRoP.ROS GettingStarted.ROS service.WebHome" locale="">
  <web>Projects.MoRoP.ROS GettingStarted.ROS service</web>
  <name>WebHome</name>
  <language/>
  <defaultLanguage>en</defaultLanguage>
  <translation>0</translation>
  <creator>XWiki.DavidDudzik</creator>
  <creationDate>1545220035000</creationDate>
  <versions>head	13.1;
access;
symbols;
locks; strict;
comment	@# @;


13.1
date	2019.02.21.09.47.58;	author XWiki_2EDavidDudzik;	state full;
branches;
next	12.1;

12.1
date	2019.02.21.09.45.50;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	11.1;

11.1
date	2019.02.21.09.42.35;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	10.1;

10.1
date	2019.02.21.09.40.20;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	9.1;

9.1
date	2019.02.21.09.35.40;	author XWiki_2EDavidDudzik;	state full;
branches;
next	8.1;

8.1
date	2018.12.19.12.49.13;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	7.2;

7.2
date	2018.12.19.12.41.56;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	7.1;

7.1
date	2018.12.19.12.27.12;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	6.1;

6.1
date	2018.12.19.12.23.09;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	5.1;

5.1
date	2018.12.19.12.13.59;	author XWiki_2EDavidDudzik;	state full;
branches;
next	4.1;

4.1
date	2018.12.19.12.08.50;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	3.1;

3.1
date	2018.12.19.12.00.48;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	2.1;

2.1
date	2018.12.19.11.50.18;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	1.1;

1.1
date	2018.12.19.11.47.15;	author XWiki_2EDavidDudzik;	state diff;
branches;
next	;


desc
@@


13.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.ROS GettingStarted.ROS service.WebHome" locale="">
  &lt;web>Projects.MoRoP.ROS GettingStarted.ROS service&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>en&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.DavidDudzik&lt;/creator>
  &lt;creationDate>1545220035000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.ROS GettingStarted.WebHome&lt;/parent>
  &lt;author>XWiki.DavidDudzik&lt;/author>
  &lt;contentAuthor>XWiki.DavidDudzik&lt;/contentAuthor>
  &lt;date>1550742478000&lt;/date>
  &lt;contentUpdateDate>1550742350000&lt;/contentUpdateDate>
  &lt;version>13.1&lt;/version>
  &lt;title>ROS service&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>**Sitemap**

----


{{toc start="2"/}}





== Ros service ==

----

Until now, the communication between two nodes was based on messages, that where published under topics. This is the best way for a continous informationstream or data-exchange. But when there is asynchronous task to do, then there are far better solutions.
The simplest solution in ROS is called "service". A service relies on a request-response-system. That means, one node is sending an service-request to a second node, that is offering a service. The second node is doing the task and then sends a response to the first node, whether the task has failed or suceeded.


(% style="text-align:center" %)
[[image:ros_service_basic_struture.png||alt="Fig.1: ROS service basic structure"]]

{{{Fig.1: ROS service basic structure}}}

Mostly services are called by nodes, but now and then it is helpful to call service from the terminal. To get an impression how a service works, usually in the background, a service is going to be called by hand.

First, two terminals are necessary. In terminal one a (% class="mark" %)roscore(%%) has to be launched. In the second terminal a node will be started:


(% class="box infomessage" %)
(((
$ rosrun turtlesim turtlesim_node
)))

After this, run the command

(% class="box infomessage" %)
(((
$ rosservice list
)))

in a third terminal.
Executing this command will show an output similar to this:

(% class="box infomessage" %)
(((
$ rosservice list
/clear
/kill
/reset
/rosout/get_loggers
/rosout/set_logger_level
/spawn
/turtle1/set_pen
/turtle1/teleport_absolute
/turtle1/teleport_relative
/turtlesim/get_loggers
/turtlesim/set_logger_level
)))

At first glance, there are some services that are binded to a specific namespace and others that are located in the root namespace. But every service is provided by a node, so at first it is interesting to which node the services in the root namespace belong to.
To find this out, type in the above command extend by the option (% class="mark" %)-n(%%).

(% class="box infomessage" %)
(((
$ rosservice list -n
)))

 The output is almost the same as before, but now every service in the list is extended by the node that provides it1.
To get more detailed information to a service, use

(% class="box infomessage" %)
(((
$ rosservice info &amp;lt;service-name>
)))

 The output for the service /kill is:

(% class="box infomessage" %)
(((
$ rosservice info /kill
   Node: /turtlesim
   URI: rosrpc:~/~/ubuntu-ros:37541
   Type: turtlesim/Kill
   Args: name
)))

The node that provides this service is the node /turtlesim with the URI rosrpc:~/~/ubuntu-ros:375412. The type of the service is (% class="mark" %)turtlesim/kill(%%), that takes the argument(% class="mark" %) name.(%%)
There are a lot of service-types in ROS. Some service-types are basic datatypes, but others are a structure of basic datatypes or complex datatypes nested in each other. So, it can be very difficult to discover all in- and outputs. The command

(% class="box infomessage" %)
(((
$ rossrv show &amp;lt;service-type>
)))

will help to solve this problem.

For the service-type(% class="mark" %) turtlesim/kill(%%) the output is:

(% class="box infomessage" %)
(((
$ rossrv show turtlesim/Kill
   string name
   ~-~--
)))

Everthing above the three hyphens3 are the input arguments. In this case there is just one string input argument (the name of the isntance) and no output (or returning) argument. A service-type can contain all thinkable permutations of in-and output arguments. So, it is also possible to have a service-type with no input argument and no output argument. Sending a request to a node that controls a peripherie object, may be a comprehensible scenario. The node just needs to know that the service is called and the callback-function has to be executed. The callback function will return a bool (true or false). This may be the only required information for the node, that sent the request. 



=== Call a service from the terminal ===

----

In the previous section the structure of ROS service has been discussed. Now, a service will be called with the above setup. The example will be executed with the service (% class="mark" %)/kill(%%). Previously, the command (% class="mark" %)$ rossrv show(%%) was used to get information about the necessary input arguments.
This service expects the name of the turtle, which should be removed. So the command will be something like this:

(% class="box infomessage" %)
(((
$ rosservice call /kill 'turtle1'
)))

 After executing this command, the turtle in the window will disappear. For a better understanding what happend, type in[^trouble_shooting_rqt]:

(% class="box infomessage" %)
(((
$ rqt_graph
)))

(% style="text-align:center" %)
[[image:ros_service_graph.png]]


(% class="wikigeneratedid" id="HFig.2:Outputofrqt_graphaftercallingtheservice2FSpawn" %)
(((
**Fig.2: Output of rqt_graph after calling the service /Spawn**
)))

Comparing the above figure with rqt_graph/Fig.1 will show, that the node /turtlesim did not disapper. Only the topic /turtle1/cmd_vel is removed from the graph.
To get a new turtle, without restarting the node, use the service /spawn. This might be a good task to get a bit more familiar to the concept of services in ROS. When getting issues, consulte the book A gentle introduction to ROS[^ros_intro], the usage of the service /spawn is described there very well.


=== Example 5: Server-Client-Adder ===

----

(% class="box" %)
(((
This example is inspired from the example http:~/~/wiki.ros.org/ROS/Tutorials/WritingServiceClient. The idea is taken from this tutorial, but the implementation and the description may differ in some points.
)))

 In this example, a adder based on a server-client-relation will be created. The idea is to send two integer values from the client to the server. The server calculates the sum of the two integer values and returns the sum to the client.
the first step is to create a new package with the appropriate dependencies. The proper command is:

(% class="box infomessage" %)
(((
$ catkin_create_pkg calculator roscpp std_msgs message_generation
)))

 The new generated package is called calculator. (% class="mark" %)roscpp(%%) is required to use the C++-API and message_generation will be needed for generating the service-headers during the build process[^msg_generation].


==== **srv-Typedefinition** ====

----

After succesful generation of the new package, the definition of the service is required. First, a new folder has to be created in the diretory of the package.

(% class="box infomessage" %)
(((
$ mkdir -p srv
)))

Then, open a new file with

(% class="box infomessage" %)
(((
$ gedit calc_service.srv
)))

This file will contain the definition of the service. For this example two int64 alues are chosen for the request and also a int64 value for the response. So, enter the following lines in to the editor. 

(% class="box infomessage" %)
(((
int64 a
int64 b
~-~--
int64 sum
)))

(% class="box" %)
(((
Note: The three hyphens are part of the syntax.
)))

 From this file the header will generated during the build-process.



==== **Creating the server-node** ====

----

(% class="wikigeneratedid" id="HThenexttaskiscreatingthenodes.Atfirst2Ctheservernodewillbecreated.Thistakestheresponse2Cdoessomecomputationandthenpassestheresultbacktotheclient.Thesource-codecanlooklikethis:" %)
(((
//The next task is creating the nodes. At first, the server node will be created. This takes the response, does some computation and then passes the result back to the client. The source-code can look like this~://
)))

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "calculator/calc_srv.h"
#include &amp;lt;string>

bool add(calculator::calc_srv::Request  &amp;amp;request, calculator::calc_srv::Response &amp;amp;response){
  response.sum = request.a + request.b;
  ROS_INFO_STREAM("The two integers are: " &amp;lt;&amp;lt; request.a &amp;lt;&amp;lt; " and " &amp;lt;&amp;lt; request.b &amp;lt;&amp;lt; "\n");
  ROS_INFO_STREAM("The calculated sum is " &amp;lt;&amp;lt; response.sum &amp;lt;&amp;lt; "\n");
  return true;
}

int main(int argc, char ~*~*argv)
{  
  ros::init(argc, argv, "server");
  ros::NodeHandle n;

  ros::ServiceServer service = n.advertiseService("calculate", &amp;amp;add);  
  ROS_INFO_STREAM("Server ready.");  
  ros::spin();

  return 0;
}

 
)))

The first two lines include the required header files (% class="mark" %)ros/ros.h (%%)and the new (% class="mark" %)created calculator/calc_srv.h(%%)[^calc_header].
Following this, the function(% class="mark" %) bool add()(%%) is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the (% class="mark" %)class calculator::calc_srv(%%).
Inside the function, the two integers from the object req are added and passed to res.sum. Following, two info-messages are printed to the terminal telling the user what is going on.
The next step is the main-function. At first, the ROS node is initialized as usual. Then, a service-object is created with a member-function of the nodehandle. In the basic configuration it expects two arguments, a servicename and the callback-function. The servicename is chosen as calculate and the callback-function is the one created above. The info-message in the next line is not required, but it is good to know that the server is started.
(% class="mark" %)ros::spin()(%%) is already known from Example 4: Subcriber.


==== **Creating the client-node** ====

After the server-node is created successfully (but not build yet), the client-node follows. This will take the input from the commandline and pass the values to the server. After the computation in the server, the result will be passed back to the client. Then, the client will produce the output in the terminal.
So, the code for this task looks as follows:

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "calculator/calc_srv.h"
#include &amp;lt;boost/lexical_cast.hpp>

int main(int argc, char ~*~*argv){    
\\  if (argc != 3)
  {
    ROS_WARN_STREAM("Enter two int_numbers!");
    return 1;
  }

  ros::init(argc, argv, "calc_client");
  ros::NodeHandle n;  
  ros::ServiceClient client = n.serviceClient&amp;lt;calculator::calc_srv>("calculate");  
  calculator::calc_srv srv;

try{
         srv.request.a = boost::lexical_cast&amp;lt;int>(*(argv+1));
           srv.request.b = boost::lexical_cast&amp;lt;int>(*(argv+2));
         }
  catch(const boost::bad_lexical_cast &amp;amp;){
        ROS_ERROR_STREAM("Enter only INTs!");
        return 1;
      }
\\  if (client.call(srv))
  {
      ROS_INFO_STREAM("Result is: " &amp;lt;&amp;lt; srv.response.sum &amp;lt;&amp;lt; "\n");    
  }
  else{
    ROS_ERROR_STREAM("Something went wrong. Bad response from server.");
    return 1; }
  return 0;
}

 
)))


At the top, the library(% class="mark" %) ros/ros.h" (%%)is included as usual, when using the ROS C++-API. (% class="mark" %)calculator/calc_srv.h (%%)provides the informations about the service, which was created in srv-Typedefinition. The boost-library is required for the typecast, later in the code, and the related expection handling.
The main-function starts with a logical-check on the input. (% class="mark" %)argc(%%) contains the number of values entered in the commandline. The if-statement checks for three values, but the server adds only two. On first sight this seems wrong, but the first argument (or better, the zeroth element in the array argv) is always the path where the executable is located. Considering this it is obvious, that the right numbere of argmuents is three.
After this check, the node is created with(% class="mark" %) ros::init()(%%) and(% class="mark" %) ros::NodeHandle(%%). Subsequently the service-client is created in a similiar way as the service-serve. The client-object is initialized by a memberfunction of the nodehandle. At this point it is important to choose the same servicename as the server uses. In this case the right servicename is (% class="mark" %)calculate(%%).


Afterwards an object from (% class="mark" %)calculator::calc_srv(%%) is created. This is required for the next step, where the arguments from the commandline have to be casted from C-string to integer. For this purpose the boost- library provides the (% class="mark" %)lexical_cast&amp;lt;T>()(%%)-function. This function casts the function-argument to the datatype T. If the input can not be casted as expected, the function throws an exception(% class="mark" %) boost::bad_lexical_cast(%%). So, the try-catch-instruction prevents from sending a bad commandline-input to the server.
However, when the commandline-input is correct the following if-statement is executed. In the Argument the call-function is called. The function returns a bool, so it can be used as an argument for the if-statement. If the callback-function add() returns true, the client-node writes the result to the commandline using a logging-message. Otherwise, when the callback-function returns false an error-message is printed in the terminal and the main-function returns with 1.


==== **build-process** ====

At this point the two sourcefiles have been created and stored in the src-directory inside the calculator-package. Before the build-process can start the file CMakeLists.txt has to be prepared.
At first open the CMakeLists.txt-file and uncomment the lines


(% class="box infomessage" %)
(((
add_service_files(
    FILES
 )
)))

Now add (% class="mark" %)calc_srv.srv (%%)under FILES. These lines make sure, that the .srv-file in the directory srv is considered during the build-process.

Further, the following lines have to be uncommented.

(% class="box infomessage" %)
(((
 generate_messages(
   DEPENDENCIES
 )
)))

These are required for generating the messages, that are defined inside the service-definition. In this case only standard messagetypes are used, so the only entry will be(% class="mark" %) std_msgs.(%%) This line has to be added under DEPENDENCIES.
The next step is to announce the sourcefiles to the build-process. It is important to remember, that the headerfiles calculator/calc_srv.h, which is included in both sourcefiles is not build yet. That is why it is necessary to add dependencies to the CMakeLists.txt-file. These dependencies make sure, that executables are only then be built, when the build of headerfile has finished.
The generic structure of the dependency-command is:

(% class="box infomessage" %)
(((
add_dependencies(&amp;lt;target> &amp;lt;target_dependency>)
)))

 In this case the proper command is:

(% class="box infomessage" %)
(((
add_dependencies(server calculator_generate_messages_cpp) # for the server
)))

or

(% class="box infomessage" %)
(((
add_dependencies(client calculator_generate_messages_cpp) # for the client
)))

 Maybe it seems a bit strange, that the dependency is related to message_generation and not about service-files. But message_generation works for both[^msg_and_srv]
With the knowledge from Example 2: hello-world.cpp, the following lines can be added to CMakeLists.txt:

(% class="box infomessage" %)
(((
add_executable(server src/server.cpp)
target_link_libraries(server ${catkin_LIBRARIES})
add_dependencies(server calculator_generate_messages_cpp)

add_executable(client src/client.cpp)
target_link_libraries(client ${catkin_LIBRARIES})
add_dependencies(client calculator_generate_messages_cpp)
)))

(% class="box" %)
(((
 Note: The file package.xml has not to be adjusted, because the required dependencies were added when the package was created.
)))

The verylast step is to start the build process. Switch to the top of the workspace and then execute 

(% class="box infomessage" %)
(((
catkin_make
)))


==== **Using the package** ====

After a successful build-process two executables are generated. Before they can be used a roscore has to be started. Afterwards, start the server-node with

(% class="box infomessage" %)
(((
$ rosrun calculator server
)))

and the cleint node with 

(% class="box infomessage" %)
(((
$ rosrun calculator client a b
)))

Replace a and b with integer values. For example, execute:

(% class="box infomessage" %)
(((
 $ rosrun calculator client 4 12
)))

This results in the following output in the server-terminal: 

(% class="box infomessage" %)
(((
[ INFO] [1509369925.682593826]: The two integers are: 4 and 12

[ INFO] [1509369925.682726903]: The calculated sum is 16
)))

The output in the client-terminal will be similar to: 

(% class="box infomessage" %)
(((
[ INFO] [1509369925.683124120]: Result is: 16
)))

Invalid inputs like

(% class="box infomessage" %)
(((
$ rosrun calculator client 4 xy
)))

or

(% class="box infomessage" %)
(((
$ rosrun calculator client
)))

will cause error-messages, due to the error-handling in the nodes. 


=== Example 6: Ask the master ===

----

This is another example for creating a service in a ROS-network. The node provides a service that should return the number of active topics in the ROS network.
At first a new package has to be created. The ROS C++-API is needed for sure and furthermore the standard ROS-messages. So, the command for creating the new package is (of course, this command should be executed in the source-folder of the workspace):

(% class="box infomessage" %)
(((
$ catkin_create_pkg list_topics roscpp std_msgs message_generation
)))

 The new package is called list_topics with the dependencies roscpp, message_generation and std_msgs.


==== **Define the service** ====

The next step is a new one. To define a service switch in the package folder and create a new folder called srv. Open this folder an create a new file. This file contains the definition of the service, i.e. the input and output arguments. This file will be named with "list_topics_service.srv".
Then, open the file and type in the definition of the service. The service does not need any input arguments. The output argument, what the service should return, is a single integer value. So, the definition looks like this:

(% class="box infomessage" %)
(((
~-~--
int16 number_of_topics
)))

The definition is to read as follows. Over the three hyphens there are the input argument(s). In this case it is empty, but also when it empty a messagetype will be required. This messagetype is std_msgs/Empty. Under the three hyphens are the output argument(s). As seen above, only one argument is listed. The output argument of this service is an 16bit integer called number_of_topics.
At this point the service is already defined.


==== **Creating the server** ====

After defining the service, a server that provides the service is necessary. For this purpsose change to the folder src within the package directory and create a file named "list_topics_node.cpp". The server, which provides the desired service, is created by the following code:

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "list_topics/list_topics_service.h"

bool number_topics(list_topics::list_topics_service::Request &amp;amp;req, list_topics::list_topics_service::Response &amp;amp;res){
    ros::master::V_TopicInfo master_topics;
    ros::master::getTopics(master_topics);
    int number_t = master_topics.size();
    ROS_INFO("Topics: [%i]", (int) number_t);
    res.number = number_t;
  return true;
}

int main(int argc, char ~*~*argv)
{  
  ros::init(argc, argv, "list_topics_node");
  ros::NodeHandle handle;
\\  ros::ServiceServer service = handle.advertiseService("show_number_of_topics", &amp;amp;number_topics);
  ROS_INFO("Returning number of active topics.");
  ros::spin();

  return 0;
}
)))

At the very top, the requiered libraries are included. ros/ros.h is necessary every time when the ROS C++-API should be used. The header list_topics/list_topics_service.h includes the service-definition. That there is no such headerfile build so far should be kept in mind for the later build-process.
Further down, the callback-function, that will be executed when the service is called, is defined. The returntype is always bool. It does not matter, whether it is a function or a member function or anything else.
The body of the callback-function contains the
instructions, that will be executed when a new request arrives. At the beginning a new vectorobject from the struct V_TopicInfo is created. In the next line the function getTopics (V_TopicInfo &amp;amp;topics) writes all active topics to the vectorobject by reference. Because V_TopicInfo is just a vector of structs, the member function can be used here to return the size of the vector, which is equal to the number of active topics.
The last instruction in the callback-function is the return argument.
The main-function starts as usual with the initialization of the node. Afterwards the serive_serve is created. The ROS C++-API recommends to do this with the member function of the nodehandle.


(% class="box" %)
(((
A ServiceServer should always be created through a call to NodeHandle::advertiseService(), or copied from one that was. Once all copies of a specific ServiceServer go out of scope, the service associated with it will be unadvertised and the service callback will stop being called. (see: ros::ServiceServer Class Reference)
)))

There are several ways to implement a service. For this introductory example, the simplest option is to use a simple callback function. Only the service name and the name of the callback functions is expected.
Following, an info message that the service server is ready and the instruction to pass control to the node.
Now the node is almost ready to get build with catkin.


==== **Building the service-server** ====

Before the node can be build, the file CMakeLists.txt has to be adjusted.

(% class="box infomessage" %)
(((
cmake_minimum_required(VERSION 2.8.3)
project(list_topics)

find_package(catkin REQUIRED COMPONENTS
  message_generation
  roscpp
  std_msgs
)

add_service_files(
    FILES
      list_topics_service.srv
                )


 generate_messages(
   DEPENDENCIES
   std_msgs
                )

include_directories(
  ${catkin_INCLUDE_DIRS}
)


add_executable(list_topics_node src/list_topics_node.cpp)
target_link_libraries(list_topics_node ${catkin_LIBRARIES})
add_dependencies(list_topics_node list_topics_generate_messages_cpp)
)))

The required components have been added when the package has been created (see above). At first, catkin has to know that it has to create headerfiles from the service definition. This can be declared in section add_service_files. Further the message-dependencies have to be declared. As a reminder, the service definition is a composition of messages. In this case two standard messages are used. So, In section `generate_messages the entry std_msgs has to be made.
After including the catkin directory and adding the executable (see also: example-2-hello-worldcpp), a dependency has to be added, that the service header have to be build before building the executable. Otherwise the build process will throw an error.
After editing the CMakeLists.txt file the build process can start:

(% class="box infomessage" %)
(((
$ catkin_make
)))

(% class="box" %)
(((
Note: Usually the manifest package.xml has to be edited as well. But in this case, the required dependencies have been added by using the catkin_create_pkg command with the proper dependencies.
)))



==== **Using the package** ====

The service is quite simple to use. Open up three terminals and start a roscore in the first one. Than start with

(% class="box infomessage" %)
(((
$ rosrun list_topics list_topics_node
)))

the service-server node.
The last step is to call the service. With knowledge from the previous chapter, the command

(% class="box infomessage" %)
(((
$ rosservice call /show_number_of_topics
)))

should be familiar.



=== Further Examples ===

(% class="box" %)
(((
As said in the introduction, this is designed as rolling release. So, the number of examples and/or other sections will increase in future.
)))

==== **Spawn a turtle with a service** ====

Another good described example can be found in this free-of-charge book in chapter 8.3. In this example the author describes how to implement a node, that calls the service /spawn provided by the node /turtlesim_node. The proceeding is similar to the above one, but it may be a good exersise to implement it on your own.

1. Note: Calling(% class="mark" %) $ rosnode info &amp;lt;node-name>(%%) will return the services provided by the node. ROS nodes
1. rosrpc stands for ROS-~_~_R~_~_emote ~_~_P~_~_rocedure ~_~_C~_~_all
1. The hyphens are not optional, rather part of the syntax.&lt;/content>
  &lt;attachment>
    &lt;filename>ros_service_basic_struture.png&lt;/filename>
    &lt;author>XWiki.DavidDudzik&lt;/author>
    &lt;date>1545220217000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>8991&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>ros_service_graph.png&lt;/filename>
    &lt;author>XWiki.DavidDudzik&lt;/author>
    &lt;date>1545220848000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>35423&lt;/filesize>
  &lt;/attachment>
&lt;/xwikidoc>@


12.1
log
@@
text
@d13 1
a13 1
  &lt;date>1550742350000&lt;/date>
d15 1
a15 1
  &lt;version>12.1&lt;/version>
@


11.1
log
@@
text
@d13 3
a15 3
  &lt;date>1550742155000&lt;/date>
  &lt;contentUpdateDate>1550742155000&lt;/contentUpdateDate>
  &lt;version>11.1&lt;/version>
d21 1
a21 1
  &lt;content>== Ros service ==
a24 1
Sitemap
a25 1

d29 3
@


10.1
log
@@
text
@d13 3
a15 3
  &lt;date>1550742020000&lt;/date>
  &lt;contentUpdateDate>1550742020000&lt;/contentUpdateDate>
  &lt;version>10.1&lt;/version>
d21 590
a610 587
  &lt;content>== Ros service ==&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Sitemap&amp;#xd;
&amp;#xd;
&amp;#xd;
{{toc start="2"/}}&amp;#xd;
&amp;#xd;
&amp;#xd;
== Ros service ==&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Until now, the communication between two nodes was based on messages, that where published under topics. This is the best way for a continous informationstream or data-exchange. But when there is asynchronous task to do, then there are far better solutions.&amp;#xd;
The simplest solution in ROS is called "service". A service relies on a request-response-system. That means, one node is sending an service-request to a second node, that is offering a service. The second node is doing the task and then sends a response to the first node, whether the task has failed or suceeded.&amp;#xd;
&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:ros_service_basic_struture.png||alt="Fig.1: ROS service basic structure"]]&amp;#xd;
&amp;#xd;
{{{Fig.1: ROS service basic structure}}}&amp;#xd;
&amp;#xd;
Mostly services are called by nodes, but now and then it is helpful to call service from the terminal. To get an impression how a service works, usually in the background, a service is going to be called by hand.&amp;#xd;
&amp;#xd;
First, two terminals are necessary. In terminal one a (% class="mark" %)roscore(%%) has to be launched. In the second terminal a node will be started:&amp;#xd;
&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun turtlesim turtlesim_node&amp;#xd;
)))&amp;#xd;
&amp;#xd;
After this, run the command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list&amp;#xd;
)))&amp;#xd;
&amp;#xd;
in a third terminal.&amp;#xd;
Executing this command will show an output similar to this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list&amp;#xd;
/clear&amp;#xd;
/kill&amp;#xd;
/reset&amp;#xd;
/rosout/get_loggers&amp;#xd;
/rosout/set_logger_level&amp;#xd;
/spawn&amp;#xd;
/turtle1/set_pen&amp;#xd;
/turtle1/teleport_absolute&amp;#xd;
/turtle1/teleport_relative&amp;#xd;
/turtlesim/get_loggers&amp;#xd;
/turtlesim/set_logger_level&amp;#xd;
)))&amp;#xd;
&amp;#xd;
At first glance, there are some services that are binded to a specific namespace and others that are located in the root namespace. But every service is provided by a node, so at first it is interesting to which node the services in the root namespace belong to.&amp;#xd;
To find this out, type in the above command extend by the option (% class="mark" %)-n(%%).&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list -n&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The output is almost the same as before, but now every service in the list is extended by the node that provides it1.&amp;#xd;
To get more detailed information to a service, use&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice info &amp;lt;service-name>&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The output for the service /kill is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice info /kill&amp;#xd;
   Node: /turtlesim&amp;#xd;
   URI: rosrpc:~/~/ubuntu-ros:37541&amp;#xd;
   Type: turtlesim/Kill&amp;#xd;
   Args: name&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The node that provides this service is the node /turtlesim with the URI rosrpc:~/~/ubuntu-ros:375412. The type of the service is (% class="mark" %)turtlesim/kill(%%), that takes the argument(% class="mark" %) name.(%%)&amp;#xd;
There are a lot of service-types in ROS. Some service-types are basic datatypes, but others are a structure of basic datatypes or complex datatypes nested in each other. So, it can be very difficult to discover all in- and outputs. The command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rossrv show &amp;lt;service-type>&amp;#xd;
)))&amp;#xd;
&amp;#xd;
will help to solve this problem.&amp;#xd;
&amp;#xd;
For the service-type(% class="mark" %) turtlesim/kill(%%) the output is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rossrv show turtlesim/Kill&amp;#xd;
   string name&amp;#xd;
   ~-~--&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Everthing above the three hyphens3 are the input arguments. In this case there is just one string input argument (the name of the isntance) and no output (or returning) argument. A service-type can contain all thinkable permutations of in-and output arguments. So, it is also possible to have a service-type with no input argument and no output argument. Sending a request to a node that controls a peripherie object, may be a comprehensible scenario. The node just needs to know that the service is called and the callback-function has to be executed. The callback function will return a bool (true or false). This may be the only required information for the node, that sent the request. &amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
=== Call a service from the terminal ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
In the previous section the structure of ROS service has been discussed. Now, a service will be called with the above setup. The example will be executed with the service (% class="mark" %)/kill(%%). Previously, the command (% class="mark" %)$ rossrv show(%%) was used to get information about the necessary input arguments.&amp;#xd;
This service expects the name of the turtle, which should be removed. So the command will be something like this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice call /kill 'turtle1'&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 After executing this command, the turtle in the window will disappear. For a better understanding what happend, type in[^trouble_shooting_rqt]:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rqt_graph&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:ros_service_graph.png]]&amp;#xd;
&amp;#xd;
&amp;#xd;
(% id="HFig.2:Outputofrqt_graphaftercallingtheservice2FSpawn" class="wikigeneratedid" %)&amp;#xd;
(((&amp;#xd;
**Fig.2: Output of rqt_graph after calling the service /Spawn**&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Comparing the above figure with rqt_graph/Fig.1 will show, that the node /turtlesim did not disapper. Only the topic /turtle1/cmd_vel is removed from the graph.&amp;#xd;
To get a new turtle, without restarting the node, use the service /spawn. This might be a good task to get a bit more familiar to the concept of services in ROS. When getting issues, consulte the book A gentle introduction to ROS[^ros_intro], the usage of the service /spawn is described there very well.&amp;#xd;
&amp;#xd;
&amp;#xd;
=== Example 5: Server-Client-Adder ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
This example is inspired from the example http:~/~/wiki.ros.org/ROS/Tutorials/WritingServiceClient. The idea is taken from this tutorial, but the implementation and the description may differ in some points.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 In this example, a adder based on a server-client-relation will be created. The idea is to send two integer values from the client to the server. The server calculates the sum of the two integer values and returns the sum to the client.&amp;#xd;
the first step is to create a new package with the appropriate dependencies. The proper command is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ catkin_create_pkg calculator roscpp std_msgs message_generation&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The new generated package is called calculator. (% class="mark" %)roscpp(%%) is required to use the C++-API and message_generation will be needed for generating the service-headers during the build process[^msg_generation].&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **srv-Typedefinition** ====&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
After succesful generation of the new package, the definition of the service is required. First, a new folder has to be created in the diretory of the package.&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ mkdir -p srv&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Then, open a new file with&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ gedit calc_service.srv&amp;#xd;
)))&amp;#xd;
&amp;#xd;
This file will contain the definition of the service. For this example two int64 alues are chosen for the request and also a int64 value for the response. So, enter the following lines in to the editor. &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
int64 a&amp;#xd;
int64 b&amp;#xd;
~-~--&amp;#xd;
int64 sum&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
Note: The three hyphens are part of the syntax.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 From this file the header will generated during the build-process.&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **Creating the server-node** ====&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
===== The next task is creating the nodes. At first, the server node will be created. This takes the response, does some computation and then passes the result back to the client. The source-code can look like this: =====&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
#include "ros/ros.h"&amp;#xd;
#include "calculator/calc_srv.h"&amp;#xd;
#include &amp;lt;string>&amp;#xd;
&amp;#xd;
bool add(calculator::calc_srv::Request  &amp;amp;request, calculator::calc_srv::Response &amp;amp;response){&amp;#xd;
  response.sum = request.a + request.b;&amp;#xd;
  ROS_INFO_STREAM("The two integers are: " &amp;lt;&amp;lt; request.a &amp;lt;&amp;lt; " and " &amp;lt;&amp;lt; request.b &amp;lt;&amp;lt; "\n");&amp;#xd;
  ROS_INFO_STREAM("The calculated sum is " &amp;lt;&amp;lt; response.sum &amp;lt;&amp;lt; "\n");&amp;#xd;
  return true;&amp;#xd;
}&amp;#xd;
&amp;#xd;
int main(int argc, char ~*~*argv)&amp;#xd;
{  &amp;#xd;
  ros::init(argc, argv, "server");&amp;#xd;
  ros::NodeHandle n;&amp;#xd;
&amp;#xd;
  ros::ServiceServer service = n.advertiseService("calculate", &amp;amp;add);  &amp;#xd;
  ROS_INFO_STREAM("Server ready.");  &amp;#xd;
  ros::spin();&amp;#xd;
&amp;#xd;
  return 0;&amp;#xd;
}&amp;#xd;
&amp;#xd;
 &amp;#xd;
)))&amp;#xd;
&amp;#xd;
The first two lines include the required header files (% class="mark" %)ros/ros.h (%%)and the new (% class="mark" %)created calculator/calc_srv.h(%%)[^calc_header].&amp;#xd;
Following this, the function(% class="mark" %) bool add()(%%) is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the (% class="mark" %)class calculator::calc_srv(%%).&amp;#xd;
Inside the function, the two integers from the object req are added and passed to res.sum. Following, two info-messages are printed to the terminal telling the user what is going on.&amp;#xd;
The next step is the main-function. At first, the ROS node is initialized as usual. Then, a service-object is created with a member-function of the nodehandle. In the basic configuration it expects two arguments, a servicename and the callback-function. The servicename is chosen as calculate and the callback-function is the one created above. The info-message in the next line is not required, but it is good to know that the server is started.&amp;#xd;
(% class="mark" %)ros::spin()(%%) is already known from Example 4: Subcriber.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **Creating the client-node** ====&amp;#xd;
&amp;#xd;
After the server-node is created successfully (but not build yet), the client-node follows. This will take the input from the commandline and pass the values to the server. After the computation in the server, the result will be passed back to the client. Then, the client will produce the output in the terminal.&amp;#xd;
So, the code for this task looks as follows:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
#include "ros/ros.h"&amp;#xd;
#include "calculator/calc_srv.h"&amp;#xd;
#include &amp;lt;boost/lexical_cast.hpp>&amp;#xd;
&amp;#xd;
int main(int argc, char ~*~*argv){    &amp;#xd;
\\  if (argc != 3)&amp;#xd;
  {&amp;#xd;
    ROS_WARN_STREAM("Enter two int_numbers!");&amp;#xd;
    return 1;&amp;#xd;
  }&amp;#xd;
&amp;#xd;
  ros::init(argc, argv, "calc_client");&amp;#xd;
  ros::NodeHandle n;  &amp;#xd;
  ros::ServiceClient client = n.serviceClient&amp;lt;calculator::calc_srv>("calculate");  &amp;#xd;
  calculator::calc_srv srv;&amp;#xd;
&amp;#xd;
try{&amp;#xd;
         srv.request.a = boost::lexical_cast&amp;lt;int>(*(argv+1));&amp;#xd;
           srv.request.b = boost::lexical_cast&amp;lt;int>(*(argv+2));&amp;#xd;
         }&amp;#xd;
  catch(const boost::bad_lexical_cast &amp;amp;){&amp;#xd;
        ROS_ERROR_STREAM("Enter only INTs!");&amp;#xd;
        return 1;&amp;#xd;
      }&amp;#xd;
\\  if (client.call(srv))&amp;#xd;
  {&amp;#xd;
      ROS_INFO_STREAM("Result is: " &amp;lt;&amp;lt; srv.response.sum &amp;lt;&amp;lt; "\n");    &amp;#xd;
  }&amp;#xd;
  else{&amp;#xd;
    ROS_ERROR_STREAM("Something went wrong. Bad response from server.");&amp;#xd;
    return 1; }&amp;#xd;
  return 0;&amp;#xd;
}&amp;#xd;
&amp;#xd;
 &amp;#xd;
)))&amp;#xd;
&amp;#xd;
&amp;#xd;
At the top, the library(% class="mark" %) ros/ros.h" (%%)is included as usual, when using the ROS C++-API. (% class="mark" %)calculator/calc_srv.h (%%)provides the informations about the service, which was created in srv-Typedefinition. The boost-library is required for the typecast, later in the code, and the related expection handling.&amp;#xd;
The main-function starts with a logical-check on the input. (% class="mark" %)argc(%%) contains the number of values entered in the commandline. The if-statement checks for three values, but the server adds only two. On first sight this seems wrong, but the first argument (or better, the zeroth element in the array argv) is always the path where the executable is located. Considering this it is obvious, that the right numbere of argmuents is three.&amp;#xd;
After this check, the node is created with(% class="mark" %) ros::init()(%%) and(% class="mark" %) ros::NodeHandle(%%). Subsequently the service-client is created in a similiar way as the service-serve. The client-object is initialized by a memberfunction of the nodehandle. At this point it is important to choose the same servicename as the server uses. In this case the right servicename is (% class="mark" %)calculate(%%).&amp;#xd;
&amp;#xd;
&amp;#xd;
Afterwards an object from (% class="mark" %)calculator::calc_srv(%%) is created. This is required for the next step, where the arguments from the commandline have to be casted from C-string to integer. For this purpose the boost- library provides the (% class="mark" %)lexical_cast&amp;lt;T>()(%%)-function. This function casts the function-argument to the datatype T. If the input can not be casted as expected, the function throws an exception(% class="mark" %) boost::bad_lexical_cast(%%). So, the try-catch-instruction prevents from sending a bad commandline-input to the server.&amp;#xd;
However, when the commandline-input is correct the following if-statement is executed. In the Argument the call-function is called. The function returns a bool, so it can be used as an argument for the if-statement. If the callback-function add() returns true, the client-node writes the result to the commandline using a logging-message. Otherwise, when the callback-function returns false an error-message is printed in the terminal and the main-function returns with 1.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **build-process** ====&amp;#xd;
&amp;#xd;
At this point the two sourcefiles have been created and stored in the src-directory inside the calculator-package. Before the build-process can start the file CMakeLists.txt has to be prepared.&amp;#xd;
At first open the CMakeLists.txt-file and uncomment the lines&amp;#xd;
&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_service_files(&amp;#xd;
    FILES&amp;#xd;
 )&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Now add (% class="mark" %)calc_srv.srv (%%)under FILES. These lines make sure, that the .srv-file in the directory srv is considered during the build-process.&amp;#xd;
&amp;#xd;
Further, the following lines have to be uncommented.&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
 generate_messages(&amp;#xd;
   DEPENDENCIES&amp;#xd;
 )&amp;#xd;
)))&amp;#xd;
&amp;#xd;
These are required for generating the messages, that are defined inside the service-definition. In this case only standard messagetypes are used, so the only entry will be(% class="mark" %) std_msgs.(%%) This line has to be added under DEPENDENCIES.&amp;#xd;
The next step is to announce the sourcefiles to the build-process. It is important to remember, that the headerfiles calculator/calc_srv.h, which is included in both sourcefiles is not build yet. That is why it is necessary to add dependencies to the CMakeLists.txt-file. These dependencies make sure, that executables are only then be built, when the build of headerfile has finished.&amp;#xd;
The generic structure of the dependency-command is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_dependencies(&amp;lt;target> &amp;lt;target_dependency>)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 In this case the proper command is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_dependencies(server calculator_generate_messages_cpp) # for the server&amp;#xd;
)))&amp;#xd;
&amp;#xd;
or&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_dependencies(client calculator_generate_messages_cpp) # for the client&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 Maybe it seems a bit strange, that the dependency is related to message_generation and not about service-files. But message_generation works for both[^msg_and_srv]&amp;#xd;
With the knowledge from Example 2: hello-world.cpp, the following lines can be added to CMakeLists.txt:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_executable(server src/server.cpp)&amp;#xd;
target_link_libraries(server ${catkin_LIBRARIES})&amp;#xd;
add_dependencies(server calculator_generate_messages_cpp)&amp;#xd;
&amp;#xd;
add_executable(client src/client.cpp)&amp;#xd;
target_link_libraries(client ${catkin_LIBRARIES})&amp;#xd;
add_dependencies(client calculator_generate_messages_cpp)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
 Note: The file package.xml has not to be adjusted, because the required dependencies were added when the package was created.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The verylast step is to start the build process. Switch to the top of the workspace and then execute &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
catkin_make&amp;#xd;
)))&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **Using the package** ====&amp;#xd;
&amp;#xd;
After a successful build-process two executables are generated. Before they can be used a roscore has to be started. Afterwards, start the server-node with&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator server&amp;#xd;
)))&amp;#xd;
&amp;#xd;
and the cleint node with &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator client a b&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Replace a and b with integer values. For example, execute:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
 $ rosrun calculator client 4 12&amp;#xd;
)))&amp;#xd;
&amp;#xd;
This results in the following output in the server-terminal: &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
[ INFO] [1509369925.682593826]: The two integers are: 4 and 12&amp;#xd;
&amp;#xd;
[ INFO] [1509369925.682726903]: The calculated sum is 16&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The output in the client-terminal will be similar to: &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
[ INFO] [1509369925.683124120]: Result is: 16&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Invalid inputs like&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator client 4 xy&amp;#xd;
)))&amp;#xd;
&amp;#xd;
or&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator client&amp;#xd;
)))&amp;#xd;
&amp;#xd;
will cause error-messages, due to the error-handling in the nodes. &amp;#xd;
&amp;#xd;
&amp;#xd;
=== Example 6: Ask the master ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
This is another example for creating a service in a ROS-network. The node provides a service that should return the number of active topics in the ROS network.&amp;#xd;
At first a new package has to be created. The ROS C++-API is needed for sure and furthermore the standard ROS-messages. So, the command for creating the new package is (of course, this command should be executed in the source-folder of the workspace):&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ catkin_create_pkg list_topics roscpp std_msgs message_generation&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The new package is called list_topics with the dependencies roscpp, message_generation and std_msgs.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **Define the service** ====&amp;#xd;
&amp;#xd;
The next step is a new one. To define a service switch in the package folder and create a new folder called srv. Open this folder an create a new file. This file contains the definition of the service, i.e. the input and output arguments. This file will be named with "list_topics_service.srv".&amp;#xd;
Then, open the file and type in the definition of the service. The service does not need any input arguments. The output argument, what the service should return, is a single integer value. So, the definition looks like this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
~-~--&amp;#xd;
int16 number_of_topics&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The definition is to read as follows. Over the three hyphens there are the input argument(s). In this case it is empty, but also when it empty a messagetype will be required. This messagetype is std_msgs/Empty. Under the three hyphens are the output argument(s). As seen above, only one argument is listed. The output argument of this service is an 16bit integer called number_of_topics.&amp;#xd;
At this point the service is already defined.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **Creating the server** ====&amp;#xd;
&amp;#xd;
After defining the service, a server that provides the service is necessary. For this purpsose change to the folder src within the package directory and create a file named "list_topics_node.cpp". The server, which provides the desired service, is created by the following code:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
#include "ros/ros.h"&amp;#xd;
#include "list_topics/list_topics_service.h"&amp;#xd;
&amp;#xd;
bool number_topics(list_topics::list_topics_service::Request &amp;amp;req, list_topics::list_topics_service::Response &amp;amp;res){&amp;#xd;
    ros::master::V_TopicInfo master_topics;&amp;#xd;
    ros::master::getTopics(master_topics);&amp;#xd;
    int number_t = master_topics.size();&amp;#xd;
    ROS_INFO("Topics: [%i]", (int) number_t);&amp;#xd;
    res.number = number_t;&amp;#xd;
  return true;&amp;#xd;
}&amp;#xd;
&amp;#xd;
int main(int argc, char ~*~*argv)&amp;#xd;
{  &amp;#xd;
  ros::init(argc, argv, "list_topics_node");&amp;#xd;
  ros::NodeHandle handle;&amp;#xd;
\\  ros::ServiceServer service = handle.advertiseService("show_number_of_topics", &amp;amp;number_topics);&amp;#xd;
  ROS_INFO("Returning number of active topics.");&amp;#xd;
  ros::spin();&amp;#xd;
&amp;#xd;
  return 0;&amp;#xd;
}&amp;#xd;
)))&amp;#xd;
&amp;#xd;
At the very top, the requiered libraries are included. ros/ros.h is necessary every time when the ROS C++-API should be used. The header list_topics/list_topics_service.h includes the service-definition. That there is no such headerfile build so far should be kept in mind for the later build-process.&amp;#xd;
Further down, the callback-function, that will be executed when the service is called, is defined. The returntype is always bool. It does not matter, whether it is a function or a member function or anything else.&amp;#xd;
The body of the callback-function contains the&amp;#xd;
instructions, that will be executed when a new request arrives. At the beginning a new vectorobject from the struct V_TopicInfo is created. In the next line the function getTopics (V_TopicInfo &amp;amp;topics) writes all active topics to the vectorobject by reference. Because V_TopicInfo is just a vector of structs, the member function can be used here to return the size of the vector, which is equal to the number of active topics.&amp;#xd;
The last instruction in the callback-function is the return argument.&amp;#xd;
The main-function starts as usual with the initialization of the node. Afterwards the serive_serve is created. The ROS C++-API recommends to do this with the member function of the nodehandle.&amp;#xd;
&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
A ServiceServer should always be created through a call to NodeHandle::advertiseService(), or copied from one that was. Once all copies of a specific ServiceServer go out of scope, the service associated with it will be unadvertised and the service callback will stop being called. (see: ros::ServiceServer Class Reference)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
There are several ways to implement a service. For this introductory example, the simplest option is to use a simple callback function. Only the service name and the name of the callback functions is expected.&amp;#xd;
Following, an info message that the service server is ready and the instruction to pass control to the node.&amp;#xd;
Now the node is almost ready to get build with catkin.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **Building the service-server** ====&amp;#xd;
&amp;#xd;
Before the node can be build, the file CMakeLists.txt has to be adjusted.&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
cmake_minimum_required(VERSION 2.8.3)&amp;#xd;
project(list_topics)&amp;#xd;
&amp;#xd;
find_package(catkin REQUIRED COMPONENTS&amp;#xd;
  message_generation&amp;#xd;
  roscpp&amp;#xd;
  std_msgs&amp;#xd;
)&amp;#xd;
&amp;#xd;
add_service_files(&amp;#xd;
    FILES&amp;#xd;
      list_topics_service.srv&amp;#xd;
                )&amp;#xd;
&amp;#xd;
&amp;#xd;
 generate_messages(&amp;#xd;
   DEPENDENCIES&amp;#xd;
   std_msgs&amp;#xd;
                )&amp;#xd;
&amp;#xd;
include_directories(&amp;#xd;
  ${catkin_INCLUDE_DIRS}&amp;#xd;
)&amp;#xd;
&amp;#xd;
&amp;#xd;
add_executable(list_topics_node src/list_topics_node.cpp)&amp;#xd;
target_link_libraries(list_topics_node ${catkin_LIBRARIES})&amp;#xd;
add_dependencies(list_topics_node list_topics_generate_messages_cpp)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The required components have been added when the package has been created (see above). At first, catkin has to know that it has to create headerfiles from the service definition. This can be declared in section add_service_files. Further the message-dependencies have to be declared. As a reminder, the service definition is a composition of messages. In this case two standard messages are used. So, In section `generate_messages the entry std_msgs has to be made.&amp;#xd;
After including the catkin directory and adding the executable (see also: example-2-hello-worldcpp), a dependency has to be added, that the service header have to be build before building the executable. Otherwise the build process will throw an error.&amp;#xd;
After editing the CMakeLists.txt file the build process can start:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ catkin_make&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
Note: Usually the manifest package.xml has to be edited as well. But in this case, the required dependencies have been added by using the catkin_create_pkg command with the proper dependencies.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
==== **Using the package** ====&amp;#xd;
&amp;#xd;
The service is quite simple to use. Open up three terminals and start a roscore in the first one. Than start with&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun list_topics list_topics_node&amp;#xd;
)))&amp;#xd;
&amp;#xd;
the service-server node.&amp;#xd;
The last step is to call the service. With knowledge from the previous chapter, the command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice call /show_number_of_topics&amp;#xd;
)))&amp;#xd;
&amp;#xd;
should be familiar.&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
=== Further Examples ===&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
As said in the introduction, this is designed as rolling release. So, the number of examples and/or other sections will increase in future.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
==== **Spawn a turtle with a service** ====&amp;#xd;
&amp;#xd;
Another good described example can be found in this free-of-charge book in chapter 8.3. In this example the author describes how to implement a node, that calls the service /spawn provided by the node /turtlesim_node. The proceeding is similar to the above one, but it may be a good exersise to implement it on your own.&amp;#xd;
&amp;#xd;
1. Note: Calling(% class="mark" %) $ rosnode info &amp;lt;node-name>(%%) will return the services provided by the node. ROS nodes&amp;#xd;
1. rosrpc stands for ROS-~_~_R~_~_emote ~_~_P~_~_rocedure ~_~_C~_~_all&amp;#xd;
@


9.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.ROS GettingStarted.ROS service.WebHome" locale="">
  &lt;web>Projects.MoRoP.ROS GettingStarted.ROS service&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>en&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.DavidDudzik&lt;/creator>
  &lt;creationDate>1545220035000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.ROS GettingStarted.WebHome&lt;/parent>
  &lt;author>XWiki.DavidDudzik&lt;/author>
  &lt;contentAuthor>XWiki.DavidDudzik&lt;/contentAuthor>
  &lt;date>1550741740000&lt;/date>
  &lt;contentUpdateDate>1550741740000&lt;/contentUpdateDate>
  &lt;version>9.1&lt;/version>
  &lt;title>ROS service&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>== Ros service ==&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Sitemap&amp;#xd;
&amp;#xd;
&amp;#xd;
{{toc start="2"/}}&amp;#xd;
&amp;#xd;
&amp;#xd;
== Ros service ==&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Until now, the communication between two nodes was based on messages, that where published under topics. This is the best way for a continous informationstream or data-exchange. But when there is asynchronous task to do, then there are far better solutions.&amp;#xd;
The simplest solution in ROS is called "service". A service relies on a request-response-system. That means, one node is sending an service-request to a second node, that is offering a service. The second node is doing the task and then sends a response to the first node, whether the task has failed or suceeded.&amp;#xd;
&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:ros_service_basic_struture.png||alt="Fig.1: ROS service basic structure"]]&amp;#xd;
&amp;#xd;
{{{Fig.1: ROS service basic structure}}}&amp;#xd;
&amp;#xd;
Mostly services are called by nodes, but now and then it is helpful to call service from the terminal. To get an impression how a service works, usually in the background, a service is going to be called by hand.&amp;#xd;
&amp;#xd;
First, two terminals are necessary. In terminal one a (% class="mark" %)roscore(%%) has to be launched. In the second terminal a node will be started:&amp;#xd;
&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun turtlesim turtlesim_node&amp;#xd;
)))&amp;#xd;
&amp;#xd;
After this, run the command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list&amp;#xd;
)))&amp;#xd;
&amp;#xd;
in a third terminal.&amp;#xd;
Executing this command will show an output similar to this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list&amp;#xd;
/clear&amp;#xd;
/kill&amp;#xd;
/reset&amp;#xd;
/rosout/get_loggers&amp;#xd;
/rosout/set_logger_level&amp;#xd;
/spawn&amp;#xd;
/turtle1/set_pen&amp;#xd;
/turtle1/teleport_absolute&amp;#xd;
/turtle1/teleport_relative&amp;#xd;
/turtlesim/get_loggers&amp;#xd;
/turtlesim/set_logger_level&amp;#xd;
)))&amp;#xd;
&amp;#xd;
At first glance, there are some services that are binded to a specific namespace and others that are located in the root namespace. But every service is provided by a node, so at first it is interesting to which node the services in the root namespace belong to.&amp;#xd;
To find this out, type in the above command extend by the option (% class="mark" %)-n(%%).&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list -n&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The output is almost the same as before, but now every service in the list is extended by the node that provides it1.&amp;#xd;
To get more detailed information to a service, use&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice info &amp;lt;service-name>&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The output for the service /kill is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice info /kill&amp;#xd;
   Node: /turtlesim&amp;#xd;
   URI: rosrpc:~/~/ubuntu-ros:37541&amp;#xd;
   Type: turtlesim/Kill&amp;#xd;
   Args: name&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The node that provides this service is the node /turtlesim with the URI rosrpc:~/~/ubuntu-ros:375412. The type of the service is (% class="mark" %)turtlesim/kill(%%), that takes the argument(% class="mark" %) name.(%%)&amp;#xd;
There are a lot of service-types in ROS. Some service-types are basic datatypes, but others are a structure of basic datatypes or complex datatypes nested in each other. So, it can be very difficult to discover all in- and outputs. The command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rossrv show &amp;lt;service-type>&amp;#xd;
)))&amp;#xd;
&amp;#xd;
will help to solve this problem.&amp;#xd;
&amp;#xd;
For the service-type(% class="mark" %) turtlesim/kill(%%) the output is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rossrv show turtlesim/Kill&amp;#xd;
   string name&amp;#xd;
   ~-~--&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Everthing above the three hyphens3 are the input arguments. In this case there is just one string input argument (the name of the isntance) and no output (or returning) argument. A service-type can contain all thinkable permutations of in-and output arguments. So, it is also possible to have a service-type with no input argument and no output argument. Sending a request to a node that controls a peripherie object, may be a comprehensible scenario. The node just needs to know that the service is called and the callback-function has to be executed. The callback function will return a bool (true or false). This may be the only required information for the node, that sent the request. &amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
=== Call a service from the terminal ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
In the previous section the structure of ROS service has been discussed. Now, a service will be called with the above setup. The example will be executed with the service (% class="mark" %)/kill(%%). Previously, the command (% class="mark" %)$ rossrv show(%%) was used to get information about the necessary input arguments.&amp;#xd;
This service expects the name of the turtle, which should be removed. So the command will be something like this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice call /kill 'turtle1'&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 After executing this command, the turtle in the window will disappear. For a better understanding what happend, type in[^trouble_shooting_rqt]:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rqt_graph&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:ros_service_graph.png]]&amp;#xd;
&amp;#xd;
&amp;#xd;
====== **Fig.2: Output of rqt_graph after calling the service /Spawn** ======&amp;#xd;
&amp;#xd;
Comparing the above figure with rqt_graph/Fig.1 will show, that the node /turtlesim did not disapper. Only the topic /turtle1/cmd_vel is removed from the graph.&amp;#xd;
To get a new turtle, without restarting the node, use the service /spawn. This might be a good task to get a bit more familiar to the concept of services in ROS. When getting issues, consulte the book A gentle introduction to ROS[^ros_intro], the usage of the service /spawn is described there very well.&amp;#xd;
&amp;#xd;
&amp;#xd;
=== Example 5: Server-Client-Adder ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
This example is inspired from the example http:~/~/wiki.ros.org/ROS/Tutorials/WritingServiceClient. The idea is taken from this tutorial, but the implementation and the description may differ in some points.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 In this example, a adder based on a server-client-relation will be created. The idea is to send two integer values from the client to the server. The server calculates the sum of the two integer values and returns the sum to the client.&amp;#xd;
the first step is to create a new package with the appropriate dependencies. The proper command is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ catkin_create_pkg calculator roscpp std_msgs message_generation&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The new generated package is called calculator. (% class="mark" %)roscpp(%%) is required to use the C++-API and message_generation will be needed for generating the service-headers during the build process[^msg_generation].&amp;#xd;
&amp;#xd;
&amp;#xd;
====   ====&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**srv-Typedefinition** ====&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
After succesful generation of the new package, the definition of the service is required. First, a new folder has to be created in the diretory of the package.&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ mkdir -p srv&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Then, open a new file with&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ gedit calc_service.srv&amp;#xd;
)))&amp;#xd;
&amp;#xd;
This file will contain the definition of the service. For this example two int64 alues are chosen for the request and also a int64 value for the response. So, enter the following lines in to the editor. &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
int64 a&amp;#xd;
int64 b&amp;#xd;
~-~--&amp;#xd;
int64 sum&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
Note: The three hyphens are part of the syntax.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 From this file the header will generated during the build-process.&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Creating the server-node** ====&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
===== The next task is creating the nodes. At first, the server node will be created. This takes the response, does some computation and then passes the result back to the client. The source-code can look like this: =====&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
#include "ros/ros.h"&amp;#xd;
#include "calculator/calc_srv.h"&amp;#xd;
#include &amp;lt;string>&amp;#xd;
&amp;#xd;
bool add(calculator::calc_srv::Request  &amp;amp;request, calculator::calc_srv::Response &amp;amp;response){&amp;#xd;
  response.sum = request.a + request.b;&amp;#xd;
  ROS_INFO_STREAM("The two integers are: " &amp;lt;&amp;lt; request.a &amp;lt;&amp;lt; " and " &amp;lt;&amp;lt; request.b &amp;lt;&amp;lt; "\n");&amp;#xd;
  ROS_INFO_STREAM("The calculated sum is " &amp;lt;&amp;lt; response.sum &amp;lt;&amp;lt; "\n");&amp;#xd;
  return true;&amp;#xd;
}&amp;#xd;
&amp;#xd;
int main(int argc, char ~*~*argv)&amp;#xd;
{  &amp;#xd;
  ros::init(argc, argv, "server");&amp;#xd;
  ros::NodeHandle n;&amp;#xd;
&amp;#xd;
  ros::ServiceServer service = n.advertiseService("calculate", &amp;amp;add);  &amp;#xd;
  ROS_INFO_STREAM("Server ready.");  &amp;#xd;
  ros::spin();&amp;#xd;
&amp;#xd;
  return 0;&amp;#xd;
}&amp;#xd;
&amp;#xd;
 &amp;#xd;
)))&amp;#xd;
&amp;#xd;
The first two lines include the required header files (% class="mark" %)ros/ros.h (%%)and the new (% class="mark" %)created calculator/calc_srv.h(%%)[^calc_header].&amp;#xd;
Following this, the function(% class="mark" %) bool add()(%%) is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the (% class="mark" %)class calculator::calc_srv(%%).&amp;#xd;
Inside the function, the two integers from the object req are added and passed to res.sum. Following, two info-messages are printed to the terminal telling the user what is going on.&amp;#xd;
The next step is the main-function. At first, the ROS node is initialized as usual. Then, a service-object is created with a member-function of the nodehandle. In the basic configuration it expects two arguments, a servicename and the callback-function. The servicename is chosen as calculate and the callback-function is the one created above. The info-message in the next line is not required, but it is good to know that the server is started.&amp;#xd;
(% class="mark" %)ros::spin()(%%) is already known from Example 4: Subcriber.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Creating the client-node** ====&amp;#xd;
&amp;#xd;
After the server-node is created successfully (but not build yet), the client-node follows. This will take the input from the commandline and pass the values to the server. After the computation in the server, the result will be passed back to the client. Then, the client will produce the output in the terminal.&amp;#xd;
So, the code for this task looks as follows:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
#include "ros/ros.h"&amp;#xd;
#include "calculator/calc_srv.h"&amp;#xd;
#include &amp;lt;boost/lexical_cast.hpp>&amp;#xd;
&amp;#xd;
int main(int argc, char ~*~*argv){    &amp;#xd;
\\  if (argc != 3)&amp;#xd;
  {&amp;#xd;
    ROS_WARN_STREAM("Enter two int_numbers!");&amp;#xd;
    return 1;&amp;#xd;
  }&amp;#xd;
&amp;#xd;
  ros::init(argc, argv, "calc_client");&amp;#xd;
  ros::NodeHandle n;  &amp;#xd;
  ros::ServiceClient client = n.serviceClient&amp;lt;calculator::calc_srv>("calculate");  &amp;#xd;
  calculator::calc_srv srv;&amp;#xd;
&amp;#xd;
try{&amp;#xd;
         srv.request.a = boost::lexical_cast&amp;lt;int>(*(argv+1));&amp;#xd;
           srv.request.b = boost::lexical_cast&amp;lt;int>(*(argv+2));&amp;#xd;
         }&amp;#xd;
  catch(const boost::bad_lexical_cast &amp;amp;){&amp;#xd;
        ROS_ERROR_STREAM("Enter only INTs!");&amp;#xd;
        return 1;&amp;#xd;
      }&amp;#xd;
\\  if (client.call(srv))&amp;#xd;
  {&amp;#xd;
      ROS_INFO_STREAM("Result is: " &amp;lt;&amp;lt; srv.response.sum &amp;lt;&amp;lt; "\n");    &amp;#xd;
  }&amp;#xd;
  else{&amp;#xd;
    ROS_ERROR_STREAM("Something went wrong. Bad response from server.");&amp;#xd;
    return 1; }&amp;#xd;
  return 0;&amp;#xd;
}&amp;#xd;
&amp;#xd;
 &amp;#xd;
)))&amp;#xd;
&amp;#xd;
&amp;#xd;
At the top, the library(% class="mark" %) ros/ros.h" (%%)is included as usual, when using the ROS C++-API. (% class="mark" %)calculator/calc_srv.h (%%)provides the informations about the service, which was created in srv-Typedefinition. The boost-library is required for the typecast, later in the code, and the related expection handling.&amp;#xd;
The main-function starts with a logical-check on the input. (% class="mark" %)argc(%%) contains the number of values entered in the commandline. The if-statement checks for three values, but the server adds only two. On first sight this seems wrong, but the first argument (or better, the zeroth element in the array argv) is always the path where the executable is located. Considering this it is obvious, that the right numbere of argmuents is three.&amp;#xd;
After this check, the node is created with(% class="mark" %) ros::init()(%%) and(% class="mark" %) ros::NodeHandle(%%). Subsequently the service-client is created in a similiar way as the service-serve. The client-object is initialized by a memberfunction of the nodehandle. At this point it is important to choose the same servicename as the server uses. In this case the right servicename is (% class="mark" %)calculate(%%).&amp;#xd;
&amp;#xd;
&amp;#xd;
Afterwards an object from (% class="mark" %)calculator::calc_srv(%%) is created. This is required for the next step, where the arguments from the commandline have to be casted from C-string to integer. For this purpose the boost- library provides the (% class="mark" %)lexical_cast&amp;lt;T>()(%%)-function. This function casts the function-argument to the datatype T. If the input can not be casted as expected, the function throws an exception(% class="mark" %) boost::bad_lexical_cast(%%). So, the try-catch-instruction prevents from sending a bad commandline-input to the server.&amp;#xd;
However, when the commandline-input is correct the following if-statement is executed. In the Argument the call-function is called. The function returns a bool, so it can be used as an argument for the if-statement. If the callback-function add() returns true, the client-node writes the result to the commandline using a logging-message. Otherwise, when the callback-function returns false an error-message is printed in the terminal and the main-function returns with 1.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**build-process** ====&amp;#xd;
&amp;#xd;
At this point the two sourcefiles have been created and stored in the src-directory inside the calculator-package. Before the build-process can start the file CMakeLists.txt has to be prepared.&amp;#xd;
At first open the CMakeLists.txt-file and uncomment the lines&amp;#xd;
&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_service_files(&amp;#xd;
    FILES&amp;#xd;
 )&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Now add (% class="mark" %)calc_srv.srv (%%)under FILES. These lines make sure, that the .srv-file in the directory srv is considered during the build-process.&amp;#xd;
&amp;#xd;
Further, the following lines have to be uncommented.&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
 generate_messages(&amp;#xd;
   DEPENDENCIES&amp;#xd;
 )&amp;#xd;
)))&amp;#xd;
&amp;#xd;
These are required for generating the messages, that are defined inside the service-definition. In this case only standard messagetypes are used, so the only entry will be(% class="mark" %) std_msgs.(%%) This line has to be added under DEPENDENCIES.&amp;#xd;
The next step is to announce the sourcefiles to the build-process. It is important to remember, that the headerfiles calculator/calc_srv.h, which is included in both sourcefiles is not build yet. That is why it is necessary to add dependencies to the CMakeLists.txt-file. These dependencies make sure, that executables are only then be built, when the build of headerfile has finished.&amp;#xd;
The generic structure of the dependency-command is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_dependencies(&amp;lt;target> &amp;lt;target_dependency>)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 In this case the proper command is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_dependencies(server calculator_generate_messages_cpp) # for the server&amp;#xd;
)))&amp;#xd;
&amp;#xd;
or&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_dependencies(client calculator_generate_messages_cpp) # for the client&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 Maybe it seems a bit strange, that the dependency is related to message_generation and not about service-files. But message_generation works for both[^msg_and_srv]&amp;#xd;
With the knowledge from Example 2: hello-world.cpp, the following lines can be added to CMakeLists.txt:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
add_executable(server src/server.cpp)&amp;#xd;
target_link_libraries(server ${catkin_LIBRARIES})&amp;#xd;
add_dependencies(server calculator_generate_messages_cpp)&amp;#xd;
&amp;#xd;
add_executable(client src/client.cpp)&amp;#xd;
target_link_libraries(client ${catkin_LIBRARIES})&amp;#xd;
add_dependencies(client calculator_generate_messages_cpp)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
 Note: The file package.xml has not to be adjusted, because the required dependencies were added when the package was created.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The verylast step is to start the build process. Switch to the top of the workspace and then execute &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
catkin_make&amp;#xd;
)))&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Using the package** ====&amp;#xd;
&amp;#xd;
After a successful build-process two executables are generated. Before they can be used a roscore has to be started. Afterwards, start the server-node with&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator server&amp;#xd;
)))&amp;#xd;
&amp;#xd;
and the cleint node with &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator client a b&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Replace a and b with integer values. For example, execute:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
 $ rosrun calculator client 4 12&amp;#xd;
)))&amp;#xd;
&amp;#xd;
This results in the following output in the server-terminal: &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
[ INFO] [1509369925.682593826]: The two integers are: 4 and 12&amp;#xd;
&amp;#xd;
[ INFO] [1509369925.682726903]: The calculated sum is 16&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The output in the client-terminal will be similar to: &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
[ INFO] [1509369925.683124120]: Result is: 16&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Invalid inputs like&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator client 4 xy&amp;#xd;
)))&amp;#xd;
&amp;#xd;
or&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun calculator client&amp;#xd;
)))&amp;#xd;
&amp;#xd;
will cause error-messages, due to the error-handling in the nodes. &amp;#xd;
&amp;#xd;
&amp;#xd;
=== Example 6: Ask the master ===&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
This is another example for creating a service in a ROS-network. The node provides a service that should return the number of active topics in the ROS network.&amp;#xd;
At first a new package has to be created. The ROS C++-API is needed for sure and furthermore the standard ROS-messages. So, the command for creating the new package is (of course, this command should be executed in the source-folder of the workspace):&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ catkin_create_pkg list_topics roscpp std_msgs message_generation&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The new package is called list_topics with the dependencies roscpp, message_generation and std_msgs.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Define the service** ====&amp;#xd;
&amp;#xd;
The next step is a new one. To define a service switch in the package folder and create a new folder called srv. Open this folder an create a new file. This file contains the definition of the service, i.e. the input and output arguments. This file will be named with "list_topics_service.srv".&amp;#xd;
Then, open the file and type in the definition of the service. The service does not need any input arguments. The output argument, what the service should return, is a single integer value. So, the definition looks like this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
~-~--&amp;#xd;
int16 number_of_topics&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The definition is to read as follows. Over the three hyphens there are the input argument(s). In this case it is empty, but also when it empty a messagetype will be required. This messagetype is std_msgs/Empty. Under the three hyphens are the output argument(s). As seen above, only one argument is listed. The output argument of this service is an 16bit integer called number_of_topics.&amp;#xd;
At this point the service is already defined.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Creating the server** ====&amp;#xd;
&amp;#xd;
After defining the service, a server that provides the service is necessary. For this purpsose change to the folder src within the package directory and create a file named "list_topics_node.cpp". The server, which provides the desired service, is created by the following code:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
#include "ros/ros.h"&amp;#xd;
#include "list_topics/list_topics_service.h"&amp;#xd;
&amp;#xd;
bool number_topics(list_topics::list_topics_service::Request &amp;amp;req, list_topics::list_topics_service::Response &amp;amp;res){&amp;#xd;
    ros::master::V_TopicInfo master_topics;&amp;#xd;
    ros::master::getTopics(master_topics);&amp;#xd;
    int number_t = master_topics.size();&amp;#xd;
    ROS_INFO("Topics: [%i]", (int) number_t);&amp;#xd;
    res.number = number_t;&amp;#xd;
  return true;&amp;#xd;
}&amp;#xd;
&amp;#xd;
int main(int argc, char ~*~*argv)&amp;#xd;
{  &amp;#xd;
  ros::init(argc, argv, "list_topics_node");&amp;#xd;
  ros::NodeHandle handle;&amp;#xd;
\\  ros::ServiceServer service = handle.advertiseService("show_number_of_topics", &amp;amp;number_topics);&amp;#xd;
  ROS_INFO("Returning number of active topics.");&amp;#xd;
  ros::spin();&amp;#xd;
&amp;#xd;
  return 0;&amp;#xd;
}&amp;#xd;
)))&amp;#xd;
&amp;#xd;
At the very top, the requiered libraries are included. ros/ros.h is necessary every time when the ROS C++-API should be used. The header list_topics/list_topics_service.h includes the service-definition. That there is no such headerfile build so far should be kept in mind for the later build-process.&amp;#xd;
Further down, the callback-function, that will be executed when the service is called, is defined. The returntype is always bool. It does not matter, whether it is a function or a member function or anything else.&amp;#xd;
The body of the callback-function contains the&amp;#xd;
instructions, that will be executed when a new request arrives. At the beginning a new vectorobject from the struct V_TopicInfo is created. In the next line the function getTopics (V_TopicInfo &amp;amp;topics) writes all active topics to the vectorobject by reference. Because V_TopicInfo is just a vector of structs, the member function can be used here to return the size of the vector, which is equal to the number of active topics.&amp;#xd;
The last instruction in the callback-function is the return argument.&amp;#xd;
The main-function starts as usual with the initialization of the node. Afterwards the serive_serve is created. The ROS C++-API recommends to do this with the member function of the nodehandle.&amp;#xd;
&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
A ServiceServer should always be created through a call to NodeHandle::advertiseService(), or copied from one that was. Once all copies of a specific ServiceServer go out of scope, the service associated with it will be unadvertised and the service callback will stop being called. (see: ros::ServiceServer Class Reference)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
There are several ways to implement a service. For this introductory example, the simplest option is to use a simple callback function. Only the service name and the name of the callback functions is expected.&amp;#xd;
Following, an info message that the service server is ready and the instruction to pass control to the node.&amp;#xd;
Now the node is almost ready to get build with catkin.&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Building the service-server** ====&amp;#xd;
&amp;#xd;
Before the node can be build, the file CMakeLists.txt has to be adjusted.&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
cmake_minimum_required(VERSION 2.8.3)&amp;#xd;
project(list_topics)&amp;#xd;
&amp;#xd;
find_package(catkin REQUIRED COMPONENTS&amp;#xd;
  message_generation&amp;#xd;
  roscpp&amp;#xd;
  std_msgs&amp;#xd;
)&amp;#xd;
&amp;#xd;
add_service_files(&amp;#xd;
    FILES&amp;#xd;
      list_topics_service.srv&amp;#xd;
                )&amp;#xd;
&amp;#xd;
&amp;#xd;
 generate_messages(&amp;#xd;
   DEPENDENCIES&amp;#xd;
   std_msgs&amp;#xd;
                )&amp;#xd;
&amp;#xd;
include_directories(&amp;#xd;
  ${catkin_INCLUDE_DIRS}&amp;#xd;
)&amp;#xd;
&amp;#xd;
&amp;#xd;
add_executable(list_topics_node src/list_topics_node.cpp)&amp;#xd;
target_link_libraries(list_topics_node ${catkin_LIBRARIES})&amp;#xd;
add_dependencies(list_topics_node list_topics_generate_messages_cpp)&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The required components have been added when the package has been created (see above). At first, catkin has to know that it has to create headerfiles from the service definition. This can be declared in section add_service_files. Further the message-dependencies have to be declared. As a reminder, the service definition is a composition of messages. In this case two standard messages are used. So, In section `generate_messages the entry std_msgs has to be made.&amp;#xd;
After including the catkin directory and adding the executable (see also: example-2-hello-worldcpp), a dependency has to be added, that the service header have to be build before building the executable. Otherwise the build process will throw an error.&amp;#xd;
After editing the CMakeLists.txt file the build process can start:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ catkin_make&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
Note: Usually the manifest package.xml has to be edited as well. But in this case, the required dependencies have been added by using the catkin_create_pkg command with the proper dependencies.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Using the package** ====&amp;#xd;
&amp;#xd;
The service is quite simple to use. Open up three terminals and start a roscore in the first one. Than start with&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun list_topics list_topics_node&amp;#xd;
)))&amp;#xd;
&amp;#xd;
the service-server node.&amp;#xd;
The last step is to call the service. With knowledge from the previous chapter, the command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice call /show_number_of_topics&amp;#xd;
)))&amp;#xd;
&amp;#xd;
should be familiar.&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
=== &amp;#xd;
Further Examples ===&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
As said in the introduction, this is designed as rolling release. So, the number of examples and/or other sections will increase in future.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
==== &amp;#xd;
**Spawn a turtle with a service** ====&amp;#xd;
&amp;#xd;
Another good described example can be found in this free-of-charge book in chapter 8.3. In this example the author describes how to implement a node, that calls the service /spawn provided by the node /turtlesim_node. The proceeding is similar to the above one, but it may be a good exersise to implement it on your own.&amp;#xd;
&amp;#xd;
1. Note: Calling(% class="mark" %) $ rosnode info &amp;lt;node-name>(%%) will return the services provided by the node. ROS nodes&amp;#xd;
1. rosrpc stands for ROS-~_~_R~_~_emote ~_~_P~_~_rocedure ~_~_C~_~_all&amp;#xd;
1. The hyphens are not optional, rather part of the syntax.&amp;#xd;
&lt;/content>
  &lt;attachment>
    &lt;filename>ros_service_basic_struture.png&lt;/filename>
    &lt;author>XWiki.DavidDudzik&lt;/author>
    &lt;date>1545220217000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>8991&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>ros_service_graph.png&lt;/filename>
    &lt;author>XWiki.DavidDudzik&lt;/author>
    &lt;date>1545220848000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>35423&lt;/filesize>
  &lt;/attachment>
&lt;/xwikidoc>@


8.1
log
@@
text
@d13 3
a15 3
  &lt;date>1545223753000&lt;/date>
  &lt;contentUpdateDate>1545223753000&lt;/contentUpdateDate>
  &lt;version>8.1&lt;/version>
d21 599
a619 619
  &lt;content>== Ros service ==

----

Sitemap

* Ros service
** Call a service from the terminal
** Example 5: Server-Client-Adder
*** srv-Typedefinition
*** Creating the server-node
*** Creating the client-node
*** build-process
*** Using the package
** Example 6: Ask the master
*** Define the service
*** Creating the server
*** Building the service-server
*** Using the package
** Further Examples
*** Spawn a turtle with a service


== 
Ros service ==

----

Until now, the communication between two nodes was based on messages, that where published under topics. This is the best way for a continous informationstream or data-exchange. But when there is asynchronous task to do, then there are far better solutions.
The simplest solution in ROS is called "service". A service relies on a request-response-system. That means, one node is sending an service-request to a second node, that is offering a service. The second node is doing the task and then sends a response to the first node, whether the task has failed or suceeded.


(% style="text-align:center" %)
[[image:ros_service_basic_struture.png||alt="Fig.1: ROS service basic structure"]]

{{{Fig.1: ROS service basic structure}}}

Mostly services are called by nodes, but now and then it is helpful to call service from the terminal. To get an impression how a service works, usually in the background, a service is going to be called by hand.

First, two terminals are necessary. In terminal one a (% class="mark" %)roscore(%%) has to be launched. In the second terminal a node will be started:


(% class="box infomessage" %)
(((
$ rosrun turtlesim turtlesim_node
)))

After this, run the command

(% class="box infomessage" %)
(((
$ rosservice list
)))

in a third terminal.
Executing this command will show an output similar to this:

(% class="box infomessage" %)
(((
$ rosservice list
/clear
/kill
/reset
/rosout/get_loggers
/rosout/set_logger_level
/spawn
/turtle1/set_pen
/turtle1/teleport_absolute
/turtle1/teleport_relative
/turtlesim/get_loggers
/turtlesim/set_logger_level
)))

At first glance, there are some services that are binded to a specific namespace and others that are located in the root namespace. But every service is provided by a node, so at first it is interesting to which node the services in the root namespace belong to.
To find this out, type in the above command extend by the option (% class="mark" %)-n(%%).

(% class="box infomessage" %)
(((
$ rosservice list -n
)))

 The output is almost the same as before, but now every service in the list is extended by the node that provides it1.
To get more detailed information to a service, use

(% class="box infomessage" %)
(((
$ rosservice info &amp;lt;service-name>
)))

 The output for the service /kill is:

(% class="box infomessage" %)
(((
$ rosservice info /kill
   Node: /turtlesim
   URI: rosrpc:~/~/ubuntu-ros:37541
   Type: turtlesim/Kill
   Args: name
)))

The node that provides this service is the node /turtlesim with the URI rosrpc:~/~/ubuntu-ros:375412. The type of the service is (% class="mark" %)turtlesim/kill(%%), that takes the argument(% class="mark" %) name.(%%)
There are a lot of service-types in ROS. Some service-types are basic datatypes, but others are a structure of basic datatypes or complex datatypes nested in each other. So, it can be very difficult to discover all in- and outputs. The command

(% class="box infomessage" %)
(((
$ rossrv show &amp;lt;service-type>
)))

will help to solve this problem.

For the service-type(% class="mark" %) turtlesim/kill(%%) the output is:

(% class="box infomessage" %)
(((
$ rossrv show turtlesim/Kill
   string name
   ~-~--
)))

Everthing above the three hyphens3 are the input arguments. In this case there is just one string input argument (the name of the isntance) and no output (or returning) argument. A service-type can contain all thinkable permutations of in-and output arguments. So, it is also possible to have a service-type with no input argument and no output argument. Sending a request to a node that controls a peripherie object, may be a comprehensible scenario. The node just needs to know that the service is called and the callback-function has to be executed. The callback function will return a bool (true or false). This may be the only required information for the node, that sent the request. 



= 
Call a service from the terminal =

----

In the previous section the structure of ROS service has been discussed. Now, a service will be called with the above setup. The example will be executed with the service (% class="mark" %)/kill(%%). Previously, the command (% class="mark" %)$ rossrv show(%%) was used to get information about the necessary input arguments.
This service expects the name of the turtle, which should be removed. So the command will be something like this:

(% class="box infomessage" %)
(((
$ rosservice call /kill 'turtle1'
)))

 After executing this command, the turtle in the window will disappear. For a better understanding what happend, type in[^trouble_shooting_rqt]:

(% class="box infomessage" %)
(((
$ rqt_graph
)))

(% style="text-align:center" %)
[[image:ros_service_graph.png]]


====== **Fig.2: Output of rqt_graph after calling the service /Spawn** ======

Comparing the above figure with rqt_graph/Fig.1 will show, that the node /turtlesim did not disapper. Only the topic /turtle1/cmd_vel is removed from the graph.
To get a new turtle, without restarting the node, use the service /spawn. This might be a good task to get a bit more familiar to the concept of services in ROS. When getting issues, consulte the book A gentle introduction to ROS[^ros_intro], the usage of the service /spawn is described there very well.


= Example 5: Server-Client-Adder =

----

(% class="box" %)
(((
This example is inspired from the example http:~/~/wiki.ros.org/ROS/Tutorials/WritingServiceClient. The idea is taken from this tutorial, but the implementation and the description may differ in some points.
)))

 In this example, a adder based on a server-client-relation will be created. The idea is to send two integer values from the client to the server. The server calculates the sum of the two integer values and returns the sum to the client.
the first step is to create a new package with the appropriate dependencies. The proper command is:

(% class="box infomessage" %)
(((
$ catkin_create_pkg calculator roscpp std_msgs message_generation
)))

 The new generated package is called calculator. (% class="mark" %)roscpp(%%) is required to use the C++-API and message_generation will be needed for generating the service-headers during the build process[^msg_generation].


====   ====

==== 
**srv-Typedefinition** ====

----

After succesful generation of the new package, the definition of the service is required. First, a new folder has to be created in the diretory of the package.

(% class="box infomessage" %)
(((
$ mkdir -p srv
)))

Then, open a new file with

(% class="box infomessage" %)
(((
$ gedit calc_service.srv
)))

This file will contain the definition of the service. For this example two int64 alues are chosen for the request and also a int64 value for the response. So, enter the following lines in to the editor. 

(% class="box infomessage" %)
(((
int64 a
int64 b
~-~--
int64 sum
)))

(% class="box" %)
(((
Note: The three hyphens are part of the syntax.
)))

 From this file the header will generated during the build-process.



===== 
**Creating the server-node** =====

----

===== The next task is creating the nodes. At first, the server node will be created. This takes the response, does some computation and then passes the result back to the client. The source-code can look like this: =====

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "calculator/calc_srv.h"
#include &amp;lt;string>

bool add(calculator::calc_srv::Request  &amp;amp;request, calculator::calc_srv::Response &amp;amp;response){
  response.sum = request.a + request.b;
  ROS_INFO_STREAM("The two integers are: " &amp;lt;&amp;lt; request.a &amp;lt;&amp;lt; " and " &amp;lt;&amp;lt; request.b &amp;lt;&amp;lt; "\n");
  ROS_INFO_STREAM("The calculated sum is " &amp;lt;&amp;lt; response.sum &amp;lt;&amp;lt; "\n");
  return true;
}

int main(int argc, char ~*~*argv)
{  
  ros::init(argc, argv, "server");
  ros::NodeHandle n;

  ros::ServiceServer service = n.advertiseService("calculate", &amp;amp;add);  
  ROS_INFO_STREAM("Server ready.");  
  ros::spin();

  return 0;
}

 
)))

The first two lines include the required header files (% class="mark" %)ros/ros.h (%%)and the new (% class="mark" %)created calculator/calc_srv.h(%%)[^calc_header].
Following this, the function(% class="mark" %) bool add()(%%) is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the (% class="mark" %)class calculator::calc_srv(%%).
Inside the function, the two integers from the object req are added and passed to res.sum. Following, two info-messages are printed to the terminal telling the user what is going on.
The next step is the main-function. At first, the ROS node is initialized as usual. Then, a service-object is created with a member-function of the nodehandle. In the basic configuration it expects two arguments, a servicename and the callback-function. The servicename is chosen as calculate and the callback-function is the one created above. The info-message in the next line is not required, but it is good to know that the server is started.
(% class="mark" %)ros::spin()(%%) is already known from Example 4: Subcriber.


===== 
**Creating the client-node** =====

After the server-node is created successfully (but not build yet), the client-node follows. This will take the input from the commandline and pass the values to the server. After the computation in the server, the result will be passed back to the client. Then, the client will produce the output in the terminal.
So, the code for this task looks as follows:

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "calculator/calc_srv.h"
#include &amp;lt;boost/lexical_cast.hpp>

int main(int argc, char ~*~*argv){    
 
  if (argc != 3)
  {
    ROS_WARN_STREAM("Enter two int_numbers!");
    return 1;
  }

  ros::init(argc, argv, "calc_client");
  ros::NodeHandle n;  
  ros::ServiceClient client = n.serviceClient&amp;lt;calculator::calc_srv>("calculate");  
  calculator::calc_srv srv;

try{
         srv.request.a = boost::lexical_cast&amp;lt;int>(*(argv+1));
           srv.request.b = boost::lexical_cast&amp;lt;int>(*(argv+2));
         }
  catch(const boost::bad_lexical_cast &amp;amp;){
        ROS_ERROR_STREAM("Enter only INTs!");
        return 1;
      }
  
  if (client.call(srv))
  {
      ROS_INFO_STREAM("Result is: " &amp;lt;&amp;lt; srv.response.sum &amp;lt;&amp;lt; "\n");    
  }
  else{
    ROS_ERROR_STREAM("Something went wrong. Bad response from server.");
    return 1; }
  return 0;
}

 
)))


At the top, the library(% class="mark" %) ros/ros.h" (%%)is included as usual, when using the ROS C++-API. (% class="mark" %)calculator/calc_srv.h (%%)provides the informations about the service, which was created in srv-Typedefinition. The boost-library is required for the typecast, later in the code, and the related expection handling.
The main-function starts with a logical-check on the input. (% class="mark" %)argc(%%) contains the number of values entered in the commandline. The if-statement checks for three values, but the server adds only two. On first sight this seems wrong, but the first argument (or better, the zeroth element in the array argv) is always the path where the executable is located. Considering this it is obvious, that the right numbere of argmuents is three.
After this check, the node is created with(% class="mark" %) ros::init()(%%) and(% class="mark" %) ros::NodeHandle(%%). Subsequently the service-client is created in a similiar way as the service-serve. The client-object is initialized by a memberfunction of the nodehandle. At this point it is important to choose the same servicename as the server uses. In this case the right servicename is (% class="mark" %)calculate(%%).


Afterwards an object from (% class="mark" %)calculator::calc_srv(%%) is created. This is required for the next step, where the arguments from the commandline have to be casted from C-string to integer. For this purpose the boost- library provides the (% class="mark" %)lexical_cast&amp;lt;T>()(%%)-function. This function casts the function-argument to the datatype T. If the input can not be casted as expected, the function throws an exception(% class="mark" %) boost::bad_lexical_cast(%%). So, the try-catch-instruction prevents from sending a bad commandline-input to the server.
However, when the commandline-input is correct the following if-statement is executed. In the Argument the call-function is called. The function returns a bool, so it can be used as an argument for the if-statement. If the callback-function add() returns true, the client-node writes the result to the commandline using a logging-message. Otherwise, when the callback-function returns false an error-message is printed in the terminal and the main-function returns with 1.


===== 
**build-process** =====

At this point the two sourcefiles have been created and stored in the src-directory inside the calculator-package. Before the build-process can start the file CMakeLists.txt has to be prepared.
At first open the CMakeLists.txt-file and uncomment the lines


(% class="box infomessage" %)
(((
add_service_files(
    FILES
 )
)))

Now add (% class="mark" %)calc_srv.srv (%%)under FILES. These lines make sure, that the .srv-file in the directory srv is considered during the build-process.

Further, the following lines have to be uncommented.

(% class="box infomessage" %)
(((
 generate_messages(
   DEPENDENCIES
 )
)))

These are required for generating the messages, that are defined inside the service-definition. In this case only standard messagetypes are used, so the only entry will be(% class="mark" %) std_msgs.(%%) This line has to be added under DEPENDENCIES.
The next step is to announce the sourcefiles to the build-process. It is important to remember, that the headerfiles calculator/calc_srv.h, which is included in both sourcefiles is not build yet. That is why it is necessary to add dependencies to the CMakeLists.txt-file. These dependencies make sure, that executables are only then be built, when the build of headerfile has finished.
The generic structure of the dependency-command is:

(% class="box infomessage" %)
(((
add_dependencies(&amp;lt;target> &amp;lt;target_dependency>)
)))

 In this case the proper command is:

(% class="box infomessage" %)
(((
add_dependencies(server calculator_generate_messages_cpp) # for the server
)))

or

(% class="box infomessage" %)
(((
add_dependencies(client calculator_generate_messages_cpp) # for the client
)))

 Maybe it seems a bit strange, that the dependency is related to message_generation and not about service-files. But message_generation works for both[^msg_and_srv]
With the knowledge from Example 2: hello-world.cpp, the following lines can be added to CMakeLists.txt:

(% class="box infomessage" %)
(((
add_executable(server src/server.cpp)
target_link_libraries(server ${catkin_LIBRARIES})
add_dependencies(server calculator_generate_messages_cpp)

add_executable(client src/client.cpp)
target_link_libraries(client ${catkin_LIBRARIES})
add_dependencies(client calculator_generate_messages_cpp)
)))

(% class="box" %)
(((
 Note: The file package.xml has not to be adjusted, because the required dependencies were added when the package was created.
)))

The verylast step is to start the build process. Switch to the top of the workspace and then execute 

(% class="box infomessage" %)
(((
catkin_make
)))


===== 
**Using the package** =====

After a successful build-process two executables are generated. Before they can be used a roscore has to be started. Afterwards, start the server-node with

(% class="box infomessage" %)
(((
$ rosrun calculator server
)))

and the cleint node with 

(% class="box infomessage" %)
(((
$ rosrun calculator client a b
)))

Replace a and b with integer values. For example, execute:

(% class="box infomessage" %)
(((
 $ rosrun calculator client 4 12
)))

This results in the following output in the server-terminal: 

(% class="box infomessage" %)
(((
[ INFO] [1509369925.682593826]: The two integers are: 4 and 12

[ INFO] [1509369925.682726903]: The calculated sum is 16
)))

The output in the client-terminal will be similar to: 

(% class="box infomessage" %)
(((
[ INFO] [1509369925.683124120]: Result is: 16
)))

Invalid inputs like

(% class="box infomessage" %)
(((
$ rosrun calculator client 4 xy
)))

or

(% class="box infomessage" %)
(((
$ rosrun calculator client
)))

will cause error-messages, due to the error-handling in the nodes. 


= Example 6: Ask the master =

----

This is another example for creating a service in a ROS-network. The node provides a service that should return the number of active topics in the ROS network.
At first a new package has to be created. The ROS C++-API is needed for sure and furthermore the standard ROS-messages. So, the command for creating the new package is (of course, this command should be executed in the source-folder of the workspace):

(% class="box infomessage" %)
(((
$ catkin_create_pkg list_topics roscpp std_msgs message_generation
)))

 The new package is called list_topics with the dependencies roscpp, message_generation and std_msgs.


===== 
**Define the service** =====

The next step is a new one. To define a service switch in the package folder and create a new folder called srv. Open this folder an create a new file. This file contains the definition of the service, i.e. the input and output arguments. This file will be named with "list_topics_service.srv".
Then, open the file and type in the definition of the service. The service does not need any input arguments. The output argument, what the service should return, is a single integer value. So, the definition looks like this:

(% class="box infomessage" %)
(((
~-~--
int16 number_of_topics
)))

The definition is to read as follows. Over the three hyphens there are the input argument(s). In this case it is empty, but also when it empty a messagetype will be required. This messagetype is std_msgs/Empty. Under the three hyphens are the output argument(s). As seen above, only one argument is listed. The output argument of this service is an 16bit integer called number_of_topics.
At this point the service is already defined.


===== 
**Creating the server** =====

After defining the service, a server that provides the service is necessary. For this purpsose change to the folder src within the package directory and create a file named "list_topics_node.cpp". The server, which provides the desired service, is created by the following code:

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "list_topics/list_topics_service.h"

bool number_topics(list_topics::list_topics_service::Request &amp;amp;req, list_topics::list_topics_service::Response &amp;amp;res){
    ros::master::V_TopicInfo master_topics;
    ros::master::getTopics(master_topics);
    int number_t = master_topics.size();
    ROS_INFO("Topics: [%i]", (int) number_t);
    res.number = number_t;
  return true;
}

int main(int argc, char ~*~*argv)
{  
  ros::init(argc, argv, "list_topics_node");
  ros::NodeHandle handle;
 
  ros::ServiceServer service = handle.advertiseService("show_number_of_topics", &amp;amp;number_topics);
  ROS_INFO("Returning number of active topics.");
  ros::spin();

  return 0;
}
)))

At the very top, the requiered libraries are included. ros/ros.h is necessary every time when the ROS C++-API should be used. The header list_topics/list_topics_service.h includes the service-definition. That there is no such headerfile build so far should be kept in mind for the later build-process.
Further down, the callback-function, that will be executed when the service is called, is defined. The returntype is always bool. It does not matter, whether it is a function or a member function or anything else.
The body of the callback-function contains the
instructions, that will be executed when a new request arrives. At the beginning a new vectorobject from the struct V_TopicInfo is created. In the next line the function getTopics (V_TopicInfo &amp;amp;topics) writes all active topics to the vectorobject by reference. Because V_TopicInfo is just a vector of structs, the member function can be used here to return the size of the vector, which is equal to the number of active topics.
The last instruction in the callback-function is the return argument.
The main-function starts as usual with the initialization of the node. Afterwards the serive_serve is created. The ROS C++-API recommends to do this with the member function of the nodehandle.


(% class="box" %)
(((
A ServiceServer should always be created through a call to NodeHandle::advertiseService(), or copied from one that was. Once all copies of a specific ServiceServer go out of scope, the service associated with it will be unadvertised and the service callback will stop being called. (see: ros::ServiceServer Class Reference)
)))

There are several ways to implement a service. For this introductory example, the simplest option is to use a simple callback function. Only the service name and the name of the callback functions is expected.
Following, an info message that the service server is ready and the instruction to pass control to the node.
Now the node is almost ready to get build with catkin.


===== 
**Building the service-server** =====

Before the node can be build, the file CMakeLists.txt has to be adjusted.

(% class="box infomessage" %)
(((
cmake_minimum_required(VERSION 2.8.3)
project(list_topics)

find_package(catkin REQUIRED COMPONENTS
  message_generation
  roscpp
  std_msgs
)

add_service_files(
    FILES
      list_topics_service.srv
                )


 generate_messages(
   DEPENDENCIES
   std_msgs
                )

include_directories(
  ${catkin_INCLUDE_DIRS}
)


add_executable(list_topics_node src/list_topics_node.cpp)
target_link_libraries(list_topics_node ${catkin_LIBRARIES})
add_dependencies(list_topics_node list_topics_generate_messages_cpp)
)))

The required components have been added when the package has been created (see above). At first, catkin has to know that it has to create headerfiles from the service definition. This can be declared in section add_service_files. Further the message-dependencies have to be declared. As a reminder, the service definition is a composition of messages. In this case two standard messages are used. So, In section `generate_messages the entry std_msgs has to be made.
After including the catkin directory and adding the executable (see also: example-2-hello-worldcpp), a dependency has to be added, that the service header have to be build before building the executable. Otherwise the build process will throw an error.
After editing the CMakeLists.txt file the build process can start:

(% class="box infomessage" %)
(((
$ catkin_make
)))

(% class="box" %)
(((
Note: Usually the manifest package.xml has to be edited as well. But in this case, the required dependencies have been added by using the catkin_create_pkg command with the proper dependencies.
)))



===== 
**Using the package** =====

The service is quite simple to use. Open up three terminals and start a roscore in the first one. Than start with

(% class="box infomessage" %)
(((
$ rosrun list_topics list_topics_node
)))

the service-server node.
The last step is to call the service. With knowledge from the previous chapter, the command

(% class="box infomessage" %)
(((
$ rosservice call /show_number_of_topics
)))

should be familiar.



= 
Further Examples =

(% class="box" %)
(((
As said in the introduction, this is designed as rolling release. So, the number of examples and/or other sections will increase in future.
)))

===== 
**Spawn a turtle with a service** =====

Another good described example can be found in this free-of-charge book in chapter 8.3. In this example the author describes how to implement a node, that calls the service /spawn provided by the node /turtlesim_node. The proceeding is similar to the above one, but it may be a good exersise to implement it on your own.

1. Note: Calling(% class="mark" %) $ rosnode info &amp;lt;node-name>(%%) will return the services provided by the node. ROS nodes
1. rosrpc stands for ROS-~_~_R~_~_emote ~_~_P~_~_rocedure ~_~_C~_~_all
1. The hyphens are not optional, rather part of the syntax.


 &lt;/content>
@


7.2
log
@@
text
@d13 3
a15 3
  &lt;date>1545223316000&lt;/date>
  &lt;contentUpdateDate>1545223316000&lt;/contentUpdateDate>
  &lt;version>7.2&lt;/version>
d18 1
a18 1
  &lt;minorEdit>true&lt;/minorEdit>
d197 1
a197 1
srv-Typedefinition ====
d235 1
a235 1
Creating the server-node =====
d277 1
a277 1
Creating the client-node =====
d334 1
a334 1
build-process =====
d409 1
a409 1
Using the package =====
d481 1
a481 1
Define the service =====
d486 5
d492 2
d495 144
@


7.1
log
@@
text
@d13 3
a15 3
  &lt;date>1545222432000&lt;/date>
  &lt;contentUpdateDate>1545222432000&lt;/contentUpdateDate>
  &lt;version>7.1&lt;/version>
d18 1
a18 1
  &lt;minorEdit>false&lt;/minorEdit>
a43 1

d289 1
a289 1
  
d309 1
a309 1
   
d379 110
a488 1
)))&lt;/content>
@


6.1
log
@@
text
@d13 3
a15 3
  &lt;date>1545222189000&lt;/date>
  &lt;contentUpdateDate>1545222189000&lt;/contentUpdateDate>
  &lt;version>6.1&lt;/version>
a44 1

d271 1
a271 1
Following this, the function(% class="mark" %) bool add()(%%) is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the (% class="mark" %)class calculator::calc_srv(%%).
d290 1
a290 1
   
d310 1
a310 1
    
d325 1
a325 1
At the top, the library(% class="mark" %) ros/ros.h" (%%)is included as usual, when using the ROS C++-API. (% class="mark" %)calculator/calc_srv.h (%%)provides the informations about the service, which was created in srv-Typedefinition. The boost-library is required for the typecast, later in the code, and the related expection handling.
d327 1
a327 1
After this check, the node is created with(% class="mark" %) ros::init()(%%) and(% class="mark" %) ros::NodeHandle(%%). Subsequently the service-client is created in a similiar way as the service-serve. The client-object is initialized by a memberfunction of the nodehandle. At this point it is important to choose the same servicename as the server uses. In this case the right servicename is (% class="mark" %)calculate(%%).
d330 1
a330 1
Afterwards an object from (% class="mark" %)calculator::calc_srv(%%) is created. This is required for the next step, where the arguments from the commandline have to be casted from C-string to integer. For this purpose the boost- library provides the (% class="mark" %)lexical_cast&amp;lt;T>()(%%)-function. This function casts the function-argument to the datatype T. If the input can not be casted as expected, the function throws an exception(% class="mark" %) boost::bad_lexical_cast(%%). So, the try-catch-instruction prevents from sending a bad commandline-input to the server.
d359 1
a359 1
These are required for generating the messages, that are defined inside the service-definition. In this case only standard messagetypes are used, so the only entry will be(% class="mark" %) std_msgs.(%%) This line has to be added under DEPENDENCIES.
d361 20
a380 1
The generic structure of the dependency-command is:&lt;/content>
@


5.1
log
@@
text
@&lt;?xml version='1.1' encoding='UTF-8'?>
&lt;xwikidoc version="1.3" reference="Projects.MoRoP.ROS GettingStarted.ROS service.WebHome" locale="">
  &lt;web>Projects.MoRoP.ROS GettingStarted.ROS service&lt;/web>
  &lt;name>WebHome&lt;/name>
  &lt;language/>
  &lt;defaultLanguage>en&lt;/defaultLanguage>
  &lt;translation>0&lt;/translation>
  &lt;creator>XWiki.DavidDudzik&lt;/creator>
  &lt;creationDate>1545220035000&lt;/creationDate>
  &lt;parent>Projects.MoRoP.ROS GettingStarted.WebHome&lt;/parent>
  &lt;author>XWiki.DavidDudzik&lt;/author>
  &lt;contentAuthor>XWiki.DavidDudzik&lt;/contentAuthor>
  &lt;date>1545221639000&lt;/date>
  &lt;contentUpdateDate>1545221639000&lt;/contentUpdateDate>
  &lt;version>5.1&lt;/version>
  &lt;title>ROS service&lt;/title>
  &lt;comment/>
  &lt;minorEdit>false&lt;/minorEdit>
  &lt;syntaxId>xwiki/2.1&lt;/syntaxId>
  &lt;hidden>false&lt;/hidden>
  &lt;content>== Ros service ==&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Sitemap&amp;#xd;
&amp;#xd;
* Ros service&amp;#xd;
&amp;#xd;
&amp;#xd;
** Call a service from the terminal&amp;#xd;
** Example 5: Server-Client-Adder&amp;#xd;
*** srv-Typedefinition&amp;#xd;
*** Creating the server-node&amp;#xd;
*** Creating the client-node&amp;#xd;
*** build-process&amp;#xd;
*** Using the package&amp;#xd;
&amp;#xd;
&amp;#xd;
** Example 6: Ask the master&amp;#xd;
*** Define the service&amp;#xd;
*** Creating the server&amp;#xd;
*** Building the service-server&amp;#xd;
*** Using the package&amp;#xd;
&amp;#xd;
&amp;#xd;
** Further Examples&amp;#xd;
*** Spawn a turtle with a service&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
== &amp;#xd;
Ros service ==&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
Until now, the communication between two nodes was based on messages, that where published under topics. This is the best way for a continous informationstream or data-exchange. But when there is asynchronous task to do, then there are far better solutions.&amp;#xd;
The simplest solution in ROS is called "service". A service relies on a request-response-system. That means, one node is sending an service-request to a second node, that is offering a service. The second node is doing the task and then sends a response to the first node, whether the task has failed or suceeded.&amp;#xd;
&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:ros_service_basic_struture.png||alt="Fig.1: ROS service basic structure"]]&amp;#xd;
&amp;#xd;
{{{Fig.1: ROS service basic structure}}}&amp;#xd;
&amp;#xd;
Mostly services are called by nodes, but now and then it is helpful to call service from the terminal. To get an impression how a service works, usually in the background, a service is going to be called by hand.&amp;#xd;
&amp;#xd;
First, two terminals are necessary. In terminal one a (% class="mark" %)roscore(%%) has to be launched. In the second terminal a node will be started:&amp;#xd;
&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosrun turtlesim turtlesim_node&amp;#xd;
)))&amp;#xd;
&amp;#xd;
After this, run the command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list&amp;#xd;
)))&amp;#xd;
&amp;#xd;
in a third terminal.&amp;#xd;
Executing this command will show an output similar to this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list&amp;#xd;
/clear&amp;#xd;
/kill&amp;#xd;
/reset&amp;#xd;
/rosout/get_loggers&amp;#xd;
/rosout/set_logger_level&amp;#xd;
/spawn&amp;#xd;
/turtle1/set_pen&amp;#xd;
/turtle1/teleport_absolute&amp;#xd;
/turtle1/teleport_relative&amp;#xd;
/turtlesim/get_loggers&amp;#xd;
/turtlesim/set_logger_level&amp;#xd;
)))&amp;#xd;
&amp;#xd;
At first glance, there are some services that are binded to a specific namespace and others that are located in the root namespace. But every service is provided by a node, so at first it is interesting to which node the services in the root namespace belong to.&amp;#xd;
To find this out, type in the above command extend by the option (% class="mark" %)-n(%%).&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice list -n&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The output is almost the same as before, but now every service in the list is extended by the node that provides it1.&amp;#xd;
To get more detailed information to a service, use&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice info &amp;lt;service-name>&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The output for the service /kill is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice info /kill&amp;#xd;
   Node: /turtlesim&amp;#xd;
   URI: rosrpc:~/~/ubuntu-ros:37541&amp;#xd;
   Type: turtlesim/Kill&amp;#xd;
   Args: name&amp;#xd;
)))&amp;#xd;
&amp;#xd;
The node that provides this service is the node /turtlesim with the URI rosrpc:~/~/ubuntu-ros:375412. The type of the service is (% class="mark" %)turtlesim/kill(%%), that takes the argument(% class="mark" %) name.(%%)&amp;#xd;
There are a lot of service-types in ROS. Some service-types are basic datatypes, but others are a structure of basic datatypes or complex datatypes nested in each other. So, it can be very difficult to discover all in- and outputs. The command&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rossrv show &amp;lt;service-type>&amp;#xd;
)))&amp;#xd;
&amp;#xd;
will help to solve this problem.&amp;#xd;
&amp;#xd;
For the service-type(% class="mark" %) turtlesim/kill(%%) the output is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rossrv show turtlesim/Kill&amp;#xd;
   string name&amp;#xd;
   ~-~--&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Everthing above the three hyphens3 are the input arguments. In this case there is just one string input argument (the name of the isntance) and no output (or returning) argument. A service-type can contain all thinkable permutations of in-and output arguments. So, it is also possible to have a service-type with no input argument and no output argument. Sending a request to a node that controls a peripherie object, may be a comprehensible scenario. The node just needs to know that the service is called and the callback-function has to be executed. The callback function will return a bool (true or false). This may be the only required information for the node, that sent the request. &amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
= &amp;#xd;
Call a service from the terminal =&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
In the previous section the structure of ROS service has been discussed. Now, a service will be called with the above setup. The example will be executed with the service (% class="mark" %)/kill(%%). Previously, the command (% class="mark" %)$ rossrv show(%%) was used to get information about the necessary input arguments.&amp;#xd;
This service expects the name of the turtle, which should be removed. So the command will be something like this:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rosservice call /kill 'turtle1'&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 After executing this command, the turtle in the window will disappear. For a better understanding what happend, type in[^trouble_shooting_rqt]:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ rqt_graph&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% style="text-align:center" %)&amp;#xd;
[[image:ros_service_graph.png]]&amp;#xd;
&amp;#xd;
&amp;#xd;
====== **Fig.2: Output of rqt_graph after calling the service /Spawn** ======&amp;#xd;
&amp;#xd;
Comparing the above figure with rqt_graph/Fig.1 will show, that the node /turtlesim did not disapper. Only the topic /turtle1/cmd_vel is removed from the graph.&amp;#xd;
To get a new turtle, without restarting the node, use the service /spawn. This might be a good task to get a bit more familiar to the concept of services in ROS. When getting issues, consulte the book A gentle introduction to ROS[^ros_intro], the usage of the service /spawn is described there very well.&amp;#xd;
&amp;#xd;
&amp;#xd;
= Example 5: Server-Client-Adder =&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
This example is inspired from the example http:~/~/wiki.ros.org/ROS/Tutorials/WritingServiceClient. The idea is taken from this tutorial, but the implementation and the description may differ in some points.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 In this example, a adder based on a server-client-relation will be created. The idea is to send two integer values from the client to the server. The server calculates the sum of the two integer values and returns the sum to the client.&amp;#xd;
the first step is to create a new package with the appropriate dependencies. The proper command is:&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ catkin_create_pkg calculator roscpp std_msgs message_generation&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 The new generated package is called calculator. (% class="mark" %)roscpp(%%) is required to use the C++-API and message_generation will be needed for generating the service-headers during the build process[^msg_generation].&amp;#xd;
&amp;#xd;
&amp;#xd;
====   ====&amp;#xd;
&amp;#xd;
==== &amp;#xd;
srv-Typedefinition ====&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
After succesful generation of the new package, the definition of the service is required. First, a new folder has to be created in the diretory of the package.&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ mkdir -p srv&amp;#xd;
)))&amp;#xd;
&amp;#xd;
Then, open a new file with&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
$ gedit calc_service.srv&amp;#xd;
)))&amp;#xd;
&amp;#xd;
This file will contain the definition of the service. For this example two int64 alues are chosen for the request and also a int64 value for the response. So, enter the following lines in to the editor. &amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
int64 a&amp;#xd;
int64 b&amp;#xd;
~-~--&amp;#xd;
int64 sum&amp;#xd;
)))&amp;#xd;
&amp;#xd;
(% class="box" %)&amp;#xd;
(((&amp;#xd;
Note: The three hyphens are part of the syntax.&amp;#xd;
)))&amp;#xd;
&amp;#xd;
 From this file the header will generated during the build-process.&amp;#xd;
&amp;#xd;
&amp;#xd;
&amp;#xd;
===== &amp;#xd;
Creating the server-node =====&amp;#xd;
&amp;#xd;
----&amp;#xd;
&amp;#xd;
===== The next task is creating the nodes. At first, the server node will be created. This takes the response, does some computation and then passes the result back to the client. The source-code can look like this: =====&amp;#xd;
&amp;#xd;
(% class="box infomessage" %)&amp;#xd;
(((&amp;#xd;
#include "ros/ros.h"&amp;#xd;
#include "calculator/calc_srv.h"&amp;#xd;
#include &amp;lt;string>&amp;#xd;
&amp;#xd;
bool add(calculator::calc_srv::Request  &amp;amp;request, calculator::calc_srv::Response &amp;amp;response){&amp;#xd;
  response.sum = request.a + request.b;&amp;#xd;
  ROS_INFO_STREAM("The two integers are: " &amp;lt;&amp;lt; request.a &amp;lt;&amp;lt; " and " &amp;lt;&amp;lt; request.b &amp;lt;&amp;lt; "\n");&amp;#xd;
  ROS_INFO_STREAM("The calculated sum is " &amp;lt;&amp;lt; response.sum &amp;lt;&amp;lt; "\n");&amp;#xd;
  return true;&amp;#xd;
}&amp;#xd;
&amp;#xd;
int main(int argc, char ~*~*argv)&amp;#xd;
{  &amp;#xd;
  ros::init(argc, argv, "server");&amp;#xd;
  ros::NodeHandle n;&amp;#xd;
&amp;#xd;
  ros::ServiceServer service = n.advertiseService("calculate", &amp;amp;add);  &amp;#xd;
  ROS_INFO_STREAM("Server ready.");  &amp;#xd;
  ros::spin();&amp;#xd;
&amp;#xd;
  return 0;&amp;#xd;
}&amp;#xd;
&amp;#xd;
 &amp;#xd;
)))&amp;#xd;
&amp;#xd;
The first two lines include the required header files ros/ros.hand the new created calculator/calc_srv.h[^calc_header].&amp;#xd;
Following this, the function bool add() is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the class calculator::calc_srv.&amp;#xd;
Inside the function, the two integers from the object req are added and passed to res.sum. Following, two info-messages are printed to the terminal telling the user what is going on.&amp;#xd;
The next step is the main-function. At first, the ROS node is initialized as usual. Then, a service-object is created with a member-function of the nodehandle. In the basic configuration it expects two arguments, a servicename and the callback-function. The servicename is chosen as calculate and the callback-function is the one created above. The info-message in the next line is not required, but it is good to know that the server is started.&amp;#xd;
ros::spin() is already known from Example 4: Subcriber.&amp;#xd;
&amp;#xd;
&amp;#xd;
 &lt;/content>
  &lt;attachment>
    &lt;filename>ros_service_basic_struture.png&lt;/filename>
    &lt;author>XWiki.DavidDudzik&lt;/author>
    &lt;date>1545220217000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>8991&lt;/filesize>
  &lt;/attachment>
  &lt;attachment>
    &lt;filename>ros_service_graph.png&lt;/filename>
    &lt;author>XWiki.DavidDudzik&lt;/author>
    &lt;date>1545220848000&lt;/date>
    &lt;version>1.1&lt;/version>
    &lt;comment/>
    &lt;filesize>35423&lt;/filesize>
  &lt;/attachment>
&lt;/xwikidoc>@


4.1
log
@@
text
@d13 3
a15 3
  &lt;date>1545221330000&lt;/date>
  &lt;contentUpdateDate>1545221330000&lt;/contentUpdateDate>
  &lt;version>4.1&lt;/version>
d21 265
a285 241
  &lt;content>== Ros service ==

----

Sitemap






== 
Ros service ==

----

Until now, the communication between two nodes was based on messages, that where published under topics. This is the best way for a continous informationstream or data-exchange. But when there is asynchronous task to do, then there are far better solutions.
The simplest solution in ROS is called "service". A service relies on a request-response-system. That means, one node is sending an service-request to a second node, that is offering a service. The second node is doing the task and then sends a response to the first node, whether the task has failed or suceeded.


[[image:ros_service_basic_struture.png||alt="Fig.1: ROS service basic structure"]]

{{{Fig.1: ROS service basic structure}}}

Mostly services are called by nodes, but now and then it is helpful to call service from the terminal. To get an impression how a service works, usually in the background, a service is going to be called by hand.

First, two terminals are necessary. In terminal one a (% class="mark" %)roscore(%%) has to be launched. In the second terminal a node will be started:


(% class="box infomessage" %)
(((
$ rosrun turtlesim turtlesim_node
)))

After this, run the command

(% class="box infomessage" %)
(((
$ rosservice list
)))

in a third terminal.
Executing this command will show an output similar to this:

(% class="box infomessage" %)
(((
$ rosservice list
/clear
/kill
/reset
/rosout/get_loggers
/rosout/set_logger_level
/spawn
/turtle1/set_pen
/turtle1/teleport_absolute
/turtle1/teleport_relative
/turtlesim/get_loggers
/turtlesim/set_logger_level
)))

At first glance, there are some services that are binded to a specific namespace and others that are located in the root namespace. But every service is provided by a node, so at first it is interesting to which node the services in the root namespace belong to.
To find this out, type in the above command extend by the option (% class="mark" %)-n(%%).

(% class="box infomessage" %)
(((
$ rosservice list -n
)))

 The output is almost the same as before, but now every service in the list is extended by the node that provides it1.
To get more detailed information to a service, use

(% class="box infomessage" %)
(((
$ rosservice info &amp;lt;service-name>
)))

 The output for the service /kill is:

(% class="box infomessage" %)
(((
$ rosservice info /kill
   Node: /turtlesim
   URI: rosrpc:~/~/ubuntu-ros:37541
   Type: turtlesim/Kill
   Args: name
)))

The node that provides this service is the node /turtlesim with the URI rosrpc:~/~/ubuntu-ros:375412. The type of the service is (% class="mark" %)turtlesim/kill(%%), that takes the argument(% class="mark" %) name.(%%)
There are a lot of service-types in ROS. Some service-types are basic datatypes, but others are a structure of basic datatypes or complex datatypes nested in each other. So, it can be very difficult to discover all in- and outputs. The command

(% class="box infomessage" %)
(((
$ rossrv show &amp;lt;service-type>
)))

will help to solve this problem.

For the service-type(% class="mark" %) turtlesim/kill(%%) the output is:

(% class="box infomessage" %)
(((
$ rossrv show turtlesim/Kill
   string name
   ~-~--
)))

Everthing above the three hyphens3 are the input arguments. In this case there is just one string input argument (the name of the isntance) and no output (or returning) argument. A service-type can contain all thinkable permutations of in-and output arguments. So, it is also possible to have a service-type with no input argument and no output argument. Sending a request to a node that controls a peripherie object, may be a comprehensible scenario. The node just needs to know that the service is called and the callback-function has to be executed. The callback function will return a bool (true or false). This may be the only required information for the node, that sent the request. 



= 
Call a service from the terminal =

----

In the previous section the structure of ROS service has been discussed. Now, a service will be called with the above setup. The example will be executed with the service (% class="mark" %)/kill(%%). Previously, the command (% class="mark" %)$ rossrv show(%%) was used to get information about the necessary input arguments.
This service expects the name of the turtle, which should be removed. So the command will be something like this:

(% class="box infomessage" %)
(((
$ rosservice call /kill 'turtle1'
)))

 After executing this command, the turtle in the window will disappear. For a better understanding what happend, type in[^trouble_shooting_rqt]:

(% class="box infomessage" %)
(((
$ rqt_graph
)))

 [[image:ros_service_graph.png]]


====== **Fig.2: Output of rqt_graph after calling the service /Spawn** ======

Comparing the above figure with rqt_graph/Fig.1 will show, that the node /turtlesim did not disapper. Only the topic /turtle1/cmd_vel is removed from the graph.
To get a new turtle, without restarting the node, use the service /spawn. This might be a good task to get a bit more familiar to the concept of services in ROS. When getting issues, consulte the book A gentle introduction to ROS[^ros_intro], the usage of the service /spawn is described there very well.


= Example 5: Server-Client-Adder =

----

(% class="box" %)
(((
This example is inspired from the example http:~/~/wiki.ros.org/ROS/Tutorials/WritingServiceClient. The idea is taken from this tutorial, but the implementation and the description may differ in some points.
)))

 In this example, a adder based on a server-client-relation will be created. The idea is to send two integer values from the client to the server. The server calculates the sum of the two integer values and returns the sum to the client.
the first step is to create a new package with the appropriate dependencies. The proper command is:

(% class="box infomessage" %)
(((
$ catkin_create_pkg calculator roscpp std_msgs message_generation
)))

 The new generated package is called calculator. (% class="mark" %)roscpp(%%) is required to use the C++-API and message_generation will be needed for generating the service-headers during the build process[^msg_generation].


====   ====

==== 
srv-Typedefinition ====

----

After succesful generation of the new package, the definition of the service is required. First, a new folder has to be created in the diretory of the package.

(% class="box infomessage" %)
(((
$ mkdir -p srv
)))

Then, open a new file with

(% class="box infomessage" %)
(((
$ gedit calc_service.srv
)))

This file will contain the definition of the service. For this example two int64 alues are chosen for the request and also a int64 value for the response. So, enter the following lines in to the editor. 

(% class="box infomessage" %)
(((
int64 a
int64 b
~-~--
int64 sum
)))

(% class="box" %)
(((
Note: The three hyphens are part of the syntax.
)))

 From this file the header will generated during the build-process.



===== 
Creating the server-node =====

----

===== The next task is creating the nodes. At first, the server node will be created. This takes the response, does some computation and then passes the result back to the client. The source-code can look like this: =====

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "calculator/calc_srv.h"
#include &amp;lt;string>

bool add(calculator::calc_srv::Request  &amp;amp;request, calculator::calc_srv::Response &amp;amp;response){
  response.sum = request.a + request.b;
  ROS_INFO_STREAM("The two integers are: " &amp;lt;&amp;lt; request.a &amp;lt;&amp;lt; " and " &amp;lt;&amp;lt; request.b &amp;lt;&amp;lt; "\n");
  ROS_INFO_STREAM("The calculated sum is " &amp;lt;&amp;lt; response.sum &amp;lt;&amp;lt; "\n");
  return true;
}

int main(int argc, char ~*~*argv)
{  
  ros::init(argc, argv, "server");
  ros::NodeHandle n;

  ros::ServiceServer service = n.advertiseService("calculate", &amp;amp;add);  
  ROS_INFO_STREAM("Server ready.");  
  ros::spin();

  return 0;
}

 
)))

The first two lines include the required header files ros/ros.hand the new created calculator/calc_srv.h[^calc_header].
Following this, the function bool add() is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the class calculator::calc_srv.
Inside the function, the two integers from the object req are added and passed to res.sum. Following, two info-messages are printed to the terminal telling the user what is going on.
The next step is the main-function. At first, the ROS node is initialized as usual. Then, a service-object is created with a member-function of the nodehandle. In the basic configuration it expects two arguments, a servicename and the callback-function. The servicename is chosen as calculate and the callback-function is the one created above. The info-message in the next line is not required, but it is good to know that the server is started.
ros::spin() is already known from Example 4: Subcriber.


@


3.1
log
@Uploaded new attachment "ros_service_graph.png", version {1}
@
text
@d13 3
a15 3
  &lt;date>1545220848000&lt;/date>
  &lt;contentUpdateDate>1545220035000&lt;/contentUpdateDate>
  &lt;version>3.1&lt;/version>
d17 1
a17 1
  &lt;comment>Uploaded new attachment "ros_service_graph.png", version {1}&lt;/comment>
d41 1
d43 219
@


2.1
log
@Uploaded new attachment "ros_service_basic_struture.png", version {1}
@
text
@d13 1
a13 1
  &lt;date>1545220218000&lt;/date>
d15 1
a15 1
  &lt;version>2.1&lt;/version>
d17 1
a17 1
  &lt;comment>Uploaded new attachment "ros_service_basic_struture.png", version {1}&lt;/comment>
d51 8
@


1.1
log
@@
text
@d13 1
a13 1
  &lt;date>1545220035000&lt;/date>
d15 1
a15 1
  &lt;version>1.1&lt;/version>
d17 1
a17 1
  &lt;comment/>
d43 8
@
</versions>
  <parent>Projects.MoRoP.ROS GettingStarted.WebHome</parent>
  <author>XWiki.DavidDudzik</author>
  <contentAuthor>XWiki.DavidDudzik</contentAuthor>
  <date>1550742478000</date>
  <contentUpdateDate>1550742350000</contentUpdateDate>
  <version>13.1</version>
  <title>ROS service</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>**Sitemap**

----


{{toc start="2"/}}





== Ros service ==

----

Until now, the communication between two nodes was based on messages, that where published under topics. This is the best way for a continous informationstream or data-exchange. But when there is asynchronous task to do, then there are far better solutions.
The simplest solution in ROS is called "service". A service relies on a request-response-system. That means, one node is sending an service-request to a second node, that is offering a service. The second node is doing the task and then sends a response to the first node, whether the task has failed or suceeded.


(% style="text-align:center" %)
[[image:ros_service_basic_struture.png||alt="Fig.1: ROS service basic structure"]]

{{{Fig.1: ROS service basic structure}}}

Mostly services are called by nodes, but now and then it is helpful to call service from the terminal. To get an impression how a service works, usually in the background, a service is going to be called by hand.

First, two terminals are necessary. In terminal one a (% class="mark" %)roscore(%%) has to be launched. In the second terminal a node will be started:


(% class="box infomessage" %)
(((
$ rosrun turtlesim turtlesim_node
)))

After this, run the command

(% class="box infomessage" %)
(((
$ rosservice list
)))

in a third terminal.
Executing this command will show an output similar to this:

(% class="box infomessage" %)
(((
$ rosservice list
/clear
/kill
/reset
/rosout/get_loggers
/rosout/set_logger_level
/spawn
/turtle1/set_pen
/turtle1/teleport_absolute
/turtle1/teleport_relative
/turtlesim/get_loggers
/turtlesim/set_logger_level
)))

At first glance, there are some services that are binded to a specific namespace and others that are located in the root namespace. But every service is provided by a node, so at first it is interesting to which node the services in the root namespace belong to.
To find this out, type in the above command extend by the option (% class="mark" %)-n(%%).

(% class="box infomessage" %)
(((
$ rosservice list -n
)))

 The output is almost the same as before, but now every service in the list is extended by the node that provides it1.
To get more detailed information to a service, use

(% class="box infomessage" %)
(((
$ rosservice info &lt;service-name>
)))

 The output for the service /kill is:

(% class="box infomessage" %)
(((
$ rosservice info /kill
   Node: /turtlesim
   URI: rosrpc:~/~/ubuntu-ros:37541
   Type: turtlesim/Kill
   Args: name
)))

The node that provides this service is the node /turtlesim with the URI rosrpc:~/~/ubuntu-ros:375412. The type of the service is (% class="mark" %)turtlesim/kill(%%), that takes the argument(% class="mark" %) name.(%%)
There are a lot of service-types in ROS. Some service-types are basic datatypes, but others are a structure of basic datatypes or complex datatypes nested in each other. So, it can be very difficult to discover all in- and outputs. The command

(% class="box infomessage" %)
(((
$ rossrv show &lt;service-type>
)))

will help to solve this problem.

For the service-type(% class="mark" %) turtlesim/kill(%%) the output is:

(% class="box infomessage" %)
(((
$ rossrv show turtlesim/Kill
   string name
   ~-~--
)))

Everthing above the three hyphens3 are the input arguments. In this case there is just one string input argument (the name of the isntance) and no output (or returning) argument. A service-type can contain all thinkable permutations of in-and output arguments. So, it is also possible to have a service-type with no input argument and no output argument. Sending a request to a node that controls a peripherie object, may be a comprehensible scenario. The node just needs to know that the service is called and the callback-function has to be executed. The callback function will return a bool (true or false). This may be the only required information for the node, that sent the request. 



=== Call a service from the terminal ===

----

In the previous section the structure of ROS service has been discussed. Now, a service will be called with the above setup. The example will be executed with the service (% class="mark" %)/kill(%%). Previously, the command (% class="mark" %)$ rossrv show(%%) was used to get information about the necessary input arguments.
This service expects the name of the turtle, which should be removed. So the command will be something like this:

(% class="box infomessage" %)
(((
$ rosservice call /kill 'turtle1'
)))

 After executing this command, the turtle in the window will disappear. For a better understanding what happend, type in[^trouble_shooting_rqt]:

(% class="box infomessage" %)
(((
$ rqt_graph
)))

(% style="text-align:center" %)
[[image:ros_service_graph.png]]


(% class="wikigeneratedid" id="HFig.2:Outputofrqt_graphaftercallingtheservice2FSpawn" %)
(((
**Fig.2: Output of rqt_graph after calling the service /Spawn**
)))

Comparing the above figure with rqt_graph/Fig.1 will show, that the node /turtlesim did not disapper. Only the topic /turtle1/cmd_vel is removed from the graph.
To get a new turtle, without restarting the node, use the service /spawn. This might be a good task to get a bit more familiar to the concept of services in ROS. When getting issues, consulte the book A gentle introduction to ROS[^ros_intro], the usage of the service /spawn is described there very well.


=== Example 5: Server-Client-Adder ===

----

(% class="box" %)
(((
This example is inspired from the example http:~/~/wiki.ros.org/ROS/Tutorials/WritingServiceClient. The idea is taken from this tutorial, but the implementation and the description may differ in some points.
)))

 In this example, a adder based on a server-client-relation will be created. The idea is to send two integer values from the client to the server. The server calculates the sum of the two integer values and returns the sum to the client.
the first step is to create a new package with the appropriate dependencies. The proper command is:

(% class="box infomessage" %)
(((
$ catkin_create_pkg calculator roscpp std_msgs message_generation
)))

 The new generated package is called calculator. (% class="mark" %)roscpp(%%) is required to use the C++-API and message_generation will be needed for generating the service-headers during the build process[^msg_generation].


==== **srv-Typedefinition** ====

----

After succesful generation of the new package, the definition of the service is required. First, a new folder has to be created in the diretory of the package.

(% class="box infomessage" %)
(((
$ mkdir -p srv
)))

Then, open a new file with

(% class="box infomessage" %)
(((
$ gedit calc_service.srv
)))

This file will contain the definition of the service. For this example two int64 alues are chosen for the request and also a int64 value for the response. So, enter the following lines in to the editor. 

(% class="box infomessage" %)
(((
int64 a
int64 b
~-~--
int64 sum
)))

(% class="box" %)
(((
Note: The three hyphens are part of the syntax.
)))

 From this file the header will generated during the build-process.



==== **Creating the server-node** ====

----

(% class="wikigeneratedid" id="HThenexttaskiscreatingthenodes.Atfirst2Ctheservernodewillbecreated.Thistakestheresponse2Cdoessomecomputationandthenpassestheresultbacktotheclient.Thesource-codecanlooklikethis:" %)
(((
//The next task is creating the nodes. At first, the server node will be created. This takes the response, does some computation and then passes the result back to the client. The source-code can look like this~://
)))

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "calculator/calc_srv.h"
#include &lt;string>

bool add(calculator::calc_srv::Request  &amp;request, calculator::calc_srv::Response &amp;response){
  response.sum = request.a + request.b;
  ROS_INFO_STREAM("The two integers are: " &lt;&lt; request.a &lt;&lt; " and " &lt;&lt; request.b &lt;&lt; "\n");
  ROS_INFO_STREAM("The calculated sum is " &lt;&lt; response.sum &lt;&lt; "\n");
  return true;
}

int main(int argc, char ~*~*argv)
{  
  ros::init(argc, argv, "server");
  ros::NodeHandle n;

  ros::ServiceServer service = n.advertiseService("calculate", &amp;add);  
  ROS_INFO_STREAM("Server ready.");  
  ros::spin();

  return 0;
}

 
)))

The first two lines include the required header files (% class="mark" %)ros/ros.h (%%)and the new (% class="mark" %)created calculator/calc_srv.h(%%)[^calc_header].
Following this, the function(% class="mark" %) bool add()(%%) is defined and declared. This will be used as a callback-function for the service-object. The function expects a request- and a response-object from the (% class="mark" %)class calculator::calc_srv(%%).
Inside the function, the two integers from the object req are added and passed to res.sum. Following, two info-messages are printed to the terminal telling the user what is going on.
The next step is the main-function. At first, the ROS node is initialized as usual. Then, a service-object is created with a member-function of the nodehandle. In the basic configuration it expects two arguments, a servicename and the callback-function. The servicename is chosen as calculate and the callback-function is the one created above. The info-message in the next line is not required, but it is good to know that the server is started.
(% class="mark" %)ros::spin()(%%) is already known from Example 4: Subcriber.


==== **Creating the client-node** ====

After the server-node is created successfully (but not build yet), the client-node follows. This will take the input from the commandline and pass the values to the server. After the computation in the server, the result will be passed back to the client. Then, the client will produce the output in the terminal.
So, the code for this task looks as follows:

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "calculator/calc_srv.h"
#include &lt;boost/lexical_cast.hpp>

int main(int argc, char ~*~*argv){    
\\  if (argc != 3)
  {
    ROS_WARN_STREAM("Enter two int_numbers!");
    return 1;
  }

  ros::init(argc, argv, "calc_client");
  ros::NodeHandle n;  
  ros::ServiceClient client = n.serviceClient&lt;calculator::calc_srv>("calculate");  
  calculator::calc_srv srv;

try{
         srv.request.a = boost::lexical_cast&lt;int>(*(argv+1));
           srv.request.b = boost::lexical_cast&lt;int>(*(argv+2));
         }
  catch(const boost::bad_lexical_cast &amp;){
        ROS_ERROR_STREAM("Enter only INTs!");
        return 1;
      }
\\  if (client.call(srv))
  {
      ROS_INFO_STREAM("Result is: " &lt;&lt; srv.response.sum &lt;&lt; "\n");    
  }
  else{
    ROS_ERROR_STREAM("Something went wrong. Bad response from server.");
    return 1; }
  return 0;
}

 
)))


At the top, the library(% class="mark" %) ros/ros.h" (%%)is included as usual, when using the ROS C++-API. (% class="mark" %)calculator/calc_srv.h (%%)provides the informations about the service, which was created in srv-Typedefinition. The boost-library is required for the typecast, later in the code, and the related expection handling.
The main-function starts with a logical-check on the input. (% class="mark" %)argc(%%) contains the number of values entered in the commandline. The if-statement checks for three values, but the server adds only two. On first sight this seems wrong, but the first argument (or better, the zeroth element in the array argv) is always the path where the executable is located. Considering this it is obvious, that the right numbere of argmuents is three.
After this check, the node is created with(% class="mark" %) ros::init()(%%) and(% class="mark" %) ros::NodeHandle(%%). Subsequently the service-client is created in a similiar way as the service-serve. The client-object is initialized by a memberfunction of the nodehandle. At this point it is important to choose the same servicename as the server uses. In this case the right servicename is (% class="mark" %)calculate(%%).


Afterwards an object from (% class="mark" %)calculator::calc_srv(%%) is created. This is required for the next step, where the arguments from the commandline have to be casted from C-string to integer. For this purpose the boost- library provides the (% class="mark" %)lexical_cast&lt;T>()(%%)-function. This function casts the function-argument to the datatype T. If the input can not be casted as expected, the function throws an exception(% class="mark" %) boost::bad_lexical_cast(%%). So, the try-catch-instruction prevents from sending a bad commandline-input to the server.
However, when the commandline-input is correct the following if-statement is executed. In the Argument the call-function is called. The function returns a bool, so it can be used as an argument for the if-statement. If the callback-function add() returns true, the client-node writes the result to the commandline using a logging-message. Otherwise, when the callback-function returns false an error-message is printed in the terminal and the main-function returns with 1.


==== **build-process** ====

At this point the two sourcefiles have been created and stored in the src-directory inside the calculator-package. Before the build-process can start the file CMakeLists.txt has to be prepared.
At first open the CMakeLists.txt-file and uncomment the lines


(% class="box infomessage" %)
(((
add_service_files(
    FILES
 )
)))

Now add (% class="mark" %)calc_srv.srv (%%)under FILES. These lines make sure, that the .srv-file in the directory srv is considered during the build-process.

Further, the following lines have to be uncommented.

(% class="box infomessage" %)
(((
 generate_messages(
   DEPENDENCIES
 )
)))

These are required for generating the messages, that are defined inside the service-definition. In this case only standard messagetypes are used, so the only entry will be(% class="mark" %) std_msgs.(%%) This line has to be added under DEPENDENCIES.
The next step is to announce the sourcefiles to the build-process. It is important to remember, that the headerfiles calculator/calc_srv.h, which is included in both sourcefiles is not build yet. That is why it is necessary to add dependencies to the CMakeLists.txt-file. These dependencies make sure, that executables are only then be built, when the build of headerfile has finished.
The generic structure of the dependency-command is:

(% class="box infomessage" %)
(((
add_dependencies(&lt;target> &lt;target_dependency>)
)))

 In this case the proper command is:

(% class="box infomessage" %)
(((
add_dependencies(server calculator_generate_messages_cpp) # for the server
)))

or

(% class="box infomessage" %)
(((
add_dependencies(client calculator_generate_messages_cpp) # for the client
)))

 Maybe it seems a bit strange, that the dependency is related to message_generation and not about service-files. But message_generation works for both[^msg_and_srv]
With the knowledge from Example 2: hello-world.cpp, the following lines can be added to CMakeLists.txt:

(% class="box infomessage" %)
(((
add_executable(server src/server.cpp)
target_link_libraries(server ${catkin_LIBRARIES})
add_dependencies(server calculator_generate_messages_cpp)

add_executable(client src/client.cpp)
target_link_libraries(client ${catkin_LIBRARIES})
add_dependencies(client calculator_generate_messages_cpp)
)))

(% class="box" %)
(((
 Note: The file package.xml has not to be adjusted, because the required dependencies were added when the package was created.
)))

The verylast step is to start the build process. Switch to the top of the workspace and then execute 

(% class="box infomessage" %)
(((
catkin_make
)))


==== **Using the package** ====

After a successful build-process two executables are generated. Before they can be used a roscore has to be started. Afterwards, start the server-node with

(% class="box infomessage" %)
(((
$ rosrun calculator server
)))

and the cleint node with 

(% class="box infomessage" %)
(((
$ rosrun calculator client a b
)))

Replace a and b with integer values. For example, execute:

(% class="box infomessage" %)
(((
 $ rosrun calculator client 4 12
)))

This results in the following output in the server-terminal: 

(% class="box infomessage" %)
(((
[ INFO] [1509369925.682593826]: The two integers are: 4 and 12

[ INFO] [1509369925.682726903]: The calculated sum is 16
)))

The output in the client-terminal will be similar to: 

(% class="box infomessage" %)
(((
[ INFO] [1509369925.683124120]: Result is: 16
)))

Invalid inputs like

(% class="box infomessage" %)
(((
$ rosrun calculator client 4 xy
)))

or

(% class="box infomessage" %)
(((
$ rosrun calculator client
)))

will cause error-messages, due to the error-handling in the nodes. 


=== Example 6: Ask the master ===

----

This is another example for creating a service in a ROS-network. The node provides a service that should return the number of active topics in the ROS network.
At first a new package has to be created. The ROS C++-API is needed for sure and furthermore the standard ROS-messages. So, the command for creating the new package is (of course, this command should be executed in the source-folder of the workspace):

(% class="box infomessage" %)
(((
$ catkin_create_pkg list_topics roscpp std_msgs message_generation
)))

 The new package is called list_topics with the dependencies roscpp, message_generation and std_msgs.


==== **Define the service** ====

The next step is a new one. To define a service switch in the package folder and create a new folder called srv. Open this folder an create a new file. This file contains the definition of the service, i.e. the input and output arguments. This file will be named with "list_topics_service.srv".
Then, open the file and type in the definition of the service. The service does not need any input arguments. The output argument, what the service should return, is a single integer value. So, the definition looks like this:

(% class="box infomessage" %)
(((
~-~--
int16 number_of_topics
)))

The definition is to read as follows. Over the three hyphens there are the input argument(s). In this case it is empty, but also when it empty a messagetype will be required. This messagetype is std_msgs/Empty. Under the three hyphens are the output argument(s). As seen above, only one argument is listed. The output argument of this service is an 16bit integer called number_of_topics.
At this point the service is already defined.


==== **Creating the server** ====

After defining the service, a server that provides the service is necessary. For this purpsose change to the folder src within the package directory and create a file named "list_topics_node.cpp". The server, which provides the desired service, is created by the following code:

(% class="box infomessage" %)
(((
#include "ros/ros.h"
#include "list_topics/list_topics_service.h"

bool number_topics(list_topics::list_topics_service::Request &amp;req, list_topics::list_topics_service::Response &amp;res){
    ros::master::V_TopicInfo master_topics;
    ros::master::getTopics(master_topics);
    int number_t = master_topics.size();
    ROS_INFO("Topics: [%i]", (int) number_t);
    res.number = number_t;
  return true;
}

int main(int argc, char ~*~*argv)
{  
  ros::init(argc, argv, "list_topics_node");
  ros::NodeHandle handle;
\\  ros::ServiceServer service = handle.advertiseService("show_number_of_topics", &amp;number_topics);
  ROS_INFO("Returning number of active topics.");
  ros::spin();

  return 0;
}
)))

At the very top, the requiered libraries are included. ros/ros.h is necessary every time when the ROS C++-API should be used. The header list_topics/list_topics_service.h includes the service-definition. That there is no such headerfile build so far should be kept in mind for the later build-process.
Further down, the callback-function, that will be executed when the service is called, is defined. The returntype is always bool. It does not matter, whether it is a function or a member function or anything else.
The body of the callback-function contains the
instructions, that will be executed when a new request arrives. At the beginning a new vectorobject from the struct V_TopicInfo is created. In the next line the function getTopics (V_TopicInfo &amp;topics) writes all active topics to the vectorobject by reference. Because V_TopicInfo is just a vector of structs, the member function can be used here to return the size of the vector, which is equal to the number of active topics.
The last instruction in the callback-function is the return argument.
The main-function starts as usual with the initialization of the node. Afterwards the serive_serve is created. The ROS C++-API recommends to do this with the member function of the nodehandle.


(% class="box" %)
(((
A ServiceServer should always be created through a call to NodeHandle::advertiseService(), or copied from one that was. Once all copies of a specific ServiceServer go out of scope, the service associated with it will be unadvertised and the service callback will stop being called. (see: ros::ServiceServer Class Reference)
)))

There are several ways to implement a service. For this introductory example, the simplest option is to use a simple callback function. Only the service name and the name of the callback functions is expected.
Following, an info message that the service server is ready and the instruction to pass control to the node.
Now the node is almost ready to get build with catkin.


==== **Building the service-server** ====

Before the node can be build, the file CMakeLists.txt has to be adjusted.

(% class="box infomessage" %)
(((
cmake_minimum_required(VERSION 2.8.3)
project(list_topics)

find_package(catkin REQUIRED COMPONENTS
  message_generation
  roscpp
  std_msgs
)

add_service_files(
    FILES
      list_topics_service.srv
                )


 generate_messages(
   DEPENDENCIES
   std_msgs
                )

include_directories(
  ${catkin_INCLUDE_DIRS}
)


add_executable(list_topics_node src/list_topics_node.cpp)
target_link_libraries(list_topics_node ${catkin_LIBRARIES})
add_dependencies(list_topics_node list_topics_generate_messages_cpp)
)))

The required components have been added when the package has been created (see above). At first, catkin has to know that it has to create headerfiles from the service definition. This can be declared in section add_service_files. Further the message-dependencies have to be declared. As a reminder, the service definition is a composition of messages. In this case two standard messages are used. So, In section `generate_messages the entry std_msgs has to be made.
After including the catkin directory and adding the executable (see also: example-2-hello-worldcpp), a dependency has to be added, that the service header have to be build before building the executable. Otherwise the build process will throw an error.
After editing the CMakeLists.txt file the build process can start:

(% class="box infomessage" %)
(((
$ catkin_make
)))

(% class="box" %)
(((
Note: Usually the manifest package.xml has to be edited as well. But in this case, the required dependencies have been added by using the catkin_create_pkg command with the proper dependencies.
)))



==== **Using the package** ====

The service is quite simple to use. Open up three terminals and start a roscore in the first one. Than start with

(% class="box infomessage" %)
(((
$ rosrun list_topics list_topics_node
)))

the service-server node.
The last step is to call the service. With knowledge from the previous chapter, the command

(% class="box infomessage" %)
(((
$ rosservice call /show_number_of_topics
)))

should be familiar.



=== Further Examples ===

(% class="box" %)
(((
As said in the introduction, this is designed as rolling release. So, the number of examples and/or other sections will increase in future.
)))

==== **Spawn a turtle with a service** ====

Another good described example can be found in this free-of-charge book in chapter 8.3. In this example the author describes how to implement a node, that calls the service /spawn provided by the node /turtlesim_node. The proceeding is similar to the above one, but it may be a good exersise to implement it on your own.

1. Note: Calling(% class="mark" %) $ rosnode info &lt;node-name>(%%) will return the services provided by the node. ROS nodes
1. rosrpc stands for ROS-~_~_R~_~_emote ~_~_P~_~_rocedure ~_~_C~_~_all
1. The hyphens are not optional, rather part of the syntax.</content>
  <attachment>
    <filename>ros_service_basic_struture.png</filename>
    <versions>head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2019.10.31.12.37.07;	author root;	state Exp;
branches;
next	;


desc
@@


1.1
log
@ros_service_basic_struture.png
@
text
@&lt;attachment>
  &lt;filename>ros_service_basic_struture.png&lt;/filename>
  &lt;author>XWiki.DavidDudzik&lt;/author>
  &lt;date>1545220217000&lt;/date>
  &lt;version>1.1&lt;/version>
  &lt;comment/>
  &lt;content>&lt;/content>
  &lt;filesize>8991&lt;/filesize>
&lt;/attachment>@
</versions>
    <author>XWiki.DavidDudzik</author>
    <date>1545220217000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>8991</filesize>
  </attachment>
  <attachment>
    <filename>ros_service_graph.png</filename>
    <versions>head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2019.10.31.12.37.07;	author root;	state Exp;
branches;
next	;


desc
@@


1.1
log
@ros_service_graph.png
@
text
@&lt;attachment>
  &lt;filename>ros_service_graph.png&lt;/filename>
  &lt;author>XWiki.DavidDudzik&lt;/author>
  &lt;date>1545220848000&lt;/date>
  &lt;version>1.1&lt;/version>
  &lt;comment/>
  &lt;content>&lt;/content>
  &lt;filesize>35423&lt;/filesize>
&lt;/attachment>@
</versions>
    <author>XWiki.DavidDudzik</author>
    <date>1545220848000</date>
    <version>1.1</version>
    <comment/>
    <content></content>
    <filesize>35423</filesize>
  </attachment>
</xwikidoc>